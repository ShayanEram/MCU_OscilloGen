
OscilloGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  080147a0  080147a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801508c  0801508c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015094  08015094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801509c  0801509c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  080150a0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004908  24000154  080151f4  00017154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a5c  080151f4  00017a5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017154  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066e01  00000000  00000000  00017182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009e82  00000000  00000000  0007df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f0  00000000  00000000  00087e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f23  00000000  00000000  0008a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000478a2  00000000  00000000  0008c61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000486b7  00000000  00000000  000d3ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018083d  00000000  00000000  0011c574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  0029cdb1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b068  00000000  00000000  0029ce64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  002a7ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000000d8  00000000  00000000  002a7f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  002a8009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014788 	.word	0x08014788

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	08014788 	.word	0x08014788

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2224      	movs	r2, #36	@ 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f013 fbdb 	bl	8013ec0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070a:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800070c:	4a32      	ldr	r2, [pc, #200]	@ (80007d8 <MX_ADC1_Init+0xec>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000710:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000716:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071c:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000724:	2204      	movs	r2, #4
 8000726:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000730:	2201      	movs	r2, #1
 8000732:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000750:	2203      	movs	r2, #3
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800076a:	2201      	movs	r2, #1
 800076c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	4819      	ldr	r0, [pc, #100]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000770:	f002 fc28 	bl	8002fc4 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077a:	f000 fd29 	bl	80011d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800078a:	f003 fe95 	bl	80044b8 <HAL_ADCEx_MultiModeConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000794:	f000 fd1c 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_ADC1_Init+0xf0>)
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2306      	movs	r3, #6
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2304      	movs	r3, #4
 80007ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 80007be:	f003 f861 	bl	8003884 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80007c8:	f000 fd02 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3730      	adds	r7, #48	@ 0x30
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	24000170 	.word	0x24000170
 80007d8:	40022000 	.word	0x40022000
 80007dc:	0c900008 	.word	0x0c900008

080007e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0b8      	sub	sp, #224	@ 0xe0
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	22b8      	movs	r2, #184	@ 0xb8
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f013 fb5d 	bl	8013ec0 <memset>
  if(adcHandle->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a48      	ldr	r2, [pc, #288]	@ (800092c <HAL_ADC_MspInit+0x14c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	f040 8088 	bne.w	8000922 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000812:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000822:	230c      	movs	r3, #12
 8000824:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000832:	23c0      	movs	r3, #192	@ 0xc0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f009 fa7b 	bl	8009d44 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000854:	f000 fcbc 	bl	80011d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000858:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800085a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800085e:	4a34      	ldr	r2, [pc, #208]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000868:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800086a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000894:	2340      	movs	r3, #64	@ 0x40
 8000896:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008aa:	4619      	mov	r1, r3
 80008ac:	4821      	ldr	r0, [pc, #132]	@ (8000934 <HAL_ADC_MspInit+0x154>)
 80008ae:	f006 fccd 	bl	800724c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <HAL_ADC_MspInit+0x15c>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f6:	4810      	ldr	r0, [pc, #64]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008f8:	f004 fa86 	bl	8004e08 <HAL_DMA_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000902:	f000 fc65 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 800090a:	659a      	str	r2, [r3, #88]	@ 0x58
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2012      	movs	r0, #18
 8000918:	f004 f861 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800091c:	2012      	movs	r0, #18
 800091e:	f004 f878 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	37e0      	adds	r7, #224	@ 0xe0
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000
 8000930:	58024400 	.word	0x58024400
 8000934:	58020000 	.word	0x58020000
 8000938:	240001e0 	.word	0x240001e0
 800093c:	40020088 	.word	0x40020088

08000940 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_rd;
DMA_HandleTypeDef hdma_cordic_wr;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_CORDIC_Init+0x20>)
 8000946:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <MX_CORDIC_Init+0x24>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_CORDIC_Init+0x20>)
 800094c:	f003 fe96 	bl	800467c <HAL_CORDIC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000956:	f000 fc3b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000258 	.word	0x24000258
 8000964:	48024400 	.word	0x48024400

08000968 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a3c      	ldr	r2, [pc, #240]	@ (8000a68 <HAL_CORDIC_MspInit+0x100>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d172      	bne.n	8000a60 <HAL_CORDIC_MspInit+0xf8>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800097a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 800097c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000980:	4a3a      	ldr	r2, [pc, #232]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000986:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 800098c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_RD Init */
    hdma_cordic_rd.Instance = DMA1_Stream7;
 8000998:	4b35      	ldr	r3, [pc, #212]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 800099a:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <HAL_CORDIC_MspInit+0x10c>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_cordic_rd.Init.Request = DMA_REQUEST_CORDIC_READ;
 800099e:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009a0:	227a      	movs	r2, #122	@ 0x7a
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_cordic_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_cordic_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_cordic_rd.Init.MemInc = DMA_MINC_ENABLE;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_cordic_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
    hdma_cordic_rd.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
    hdma_cordic_rd.Init.Mode = DMA_CIRCULAR;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ca:	61da      	str	r2, [r3, #28]
    hdma_cordic_rd.Init.Priority = DMA_PRIORITY_LOW;
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_cordic_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_rd) != HAL_OK)
 80009d8:	4825      	ldr	r0, [pc, #148]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009da:	f004 fa15 	bl	8004e08 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_CORDIC_MspInit+0x80>
    {
      Error_Handler();
 80009e4:	f000 fbf4 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_rd);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ec:	619a      	str	r2, [r3, #24]
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC_WR Init */
    hdma_cordic_wr.Instance = DMA2_Stream0;
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 80009f6:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <HAL_CORDIC_MspInit+0x114>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_cordic_wr.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 80009fc:	227b      	movs	r2, #123	@ 0x7b
 80009fe:	605a      	str	r2, [r3, #4]
    hdma_cordic_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a02:	2240      	movs	r2, #64	@ 0x40
 8000a04:	609a      	str	r2, [r3, #8]
    hdma_cordic_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    hdma_cordic_wr.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a12:	611a      	str	r2, [r3, #16]
    hdma_cordic_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_cordic_wr.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
    hdma_cordic_wr.Init.Mode = DMA_CIRCULAR;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_cordic_wr.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    hdma_cordic_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_wr) != HAL_OK)
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a36:	f004 f9e7 	bl	8004e08 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_CORDIC_MspInit+0xdc>
    {
      Error_Handler();
 8000a40:	f000 fbc6 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_wr);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a48:	61da      	str	r2, [r3, #28]
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	209a      	movs	r0, #154	@ 0x9a
 8000a56:	f003 ffc2 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8000a5a:	209a      	movs	r0, #154	@ 0x9a
 8000a5c:	f003 ffd9 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48024400 	.word	0x48024400
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	24000280 	.word	0x24000280
 8000a74:	400200b8 	.word	0x400200b8
 8000a78:	240002f8 	.word	0x240002f8
 8000a7c:	40020410 	.word	0x40020410

08000a80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2224      	movs	r2, #36	@ 0x24
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f013 fa17 	bl	8013ec0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_DAC1_Init+0x60>)
 8000a96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a98:	4810      	ldr	r0, [pc, #64]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000a9a:	f004 f84d 	bl	8004b38 <HAL_DAC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000aa4:	f000 fb94 	bl	80011d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000aac:	230a      	movs	r3, #10
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000ac4:	f004 f85a 	bl	8004b7c <HAL_DAC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 fb7f 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000370 	.word	0x24000370
 8000ae0:	40007400 	.word	0x40007400

08000ae4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a30      	ldr	r2, [pc, #192]	@ (8000bc4 <HAL_DAC_MspInit+0xe0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d159      	bne.n	8000bba <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b06:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b16:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b46:	2303      	movs	r3, #3
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	481d      	ldr	r0, [pc, #116]	@ (8000bcc <HAL_DAC_MspInit+0xe8>)
 8000b56:	f006 fb79 	bl	800724c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream6;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <HAL_DAC_MspInit+0xf0>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b62:	2243      	movs	r2, #67	@ 0x43
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b68:	2240      	movs	r2, #64	@ 0x40
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000ba0:	f004 f932 	bl	8004e08 <HAL_DMA_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000baa:	f000 fb11 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40007400 	.word	0x40007400
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020000 	.word	0x58020000
 8000bd0:	24000384 	.word	0x24000384
 8000bd4:	400200a0 	.word	0x400200a0

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be4:	4a33      	ldr	r2, [pc, #204]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c02:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f003 fedd 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f003 fef4 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f003 fed5 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c34:	200c      	movs	r0, #12
 8000c36:	f003 feec 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f003 fecd 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c44:	200d      	movs	r0, #13
 8000c46:	f003 fee4 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200e      	movs	r0, #14
 8000c50:	f003 fec5 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c54:	200e      	movs	r0, #14
 8000c56:	f003 fedc 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f003 febd 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f003 fed4 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f003 feb5 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f003 fecc 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f003 fead 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c84:	2011      	movs	r0, #17
 8000c86:	f003 fec4 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	202f      	movs	r0, #47	@ 0x2f
 8000c90:	f003 fea5 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c94:	202f      	movs	r0, #47	@ 0x2f
 8000c96:	f003 febc 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2038      	movs	r0, #56	@ 0x38
 8000ca0:	f003 fe9d 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca4:	2038      	movs	r0, #56	@ 0x38
 8000ca6:	f003 feb4 	bl	8004a12 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58024400 	.word	0x58024400

08000cb8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	4b71      	ldr	r3, [pc, #452]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b6d      	ldr	r3, [pc, #436]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b69      	ldr	r3, [pc, #420]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a68      	ldr	r2, [pc, #416]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b65      	ldr	r3, [pc, #404]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b62      	ldr	r3, [pc, #392]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a60      	ldr	r2, [pc, #384]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d28:	4b5a      	ldr	r3, [pc, #360]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a59      	ldr	r2, [pc, #356]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a51      	ldr	r2, [pc, #324]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	4a42      	ldr	r2, [pc, #264]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	4a3b      	ldr	r2, [pc, #236]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db0:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000dbe:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4831      	ldr	r0, [pc, #196]	@ (8000e98 <MX_GPIO_Init+0x1e0>)
 8000dd4:	f006 fa3a 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000dd8:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <MX_GPIO_Init+0x1e4>)
 8000dee:	f006 fa2d 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4826      	ldr	r0, [pc, #152]	@ (8000ea0 <MX_GPIO_Init+0x1e8>)
 8000e08:	f006 fa20 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4821      	ldr	r0, [pc, #132]	@ (8000ea4 <MX_GPIO_Init+0x1ec>)
 8000e20:	f006 fa14 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 8000e24:	f240 5303 	movw	r3, #1283	@ 0x503
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	481b      	ldr	r0, [pc, #108]	@ (8000ea8 <MX_GPIO_Init+0x1f0>)
 8000e3a:	f006 fa07 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e3e:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4816      	ldr	r0, [pc, #88]	@ (8000eac <MX_GPIO_Init+0x1f4>)
 8000e54:	f006 f9fa 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e58:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <MX_GPIO_Init+0x1f8>)
 8000e6e:	f006 f9ed 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <MX_GPIO_Init+0x1fc>)
 8000e88:	f006 f9e0 	bl	800724c <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3738      	adds	r7, #56	@ 0x38
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58021000 	.word	0x58021000
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	58021c00 	.word	0x58021c00
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800
 8000eb4:	58020c00 	.word	0x58020c00

08000eb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8000f30 <MX_I2C1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0BBFF;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <MX_I2C1_Init+0x7c>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef2:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ef4:	f006 fb52 	bl	800759c <HAL_I2C_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efe:	f000 f967 	bl	80011d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4809      	ldr	r0, [pc, #36]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000f06:	f006 fbe5 	bl	80076d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f000 f95e 	bl	80011d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000f18:	f006 fc27 	bl	800776a <HAL_I2CEx_ConfigDigitalFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f955 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240003fc 	.word	0x240003fc
 8000f30:	40005400 	.word	0x40005400
 8000f34:	20b0bbff 	.word	0x20b0bbff

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0b8      	sub	sp, #224	@ 0xe0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	22b8      	movs	r2, #184	@ 0xb8
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f012 ffb1 	bl	8013ec0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <HAL_I2C_MspInit+0xc4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d145      	bne.n	8000ff4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f68:	f04f 0208 	mov.w	r2, #8
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f008 fee0 	bl	8009d44 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f8a:	f000 f921 	bl	80011d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fac:	23c0      	movs	r3, #192	@ 0xc0
 8000fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <HAL_I2C_MspInit+0xcc>)
 8000fd2:	f006 f93b 	bl	800724c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fdc:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	37e0      	adds	r7, #224	@ 0xe0
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	58024400 	.word	0x58024400
 8001004:	58020400 	.word	0x58020400

08001008 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <MX_IWDG1_Init+0x34>)
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <MX_IWDG1_Init+0x38>)
 8001010:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 200;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MX_IWDG1_Init+0x34>)
 800101a:	22c8      	movs	r2, #200	@ 0xc8
 800101c:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 420;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001020:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001024:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001028:	f006 fbeb 	bl	8007802 <HAL_IWDG_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 8001032:	f000 f8cd 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000450 	.word	0x24000450
 8001040:	58004800 	.word	0x58004800

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001048:	f000 f896 	bl	8001178 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f001 fc42 	bl	80028d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f81e 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fe30 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fdbe 	bl	8000bd8 <MX_DMA_Init>
  MX_TIM1_Init();
 800105c:	f000 fbce 	bl	80017fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001060:	f000 fd72 	bl	8001b48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001064:	f000 f8ba 	bl	80011dc <MX_SPI1_Init>
  MX_I2C1_Init();
 8001068:	f7ff ff26 	bl	8000eb8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800106c:	f012 f930 	bl	80132d0 <MX_USB_DEVICE_Init>
  MX_IWDG1_Init();
 8001070:	f7ff ffca 	bl	8001008 <MX_IWDG1_Init>
  MX_ADC1_Init();
 8001074:	f7ff fb3a 	bl	80006ec <MX_ADC1_Init>
  MX_DAC1_Init();
 8001078:	f7ff fd02 	bl	8000a80 <MX_DAC1_Init>
  MX_TIM2_Init();
 800107c:	f000 fc6a 	bl	8001954 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8001080:	f7ff fc5e 	bl	8000940 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MainCpp();
 8001084:	f001 f92e 	bl	80022e4 <MainCpp>
 8001088:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09c      	sub	sp, #112	@ 0x70
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	224c      	movs	r2, #76	@ 0x4c
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f012 ff0e 	bl	8013ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f012 ff08 	bl	8013ec0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f007 fe97 	bl	8008de4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <SystemClock_Config+0xe4>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <SystemClock_Config+0xe4>)
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <SystemClock_Config+0xe4>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d2:	bf00      	nop
 80010d4:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <SystemClock_Config+0xe4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010e0:	d1f8      	bne.n	80010d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80010e2:	232a      	movs	r3, #42	@ 0x2a
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fa:	2300      	movs	r3, #0
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010fe:	2304      	movs	r3, #4
 8001100:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 8001102:	2321      	movs	r3, #33	@ 0x21
 8001104:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800110a:	2303      	movs	r3, #3
 800110c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001112:	230c      	movs	r3, #12
 8001114:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800111a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f007 fea7 	bl	8008e78 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001130:	f000 f84e 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	233f      	movs	r3, #63	@ 0x3f
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001140:	2308      	movs	r3, #8
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001148:	2340      	movs	r3, #64	@ 0x40
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800114c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001150:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2103      	movs	r1, #3
 800115a:	4618      	mov	r0, r3
 800115c:	f008 fa66 	bl	800962c <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001166:	f000 f833 	bl	80011d0 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3770      	adds	r7, #112	@ 0x70
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58024800 	.word	0x58024800

08001178 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800118a:	f003 fc5d 	bl	8004a48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800118e:	2301      	movs	r3, #1
 8001190:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800119a:	231f      	movs	r3, #31
 800119c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800119e:	2387      	movs	r3, #135	@ 0x87
 80011a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fc7b 	bl	8004ab8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f003 fc58 	bl	8004a78 <HAL_MPU_Enable>

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011f6:	221f      	movs	r2, #31
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001208:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001232:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800126c:	f00b f950 	bl	800c510 <HAL_SPI_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001276:	f7ff ffab 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000460 	.word	0x24000460
 8001284:	40013000 	.word	0x40013000

08001288 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ba      	sub	sp, #232	@ 0xe8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	22b8      	movs	r2, #184	@ 0xb8
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f012 fe09 	bl	8013ec0 <memset>
  if(spiHandle->Instance==SPI1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6b      	ldr	r2, [pc, #428]	@ (8001460 <HAL_SPI_MspInit+0x1d8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	f040 80cf 	bne.w	8001458 <HAL_SPI_MspInit+0x1d0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 fd38 	bl	8009d44 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012da:	f7ff ff79 	bl	80011d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	4a58      	ldr	r2, [pc, #352]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800131a:	4b52      	ldr	r3, [pc, #328]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	4a50      	ldr	r2, [pc, #320]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 8001322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132a:	4b4e      	ldr	r3, [pc, #312]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15(JTDI)     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001338:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 800133c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001352:	2305      	movs	r3, #5
 8001354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800135c:	4619      	mov	r1, r3
 800135e:	4842      	ldr	r0, [pc, #264]	@ (8001468 <HAL_SPI_MspInit+0x1e0>)
 8001360:	f005 ff74 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	4838      	ldr	r0, [pc, #224]	@ (800146c <HAL_SPI_MspInit+0x1e4>)
 800138c:	f005 ff5e 	bl	800724c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001390:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 8001392:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_SPI_MspInit+0x1ec>)
 8001394:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 8001398:	2226      	movs	r2, #38	@ 0x26
 800139a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139c:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 800139e:	2240      	movs	r2, #64	@ 0x40
 80013a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d0:	4827      	ldr	r0, [pc, #156]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013d2:	f003 fd19 	bl	8004e08 <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80013dc:	f7ff fef8 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a23      	ldr	r2, [pc, #140]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80013e6:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <HAL_SPI_MspInit+0x1f4>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013f4:	2225      	movs	r2, #37	@ 0x25
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001420:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001424:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800142e:	f003 fceb 	bl	8004e08 <HAL_DMA_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8001438:	f7ff feca 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001440:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2023      	movs	r0, #35	@ 0x23
 800144e:	f003 fac6 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001452:	2023      	movs	r0, #35	@ 0x23
 8001454:	f003 fadd 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	37e8      	adds	r7, #232	@ 0xe8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013000 	.word	0x40013000
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000
 800146c:	58021800 	.word	0x58021800
 8001470:	240004e8 	.word	0x240004e8
 8001474:	40020058 	.word	0x40020058
 8001478:	24000560 	.word	0x24000560
 800147c:	40020070 	.word	0x40020070

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MspInit+0x30>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x30>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x30>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58024400 	.word	0x58024400

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f001 fa55 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <DMA1_Stream0_IRQHandler+0x10>)
 800151a:	f004 fd31 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000674 	.word	0x24000674

08001528 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <DMA1_Stream1_IRQHandler+0x10>)
 800152e:	f004 fd27 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24000780 	.word	0x24000780

0800153c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA1_Stream2_IRQHandler+0x10>)
 8001542:	f004 fd1d 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240007f8 	.word	0x240007f8

08001550 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA1_Stream3_IRQHandler+0x10>)
 8001556:	f004 fd13 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240004e8 	.word	0x240004e8

08001564 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA1_Stream4_IRQHandler+0x10>)
 800156a:	f004 fd09 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000560 	.word	0x24000560

08001578 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA1_Stream5_IRQHandler+0x10>)
 800157e:	f004 fcff 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240001e0 	.word	0x240001e0

0800158c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Stream6_IRQHandler+0x10>)
 8001592:	f004 fcf5 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	24000384 	.word	0x24000384

080015a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <ADC_IRQHandler+0x10>)
 80015a6:	f001 ff15 	bl	80033d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000170 	.word	0x24000170

080015b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <TIM2_IRQHandler+0x10>)
 80015ba:	f00b fc5a 	bl	800ce72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24000628 	.word	0x24000628

080015c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <SPI1_IRQHandler+0x10>)
 80015ce:	f00b f8c3 	bl	800c758 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000460 	.word	0x24000460

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f00c fd41 	bl	800e068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	240006ec 	.word	0x240006ec

080015f0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_rd);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <DMA1_Stream7_IRQHandler+0x10>)
 80015f6:	f004 fcc3 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000280 	.word	0x24000280

08001604 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_wr);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA2_Stream0_IRQHandler+0x10>)
 800160a:	f004 fcb9 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	240002f8 	.word	0x240002f8

08001618 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <OTG_HS_IRQHandler+0x10>)
 800161e:	f006 fa82 	bl	8007b26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24004210 	.word	0x24004210

0800162c <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <CORDIC_IRQHandler+0x10>)
 8001632:	f003 f85e 	bl	80046f2 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	24000258 	.word	0x24000258

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f012 fc2e 	bl	8013ed0 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24050000 	.word	0x24050000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	240005d8 	.word	0x240005d8
 80016a8:	24004a60 	.word	0x24004a60

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <SystemInit+0x100>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a3d      	ldr	r2, [pc, #244]	@ (80017ac <SystemInit+0x100>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c0:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <SystemInit+0x104>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d807      	bhi.n	80016dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016cc:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <SystemInit+0x104>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 030f 	bic.w	r3, r3, #15
 80016d4:	4a36      	ldr	r2, [pc, #216]	@ (80017b0 <SystemInit+0x104>)
 80016d6:	f043 0307 	orr.w	r3, r3, #7
 80016da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016dc:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <SystemInit+0x108>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a34      	ldr	r2, [pc, #208]	@ (80017b4 <SystemInit+0x108>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e8:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <SystemInit+0x108>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ee:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <SystemInit+0x108>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4930      	ldr	r1, [pc, #192]	@ (80017b4 <SystemInit+0x108>)
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <SystemInit+0x10c>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <SystemInit+0x104>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <SystemInit+0x104>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 030f 	bic.w	r3, r3, #15
 800170e:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <SystemInit+0x104>)
 8001710:	f043 0307 	orr.w	r3, r3, #7
 8001714:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001716:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <SystemInit+0x108>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <SystemInit+0x108>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemInit+0x108>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <SystemInit+0x108>)
 800172a:	4a24      	ldr	r2, [pc, #144]	@ (80017bc <SystemInit+0x110>)
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <SystemInit+0x108>)
 8001730:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <SystemInit+0x114>)
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <SystemInit+0x108>)
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <SystemInit+0x118>)
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <SystemInit+0x108>)
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <SystemInit+0x108>)
 8001742:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <SystemInit+0x118>)
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <SystemInit+0x108>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <SystemInit+0x108>)
 800174e:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <SystemInit+0x118>)
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <SystemInit+0x108>)
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <SystemInit+0x108>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <SystemInit+0x108>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <SystemInit+0x108>)
 8001766:	2200      	movs	r2, #0
 8001768:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <SystemInit+0x108>)
 800176c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d113      	bne.n	80017a0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <SystemInit+0x108>)
 800177a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800177e:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <SystemInit+0x108>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <SystemInit+0x11c>)
 800178a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800178e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <SystemInit+0x108>)
 8001792:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <SystemInit+0x108>)
 8001798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800179c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017bc:	02020200 	.word	0x02020200
 80017c0:	01ff0000 	.word	0x01ff0000
 80017c4:	01010280 	.word	0x01010280
 80017c8:	52004000 	.word	0x52004000

080017cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80017dc:	bf00      	nop
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f9      	beq.n	80017de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58024800 	.word	0x58024800

080017fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09c      	sub	sp, #112	@ 0x70
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2234      	movs	r2, #52	@ 0x34
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f012 fb42 	bl	8013ec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183c:	4b43      	ldr	r3, [pc, #268]	@ (800194c <MX_TIM1_Init+0x150>)
 800183e:	4a44      	ldr	r2, [pc, #272]	@ (8001950 <MX_TIM1_Init+0x154>)
 8001840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1020-1;
 8001842:	4b42      	ldr	r3, [pc, #264]	@ (800194c <MX_TIM1_Init+0x150>)
 8001844:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 8001848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <MX_TIM1_Init+0x150>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001850:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <MX_TIM1_Init+0x150>)
 8001852:	2209      	movs	r2, #9
 8001854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <MX_TIM1_Init+0x150>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185c:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <MX_TIM1_Init+0x150>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <MX_TIM1_Init+0x150>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001868:	4838      	ldr	r0, [pc, #224]	@ (800194c <MX_TIM1_Init+0x150>)
 800186a:	f00b fa4a 	bl	800cd02 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001874:	f7ff fcac 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001882:	4619      	mov	r1, r3
 8001884:	4831      	ldr	r0, [pc, #196]	@ (800194c <MX_TIM1_Init+0x150>)
 8001886:	f00b fd0f 	bl	800d2a8 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001890:	f7ff fc9e 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001894:	482d      	ldr	r0, [pc, #180]	@ (800194c <MX_TIM1_Init+0x150>)
 8001896:	f00b fa8b 	bl	800cdb0 <HAL_TIM_PWM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018a0:	f7ff fc96 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018b4:	4619      	mov	r1, r3
 80018b6:	4825      	ldr	r0, [pc, #148]	@ (800194c <MX_TIM1_Init+0x150>)
 80018b8:	f00c fa40 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018c2:	f7ff fc85 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	@ 0x60
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d2:	2300      	movs	r3, #0
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4818      	ldr	r0, [pc, #96]	@ (800194c <MX_TIM1_Init+0x150>)
 80018ec:	f00b fbc8 	bl	800d080 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018f6:	f7ff fc6b 	bl	80011d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001912:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800191c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4619      	mov	r1, r3
 800192e:	4807      	ldr	r0, [pc, #28]	@ (800194c <MX_TIM1_Init+0x150>)
 8001930:	f00c faa0 	bl	800de74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800193a:	f7ff fc49 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <MX_TIM1_Init+0x150>)
 8001940:	f000 f8c6 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001944:	bf00      	nop
 8001946:	3770      	adds	r7, #112	@ 0x70
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	240005dc 	.word	0x240005dc
 8001950:	40010000 	.word	0x40010000

08001954 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001978:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 270-1;
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MX_TIM2_Init+0x98>)
 800197c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <MX_TIM2_Init+0x98>)
 800198a:	2263      	movs	r2, #99	@ 0x63
 800198c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	4814      	ldr	r0, [pc, #80]	@ (80019ec <MX_TIM2_Init+0x98>)
 800199c:	f00b f9b1 	bl	800cd02 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019a6:	f7ff fc13 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_TIM2_Init+0x98>)
 80019b8:	f00b fc76 	bl	800d2a8 <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019c2:	f7ff fc05 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019c6:	2320      	movs	r3, #32
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_TIM2_Init+0x98>)
 80019d4:	f00c f9b2 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019de:	f7ff fbf7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	24000628 	.word	0x24000628

080019f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xd0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d13e      	bne.n	8001a80 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a02:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a22:	4a2a      	ldr	r2, [pc, #168]	@ (8001acc <HAL_TIM_Base_MspInit+0xdc>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a28:	220b      	movs	r2, #11
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a62:	4819      	ldr	r0, [pc, #100]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a64:	f003 f9d0 	bl	8004e08 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a6e:	f7ff fbaf 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a78:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7e:	e01b      	b.n	8001ab8 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a88:	d116      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201c      	movs	r0, #28
 8001aae:	f002 ff96 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f002 ffad 	bl	8004a12 <HAL_NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	24000674 	.word	0x24000674
 8001acc:	40020010 	.word	0x40020010

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11f      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_TIM_MspPostInit+0x74>)
 8001b2e:	f005 fb8d 	bl	800724c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	58024400 	.word	0x58024400
 8001b44:	58021000 	.word	0x58021000

08001b48 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <MX_USART2_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b92:	f00c fa19 	bl	800dfc8 <HAL_UART_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f7ff fb18 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001ba4:	f00d ff76 	bl	800fa94 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bae:	f7ff fb0f 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4808      	ldr	r0, [pc, #32]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bb6:	f00d ffab 	bl	800fb10 <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f7ff fb06 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bc6:	f00d ff2c 	bl	800fa22 <HAL_UARTEx_DisableFifoMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f7ff fafe 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	240006ec 	.word	0x240006ec
 8001bdc:	40004400 	.word	0x40004400

08001be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b8      	sub	sp, #224	@ 0xe0
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	22b8      	movs	r2, #184	@ 0xb8
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f012 f95d 	bl	8013ec0 <memset>
  if(uartHandle->Instance==USART2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a59      	ldr	r2, [pc, #356]	@ (8001d70 <HAL_UART_MspInit+0x190>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f040 80ab 	bne.w	8001d68 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c12:	f04f 0202 	mov.w	r2, #2
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f008 f88b 	bl	8009d44 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001c34:	f7ff facc 	bl	80011d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b4e      	ldr	r3, [pc, #312]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c48:	4b4a      	ldr	r3, [pc, #296]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a45      	ldr	r2, [pc, #276]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c74:	230c      	movs	r3, #12
 8001c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c96:	4619      	mov	r1, r3
 8001c98:	4837      	ldr	r0, [pc, #220]	@ (8001d78 <HAL_UART_MspInit+0x198>)
 8001c9a:	f005 fad7 	bl	800724c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ca0:	4a37      	ldr	r2, [pc, #220]	@ (8001d80 <HAL_UART_MspInit+0x1a0>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001ca4:	4b35      	ldr	r3, [pc, #212]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ca6:	222c      	movs	r2, #44	@ 0x2c
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b32      	ldr	r3, [pc, #200]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ce0:	f003 f892 	bl	8004e08 <HAL_DMA_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001cea:	f7ff fa71 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cf2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cf4:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001cfc:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <HAL_UART_MspInit+0x1a8>)
 8001cfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d02:	222b      	movs	r2, #43	@ 0x2b
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d3a:	4812      	ldr	r0, [pc, #72]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d3c:	f003 f864 	bl	8004e08 <HAL_DMA_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001d46:	f7ff fa43 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d52:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2026      	movs	r0, #38	@ 0x26
 8001d5e:	f002 fe3e 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d62:	2026      	movs	r0, #38	@ 0x26
 8001d64:	f002 fe55 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d68:	bf00      	nop
 8001d6a:	37e0      	adds	r7, #224	@ 0xe0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40004400 	.word	0x40004400
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	24000780 	.word	0x24000780
 8001d80:	40020028 	.word	0x40020028
 8001d84:	240007f8 	.word	0x240007f8
 8001d88:	40020040 	.word	0x40020040

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001dc8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d90:	f7ff fd1c 	bl	80017cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f7ff fc8a 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f012 f88d 	bl	8013edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff f93f 	bl	8001044 <main>
  bx  lr
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001dcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8001dd4:	080150a0 	.word	0x080150a0
  ldr r2, =_sbss
 8001dd8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001ddc:	24004a5c 	.word	0x24004a5c

08001de0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC3_IRQHandler>

08001de2 <_ZN3Bsp11usbTransmitEPht>:
	return convertHALStatus(halStatus);
}

//USB-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::usbTransmit(uint8_t* Buf, uint16_t Len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	4613      	mov	r3, r2
 8001dee:	80fb      	strh	r3, [r7, #6]
	uint8_t result = CDC_Transmit_HS(Buf, Len);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4619      	mov	r1, r3
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f011 fb33 	bl	8013460 <CDC_Transmit_HS>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]

	if (result != USBD_OK )
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_ZN3Bsp11usbTransmitEPht+0x26>
		return Status::ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <_ZN3Bsp11usbTransmitEPht+0x28>

	return Status::OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZN3Bsp5delayEm>:
	return convertHALStatus(halStatus);
}

//Extra-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Bsp::delay(uint32_t Delay)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
	HAL_Delay(Delay);
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f000 fdeb 	bl	80029f8 <HAL_Delay>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZN11AnalyzerExtC1ER3Bsp>:
 *      Author: shaya
 */

#include "AnalyzerExtern.hpp"

AnalyzerExt::AnalyzerExt(Bsp& bsp): _bsp(bsp){}
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_ZN3DacC1ER3Bsp>:
 */

#include "DacExtern.hpp"
#include "arm_math.h"

Dac::Dac(Bsp& bsp): _bsp(bsp){}
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_ZN12FuncAnalyserC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncAnalyzer.hpp>

FuncAnalyser::FuncAnalyser(Bsp& bsp) : _bsp(bsp) {}
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_ZN12FuncAnalyser14startAnalysingEv>:

void FuncAnalyser::startAnalysing()
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	//_bsp.adcStart_DMA(&hadc, reinterpret_cast<uint32_t*>(adc_buffer.data()), ADC_BUF_SIZE);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea6:	eef0 7ae7 	vabs.f32	s15, s15
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_ZN13FuncGeneratorC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncGenerator.hpp>

FuncGenerator::FuncGenerator(Bsp& bsp) : _bsp(bsp){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
	generateWaveforms();
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f80d 	bl	8001ef8 <_ZN13FuncGenerator17generateWaveformsEv>
	activeWaveform = sineWave.data();
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3384      	adds	r3, #132	@ 0x84
 8001ee2:	60fb      	str	r3, [r7, #12]
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
}
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <_ZN13FuncGenerator17generateWaveformsEv>:

void FuncGenerator::generateWaveforms() {
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e08a      	b.n	800201c <_ZN13FuncGenerator17generateWaveformsEv+0x124>
        float angle = 2.0f * PI * i / SAMPLE_COUNT;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f10:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002030 <_ZN13FuncGenerator17generateWaveformsEv+0x138>
 8001f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f18:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002034 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8001f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f20:	edc7 7a02 	vstr	s15, [r7, #8]

        // Generate Sine Wave
        sineWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (0.5f + 0.5f * arm_sin_f32(angle)));
 8001f24:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f28:	f011 ff36 	bl	8013d98 <arm_sin_f32>
 8001f2c:	eef0 7a40 	vmov.f32	s15, s0
 8001f30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f40:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002038 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 3a90 	vmov	r3, s15
 8001f50:	b29c      	uxth	r4, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3384      	adds	r3, #132	@ 0x84
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f8f0 	bl	8002140 <_ZNSt5arrayItLj128EEixEj>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4622      	mov	r2, r4
 8001f64:	801a      	strh	r2, [r3, #0]

        // Generate Square Wave
        squareWave[i] = (i < SAMPLE_COUNT / 2) ? MAX_AMPLITUDE : 0;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f6a:	dc02      	bgt.n	8001f72 <_ZN13FuncGenerator17generateWaveformsEv+0x7a>
 8001f6c:	f640 74ff 	movw	r4, #4095	@ 0xfff
 8001f70:	e000      	b.n	8001f74 <_ZN13FuncGenerator17generateWaveformsEv+0x7c>
 8001f72:	2400      	movs	r4, #0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f8de 	bl	8002140 <_ZNSt5arrayItLj128EEixEj>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4622      	mov	r2, r4
 8001f88:	801a      	strh	r2, [r3, #0]

        // Generate Triangle Wave
        triangleWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * fabs((2.0f * i / SAMPLE_COUNT) - 1.0f));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f98:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002034 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8001f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	f7ff ff74 	bl	8001e98 <_ZSt4fabsf>
 8001fb0:	eef0 7a40 	vmov.f32	s15, s0
 8001fb4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002038 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc0:	ee17 3a90 	vmov	r3, s15
 8001fc4:	b29c      	uxth	r4, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f8b5 	bl	8002140 <_ZNSt5arrayItLj128EEixEj>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4622      	mov	r2, r4
 8001fda:	801a      	strh	r2, [r3, #0]

        // Generate Sawtooth Wave
        sawtoothWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (i / static_cast<float>(SAMPLE_COUNT)));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002034 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8001fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fee:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002038 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8001ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffa:	ee17 3a90 	vmov	r3, s15
 8001ffe:	b29c      	uxth	r4, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f898 	bl	8002140 <_ZNSt5arrayItLj128EEixEj>
 8002010:	4603      	mov	r3, r0
 8002012:	4622      	mov	r2, r4
 8002014:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002020:	f77f af71 	ble.w	8001f06 <_ZN13FuncGenerator17generateWaveformsEv+0xe>
    }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	40c90fdb 	.word	0x40c90fdb
 8002034:	43000000 	.word	0x43000000
 8002038:	457ff000 	.word	0x457ff000

0800203c <_ZN13FuncGenerator12setFrequencyEm>:

void FuncGenerator::setFrequency(uint32_t frequency) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    //uint32_t timerPeriod = HAL_RCC_GetPCLK1Freq() / (frequency * SAMPLE_COUNT);
    //__HAL_TIM_SET_AUTORELOAD(&_htim, timerPeriod);
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_ZN13FuncGenerator12setAmplitudeEf>:

void FuncGenerator::setAmplitude(float amplitude) {
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	ed87 0a00 	vstr	s0, [r7]
    updateWaveform(sineWave.data(), amplitude);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3384      	adds	r3, #132	@ 0x84
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	ed97 0a00 	vldr	s0, [r7]
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f825 	bl	80020bc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(squareWave.data(), amplitude);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	ed97 0a00 	vldr	s0, [r7]
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f81a 	bl	80020bc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(triangleWave.data(), amplitude);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	ed97 0a00 	vldr	s0, [r7]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f80f 	bl	80020bc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(sawtoothWave.data(), amplitude);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	ed97 0a00 	vldr	s0, [r7]
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f804 	bl	80020bc <_ZN13FuncGenerator14updateWaveformEPtf>
}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN13FuncGenerator14updateWaveformEPtf>:

void FuncGenerator::updateWaveform(uint16_t* waveform, float amplitude) {
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e021      	b.n	8002114 <_ZN13FuncGenerator14updateWaveformEPtf+0x58>
        waveform[i] = static_cast<uint16_t>(MAX_AMPLITUDE * amplitude * waveform[i] / MAX_AMPLITUDE);
 80020d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002128 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 80020d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002128 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 80020f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002106:	ee17 2a90 	vmov	r2, s15
 800210a:	b292      	uxth	r2, r2
 800210c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b7f      	cmp	r3, #127	@ 0x7f
 8002118:	ddda      	ble.n	80020d0 <_ZN13FuncGenerator14updateWaveformEPtf+0x14>
    }
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	457ff000 	.word	0x457ff000

0800212c <_ZN13FuncGenerator19startWaveformOutputEv>:
            activeWaveform = sawtoothWave.data();
            break;
    }
}

void FuncGenerator::startWaveformOutput() {
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    //_bsp.dacStart_DMA(&_hdac, DAC_CHANNEL_1, reinterpret_cast<uint32_t*>(activeWaveform), SAMPLE_COUNT, DAC_ALIGN_12B_R);
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZNSt5arrayItLj128EEixEj>:
      operator[](size_type __n) noexcept
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
      }
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_ZN3LcdC1ER3Bsph>:
 */

#include "Lcd.hpp"


Lcd::Lcd(Bsp& bsp, uint8_t address) : _bsp(bsp), _address(address) {}
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	711a      	strb	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_ZN3Lcd11sendCommandEh>:

void Lcd::sendCommand(uint8_t cmd) {
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = cmd & 0xF0;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (cmd << 4) & 0xF0;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_COMMAND,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
        lowerNibble | LCD_RS_COMMAND
    };
 80021a8:	723b      	strb	r3, [r7, #8]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	b2db      	uxtb	r3, r3
    };
 80021b6:	72bb      	strb	r3, [r7, #10]
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_ZN3Lcd8sendDataEh>:

void Lcd::sendData(uint8_t data) {
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = data & 0xF0;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f023 030f 	bic.w	r3, r3, #15
 80021da:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (data << 4) & 0xF0;
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	f043 0305 	orr.w	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_DATA,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
        lowerNibble | LCD_RS_DATA
    };
 80021ea:	723b      	strb	r3, [r7, #8]
        upperNibble | LCD_RS_DATA,
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
    };
 80021f4:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	f043 0305 	orr.w	r3, r3, #5
 80021fc:	b2db      	uxtb	r3, r3
    };
 80021fe:	72bb      	strb	r3, [r7, #10]
        lowerNibble | LCD_RS_DATA
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
    };
 8002208:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_ZN3Lcd4initEv>:

void Lcd::init() {
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
    _bsp.delay(50);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2132      	movs	r1, #50	@ 0x32
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fdf4 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 800222a:	2130      	movs	r1, #48	@ 0x30
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffaa 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(5);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2105      	movs	r1, #5
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdea 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 800223e:	2130      	movs	r1, #48	@ 0x30
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ffa0 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fde0 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 8002252:	2130      	movs	r1, #48	@ 0x30
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff96 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	210a      	movs	r1, #10
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fdd6 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x20);
 8002266:	2120      	movs	r1, #32
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff8c 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	210a      	movs	r1, #10
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fdcc 	bl	8001e12 <_ZN3Bsp5delayEm>

    sendCommand(LCD_CMD_FUNCTION_SET);
 800227a:	2128      	movs	r1, #40	@ 0x28
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff82 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_OFF);
 8002282:	2108      	movs	r1, #8
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff7e 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_CLEAR_DISPLAY);
 800228a:	2101      	movs	r1, #1
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff7a 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(2);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fdba 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(LCD_CMD_ENTRY_MODE_SET);
 800229e:	2106      	movs	r1, #6
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff70 	bl	8002186 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_ON);
 80022a6:	210c      	movs	r1, #12
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff6c 	bl	8002186 <_ZN3Lcd11sendCommandEh>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_ZN3Lcd10sendStringEPKc>:
        default: return;
    }
    sendCommand(address);
}

void Lcd::sendString(const char* str) {
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
    while (*str) sendData(*str++);
 80022c0:	e007      	b.n	80022d2 <_ZN3Lcd10sendStringEPKc+0x1c>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	603a      	str	r2, [r7, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff7b 	bl	80021c8 <_ZN3Lcd8sendDataEh>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f3      	bne.n	80022c2 <_ZN3Lcd10sendStringEPKc+0xc>
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <MainCpp>:
Dac exDac(bsp);
#endif


__attribute__((noreturn)) void MainCpp()
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
	bool interface{false};
 80022ea:	2300      	movs	r3, #0
 80022ec:	77fb      	strb	r3, [r7, #31]
	do
	{
		Status status = connection.interfaceHandshake(Major_Version, Minor_Version);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2101      	movs	r1, #1
 80022f2:	4827      	ldr	r0, [pc, #156]	@ (8002390 <MainCpp+0xac>)
 80022f4:	f000 f8b0 	bl	8002458 <_ZN9SerialCtn18interfaceHandshakeEhh>
 80022f8:	4603      	mov	r3, r0
 80022fa:	77bb      	strb	r3, [r7, #30]
		if (status == Status::OK) {
 80022fc:	7fbb      	ldrb	r3, [r7, #30]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <MainCpp+0x22>
			interface = true;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]
		}
		bsp.delay(1000);
 8002306:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800230a:	4822      	ldr	r0, [pc, #136]	@ (8002394 <MainCpp+0xb0>)
 800230c:	f7ff fd81 	bl	8001e12 <_ZN3Bsp5delayEm>

	} while (!interface);
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e8      	bne.n	80022ee <MainCpp+0xa>

	ReceivedData data = connection.processReceivedData();
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	491b      	ldr	r1, [pc, #108]	@ (8002390 <MainCpp+0xac>)
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f90e 	bl	8002544 <_ZN9SerialCtn19processReceivedDataEv>
	lcd.init();
 8002328:	481b      	ldr	r0, [pc, #108]	@ (8002398 <MainCpp+0xb4>)
 800232a:	f7ff ff74 	bl	8002216 <_ZN3Lcd4initEv>
	lcd.sendString("LCD Online");
 800232e:	491b      	ldr	r1, [pc, #108]	@ (800239c <MainCpp+0xb8>)
 8002330:	4819      	ldr	r0, [pc, #100]	@ (8002398 <MainCpp+0xb4>)
 8002332:	f7ff ffc0 	bl	80022b6 <_ZN3Lcd10sendStringEPKc>


	while(true)
	{
		if(usbReceivedFlag)
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <MainCpp+0xbc>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <MainCpp+0x9e>
		{
			data = connection.processReceivedData();
 8002340:	463b      	mov	r3, r7
 8002342:	4913      	ldr	r1, [pc, #76]	@ (8002390 <MainCpp+0xac>)
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f8fd 	bl	8002544 <_ZN9SerialCtn19processReceivedDataEv>
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	463c      	mov	r4, r7
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	6861      	ldr	r1, [r4, #4]
 8002354:	68a2      	ldr	r2, [r4, #8]
 8002356:	c307      	stmia	r3!, {r0, r1, r2}
 8002358:	89a2      	ldrh	r2, [r4, #12]
 800235a:	801a      	strh	r2, [r3, #0]
			generate.setAmplitude(data.amplitude);
 800235c:	f8d7 3015 	ldr.w	r3, [r7, #21]
 8002360:	ee00 3a10 	vmov	s0, r3
 8002364:	480f      	ldr	r0, [pc, #60]	@ (80023a4 <MainCpp+0xc0>)
 8002366:	f7ff fe74 	bl	8002052 <_ZN13FuncGenerator12setAmplitudeEf>
			generate.setFrequency(data.frequency);
 800236a:	f8d7 3011 	ldr.w	r3, [r7, #17]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002376:	ee17 1a90 	vmov	r1, s15
 800237a:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <MainCpp+0xc0>)
 800237c:	f7ff fe5e 	bl	800203c <_ZN13FuncGenerator12setFrequencyEm>
 8002380:	e7d9      	b.n	8002336 <MainCpp+0x52>
		}
		else
		{
			generate.startWaveformOutput();
 8002382:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <MainCpp+0xc0>)
 8002384:	f7ff fed2 	bl	800212c <_ZN13FuncGenerator19startWaveformOutputEv>
			analyze.startAnalysing();
 8002388:	4807      	ldr	r0, [pc, #28]	@ (80023a8 <MainCpp+0xc4>)
 800238a:	f7ff fd7b 	bl	8001e84 <_ZN12FuncAnalyser14startAnalysingEv>
		if(usbReceivedFlag)
 800238e:	e7d2      	b.n	8002336 <MainCpp+0x52>
 8002390:	24002d0c 	.word	0x24002d0c
 8002394:	24000870 	.word	0x24000870
 8002398:	24002d04 	.word	0x24002d04
 800239c:	080147a0 	.word	0x080147a0
 80023a0:	2400300c 	.word	0x2400300c
 80023a4:	24002878 	.word	0x24002878
 80023a8:	24000874 	.word	0x24000874

080023ac <_Z41__static_initialization_and_destruction_0v>:
		}
	}
}
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
FuncAnalyser analyze(bsp);
 80023b0:	490d      	ldr	r1, [pc, #52]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023b2:	480e      	ldr	r0, [pc, #56]	@ (80023ec <_Z41__static_initialization_and_destruction_0v+0x40>)
 80023b4:	f7ff fd57 	bl	8001e66 <_ZN12FuncAnalyserC1ER3Bsp>
FuncGenerator generate(bsp);
 80023b8:	490b      	ldr	r1, [pc, #44]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023ba:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <_Z41__static_initialization_and_destruction_0v+0x44>)
 80023bc:	f7ff fd7c 	bl	8001eb8 <_ZN13FuncGeneratorC1ER3Bsp>
Lcd lcd(bsp, SLAVE_ADDRESS);
 80023c0:	224e      	movs	r2, #78	@ 0x4e
 80023c2:	4909      	ldr	r1, [pc, #36]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023c4:	480b      	ldr	r0, [pc, #44]	@ (80023f4 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80023c6:	f7ff feca 	bl	800215e <_ZN3LcdC1ER3Bsph>
SerialCtn connection(bsp);
 80023ca:	4907      	ldr	r1, [pc, #28]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023cc:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 80023ce:	f000 f826 	bl	800241e <_ZN9SerialCtnC1ER3Bsp>
AnalyzerExt exAnalyze(bsp);
 80023d2:	4905      	ldr	r1, [pc, #20]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023d4:	4809      	ldr	r0, [pc, #36]	@ (80023fc <_Z41__static_initialization_and_destruction_0v+0x50>)
 80023d6:	f7ff fd28 	bl	8001e2a <_ZN11AnalyzerExtC1ER3Bsp>
Dac exDac(bsp);
 80023da:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80023dc:	4808      	ldr	r0, [pc, #32]	@ (8002400 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80023de:	f7ff fd33 	bl	8001e48 <_ZN3DacC1ER3Bsp>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	24000870 	.word	0x24000870
 80023ec:	24000874 	.word	0x24000874
 80023f0:	24002878 	.word	0x24002878
 80023f4:	24002d04 	.word	0x24002d04
 80023f8:	24002d0c 	.word	0x24002d0c
 80023fc:	24002d10 	.word	0x24002d10
 8002400:	24002d14 	.word	0x24002d14

08002404 <_GLOBAL__sub_I_bsp>:
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
 8002408:	f7ff ffd0 	bl	80023ac <_Z41__static_initialization_and_destruction_0v>
 800240c:	bd80      	pop	{r7, pc}

0800240e <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8002412:	2300      	movs	r3, #0
#endif
  }
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_ZN9SerialCtnC1ER3Bsp>:
#include <algorithm>


uint8_t UsbRxDataBuffer[USB_RX_BUFF_SIZE];

SerialCtn::SerialCtn(Bsp& bsp): _bsp(bsp){}
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_ZNSt5arrayIhLj15EEixEj>:
      operator[](size_type __n) noexcept
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4413      	add	r3, r2
      }
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZN9SerialCtn18interfaceHandshakeEhh>:

Status SerialCtn::interfaceHandshake(uint8_t major, uint8_t minor)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b08f      	sub	sp, #60	@ 0x3c
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
 8002464:	4613      	mov	r3, r2
 8002466:	70bb      	strb	r3, [r7, #2]
	char versionStr[18];
	snprintf(versionStr, sizeof(versionStr), "Version: %d.%d", major, minor);
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	78bb      	ldrb	r3, [r7, #2]
 800246c:	f107 001c 	add.w	r0, r7, #28
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <_ZN9SerialCtn18interfaceHandshakeEhh+0xa4>)
 8002476:	2112      	movs	r1, #18
 8002478:	f011 fcd2 	bl	8013e20 <sniprintf>
	_bsp.usbTransmit(reinterpret_cast<uint8_t*>(versionStr), strlen(versionStr));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681c      	ldr	r4, [r3, #0]
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ff43 	bl	8000310 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	b29a      	uxth	r2, r3
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4620      	mov	r0, r4
 8002496:	f7ff fca4 	bl	8001de2 <_ZN3Bsp11usbTransmitEPht>


	UsbArray dataReceived = receiveData();
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f82d 	bl	8002500 <_ZN9SerialCtn11receiveDataEv>

	if(dataReceived[0] != 0xFF && dataReceived[1] != 0xAA && dataReceived[2] != 0xFF)
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ffc5 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80024b2:	4603      	mov	r3, r0
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2bff      	cmp	r3, #255	@ 0xff
 80024b8:	d015      	beq.n	80024e6 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2101      	movs	r1, #1
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ffbb 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80024c6:	4603      	mov	r3, r0
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2baa      	cmp	r3, #170	@ 0xaa
 80024cc:	d00b      	beq.n	80024e6 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	2102      	movs	r1, #2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ffb1 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80024da:	4603      	mov	r3, r0
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d001      	beq.n	80024e6 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <_ZN9SerialCtn18interfaceHandshakeEhh+0x90>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <_ZN9SerialCtn18interfaceHandshakeEhh+0x98>
		return Status::ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <_ZN9SerialCtn18interfaceHandshakeEhh+0x9a>

	return Status::OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3734      	adds	r7, #52	@ 0x34
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	080147ac 	.word	0x080147ac

08002500 <_ZN9SerialCtn11receiveDataEv>:

UsbArray SerialCtn::receiveData()
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	// C array into C++ array!
	UsbArray dataReceived = {};
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	461a      	mov	r2, r3
 800250e:	2300      	movs	r3, #0
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	6053      	str	r3, [r2, #4]
 8002514:	6093      	str	r3, [r2, #8]
 8002516:	f8c2 300b 	str.w	r3, [r2, #11]
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }
 800251a:	4c08      	ldr	r4, [pc, #32]	@ (800253c <_ZN9SerialCtn11receiveDataEv+0x3c>)
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
 800251c:	4d08      	ldr	r5, [pc, #32]	@ (8002540 <_ZN9SerialCtn11receiveDataEv+0x40>)
	std::copy(std::begin(UsbRxDataBuffer), std::end(UsbRxDataBuffer), dataReceived.begin());
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8e8 	bl	80026f4 <_ZNSt5arrayIhLj15EE5beginEv>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4629      	mov	r1, r5
 800252a:	4620      	mov	r0, r4
 800252c:	f000 f8ef 	bl	800270e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	return dataReceived;
 8002530:	bf00      	nop
}
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	bf00      	nop
 800253c:	24002d18 	.word	0x24002d18
 8002540:	24002d27 	.word	0x24002d27

08002544 <_ZN9SerialCtn19processReceivedDataEv>:

ReceivedData SerialCtn::processReceivedData()
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08b      	sub	sp, #44	@ 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	ReceivedData data = {};
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	819a      	strh	r2, [r3, #12]
	UsbArray dataReceived = receiveData();
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffcc 	bl	8002500 <_ZN9SerialCtn11receiveDataEv>

	// Oscilloscope
	if(dataReceived[0] != 0x00 && dataReceived[3] != 0x00 && dataReceived[6] != 0x00 && dataReceived[9] != 0x00 && dataReceived[13] != 0x00)
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff64 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 8002574:	4603      	mov	r3, r0
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d029      	beq.n	80025d0 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	2103      	movs	r1, #3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff5a 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 8002588:	4603      	mov	r3, r0
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01f      	beq.n	80025d0 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	2106      	movs	r1, #6
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff50 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 800259c:	4603      	mov	r3, r0
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2109      	movs	r1, #9
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff46 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80025b0:	4603      	mov	r3, r0
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	210d      	movs	r1, #13
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff3c 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80025c4:	4603      	mov	r3, r0
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <_ZN9SerialCtn19processReceivedDataEv+0x8e>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <_ZN9SerialCtn19processReceivedDataEv+0xae>
	{
		data.stop = true;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		return data;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	461c      	mov	r4, r3
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025e6:	6020      	str	r0, [r4, #0]
 80025e8:	6061      	str	r1, [r4, #4]
 80025ea:	60a2      	str	r2, [r4, #8]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	e079      	b.n	80026e6 <_ZN9SerialCtn19processReceivedDataEv+0x1a2>
	}
	// Func generator
	else if (dataReceived[0] != 0x01 || dataReceived[0] != 0x02 || dataReceived[0] != 0x03 || dataReceived[0] != 0x04 || dataReceived[0] != 0x05)
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff1f 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80025fe:	4603      	mov	r3, r0
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d127      	bne.n	8002656 <_ZN9SerialCtn19processReceivedDataEv+0x112>
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff15 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 8002612:	4603      	mov	r3, r0
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d11d      	bne.n	8002656 <_ZN9SerialCtn19processReceivedDataEv+0x112>
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff0b 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 8002626:	4603      	mov	r3, r0
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d113      	bne.n	8002656 <_ZN9SerialCtn19processReceivedDataEv+0x112>
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff01 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 800263a:	4603      	mov	r3, r0
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d109      	bne.n	8002656 <_ZN9SerialCtn19processReceivedDataEv+0x112>
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fef7 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 800264e:	4603      	mov	r3, r0
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d001      	beq.n	800265a <_ZN9SerialCtn19processReceivedDataEv+0x116>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <_ZN9SerialCtn19processReceivedDataEv+0x118>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <_ZN9SerialCtn19processReceivedDataEv+0x13a>
	{
		_bsp.usbTransmit((uint8_t*)"Invalid data\n", 15);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	220f      	movs	r2, #15
 8002666:	4922      	ldr	r1, [pc, #136]	@ (80026f0 <_ZN9SerialCtn19processReceivedDataEv+0x1ac>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fbba 	bl	8001de2 <_ZN3Bsp11usbTransmitEPht>
		return {};
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	461a      	mov	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	6053      	str	r3, [r2, #4]
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	8193      	strh	r3, [r2, #12]
 800267c:	e033      	b.n	80026e6 <_ZN9SerialCtn19processReceivedDataEv+0x1a2>
	}
	else
	{
		data.type = dataReceived[0];
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fed9 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 800268a:	4603      	mov	r3, r0
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	763b      	strb	r3, [r7, #24]
		std::memcpy(&data.frequency, &dataReceived[1], sizeof(float));
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fed0 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 800269c:	4603      	mov	r3, r0
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8c7 3019 	str.w	r3, [r7, #25]
		std::memcpy(&data.amplitude, &dataReceived[5], sizeof(float));
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	2105      	movs	r1, #5
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fec6 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80026b0:	4603      	mov	r3, r0
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8c7 301d 	str.w	r3, [r7, #29]
		std::memcpy(&data.offset, &dataReceived[9], sizeof(float));
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2109      	movs	r1, #9
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff febc 	bl	800243c <_ZNSt5arrayIhLj15EEixEj>
 80026c4:	4603      	mov	r3, r0
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
		data.stop = false;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	return data;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	461c      	mov	r4, r3
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026dc:	6020      	str	r0, [r4, #0]
 80026de:	6061      	str	r1, [r4, #4]
 80026e0:	60a2      	str	r2, [r4, #8]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	81a3      	strh	r3, [r4, #12]
}
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	372c      	adds	r7, #44	@ 0x2c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	080147bc 	.word	0x080147bc

080026f4 <_ZNSt5arrayIhLj15EE5beginEv>:
      begin() noexcept
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8002700:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800270e:	b590      	push	{r4, r7, lr}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f80f 	bl	800273e <_ZSt12__miter_baseIPhET_S1_>
 8002720:	4604      	mov	r4, r0
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f000 f80b 	bl	800273e <_ZSt12__miter_baseIPhET_S1_>
 8002728:	4603      	mov	r3, r0
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f810 	bl	8002754 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002734:	4603      	mov	r3, r0
    }
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}

0800273e <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f81a 	bl	800279a <_ZSt12__niter_baseIPhET_S1_>
 8002766:	4604      	mov	r4, r0
 8002768:	68b8      	ldr	r0, [r7, #8]
 800276a:	f000 f816 	bl	800279a <_ZSt12__niter_baseIPhET_S1_>
 800276e:	4605      	mov	r5, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f811 	bl	800279a <_ZSt12__niter_baseIPhET_S1_>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	4629      	mov	r1, r5
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f816 	bl	80027b0 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002784:	4602      	mov	r2, r0
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f820 	bl	80027d0 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002790:	4603      	mov	r3, r0
    }
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bdb0      	pop	{r4, r5, r7, pc}

0800279a <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f811 	bl	80027e8 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
    { return __res; }
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80027f4:	f7ff fe0b 	bl	800240e <_ZSt21is_constant_evaluatedv>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f80d 	bl	8002822 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>
 8002808:	4603      	mov	r3, r0
 800280a:	e006      	b.n	800281a <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f828 	bl	8002866 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 8002816:	4603      	mov	r3, r0
 8002818:	bf00      	nop
    }
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002822:	b480      	push	{r7}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00c      	b.n	8002852 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3301      	adds	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3301      	adds	r3, #1
 800284a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3b01      	subs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dcef      	bgt.n	8002838 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8002858:	687b      	ldr	r3, [r7, #4]
	}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b01      	cmp	r3, #1
 800287e:	bfcc      	ite	gt
 8002880:	2301      	movgt	r3, #1
 8002882:	2300      	movle	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	461a      	mov	r2, r3
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f011 fafb 	bl	8013e8c <memmove>
 8002896:	e006      	b.n	80028a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d103      	bne.n	80028a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f807 	bl	80028b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
	}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028da:	2003      	movs	r0, #3
 80028dc:	f002 f874 	bl	80049c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028e0:	f007 f85a 	bl	8009998 <HAL_RCC_GetSysClockFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_Init+0x68>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	4913      	ldr	r1, [pc, #76]	@ (8002940 <HAL_Init+0x6c>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
 80028fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_Init+0x68>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <HAL_Init+0x6c>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	4a0b      	ldr	r2, [pc, #44]	@ (8002944 <HAL_Init+0x70>)
 8002916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_Init+0x74>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291e:	2000      	movs	r0, #0
 8002920:	f000 f814 	bl	800294c <HAL_InitTick>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e002      	b.n	8002934 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800292e:	f7fe fda7 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	08014814 	.word	0x08014814
 8002944:	24000004 	.word	0x24000004
 8002948:	24000000 	.word	0x24000000

0800294c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_InitTick+0x60>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e021      	b.n	80029a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002960:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <HAL_InitTick+0x64>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_InitTick+0x60>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f002 f859 	bl	8004a2e <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f002 f823 	bl	80049de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <HAL_InitTick+0x68>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	2400000c 	.word	0x2400000c
 80029b0:	24000000 	.word	0x24000000
 80029b4:	24000008 	.word	0x24000008

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2400000c 	.word	0x2400000c
 80029dc:	24002d28 	.word	0x24002d28

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	24002d28 	.word	0x24002d28

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2400000c 	.word	0x2400000c

08002a40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <LL_ADC_SetChannelPreselection+0x70>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d027      	beq.n	8002b0a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <LL_ADC_SetChannelPreselection+0x2c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2201      	movs	r2, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	e015      	b.n	8002b00 <LL_ADC_SetChannelPreselection+0x58>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2201      	movs	r2, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	69d2      	ldr	r2, [r2, #28]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	58026000 	.word	0x58026000

08002b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3360      	adds	r3, #96	@ 0x60
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <LL_ADC_SetOffset+0x60>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10b      	bne.n	8002b58 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b56:	e00b      	b.n	8002b70 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	58026000 	.word	0x58026000

08002b80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3360      	adds	r3, #96	@ 0x60
 8002b8e:	461a      	mov	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3360      	adds	r3, #96	@ 0x60
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
  }
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	58026000 	.word	0x58026000

08002c24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10e      	bne.n	8002c56 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3360      	adds	r3, #96	@ 0x60
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	58026000 	.word	0x58026000

08002c68 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <LL_ADC_SetOffsetSign+0x40>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10e      	bne.n	8002c9a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3360      	adds	r3, #96	@ 0x60
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	58026000 	.word	0x58026000

08002cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3360      	adds	r3, #96	@ 0x60
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002cfc <LL_ADC_SetOffsetState+0x50>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002cde:	e007      	b.n	8002cf0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58026000 	.word	0x58026000

08002d00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3330      	adds	r3, #48	@ 0x30
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	211f      	movs	r1, #31
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	f003 011f 	and.w	r1, r3, #31
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3314      	adds	r3, #20
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	0e5b      	lsrs	r3, r3, #25
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	0d1b      	lsrs	r3, r3, #20
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2107      	movs	r1, #7
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	401a      	ands	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	431a      	orrs	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e74 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d115      	bne.n	8002e3c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0318 	and.w	r3, r3, #24
 8002e26:	4914      	ldr	r1, [pc, #80]	@ (8002e78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e28:	40d9      	lsrs	r1, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e3a:	e014      	b.n	8002e66 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0318 	and.w	r3, r3, #24
 8002e52:	4909      	ldr	r1, [pc, #36]	@ (8002e78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e54:	40d9      	lsrs	r1, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	400b      	ands	r3, r1
 8002e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	58026000 	.word	0x58026000
 8002e78:	000fffff 	.word	0x000fffff

08002e7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 031f 	and.w	r3, r3, #31
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6093      	str	r3, [r2, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	5fffffc0 	.word	0x5fffffc0

08002ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	6fffffc0 	.word	0x6fffffc0

08002f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <LL_ADC_IsEnabled+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_ADC_IsEnabled+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d101      	bne.n	8002fb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b089      	sub	sp, #36	@ 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1ee      	b.n	80033bc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7fd fbf7 	bl	80007e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff67 	bl	8002ed8 <LL_ADC_IsDeepPowerDownEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff4d 	bl	8002eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff82 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d114      	bne.n	8003054 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ff66 	bl	8002f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003034:	4b8e      	ldr	r3, [pc, #568]	@ (8003270 <HAL_ADC_Init+0x2ac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	4a8e      	ldr	r2, [pc, #568]	@ (8003274 <HAL_ADC_Init+0x2b0>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003046:	e002      	b.n	800304e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	3b01      	subs	r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f9      	bne.n	8003048 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff65 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff76 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 800308a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 8188 	bne.w	80033aa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 8184 	bne.w	80033aa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff4a 	bl	8002f50 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d136      	bne.n	8003130 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003278 <HAL_ADC_Init+0x2b4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x112>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6a      	ldr	r2, [pc, #424]	@ (800327c <HAL_ADC_Init+0x2b8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10e      	bne.n	80030f4 <HAL_ADC_Init+0x130>
 80030d6:	4868      	ldr	r0, [pc, #416]	@ (8003278 <HAL_ADC_Init+0x2b4>)
 80030d8:	f7ff ff3a 	bl	8002f50 <LL_ADC_IsEnabled>
 80030dc:	4604      	mov	r4, r0
 80030de:	4867      	ldr	r0, [pc, #412]	@ (800327c <HAL_ADC_Init+0x2b8>)
 80030e0:	f7ff ff36 	bl	8002f50 <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4323      	orrs	r3, r4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e008      	b.n	8003106 <HAL_ADC_Init+0x142>
 80030f4:	4862      	ldr	r0, [pc, #392]	@ (8003280 <HAL_ADC_Init+0x2bc>)
 80030f6:	f7ff ff2b 	bl	8002f50 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5a      	ldr	r2, [pc, #360]	@ (8003278 <HAL_ADC_Init+0x2b4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x15a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_ADC_Init+0x2b8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Init+0x15e>
 800311e:	4a59      	ldr	r2, [pc, #356]	@ (8003284 <HAL_ADC_Init+0x2c0>)
 8003120:	e000      	b.n	8003124 <HAL_ADC_Init+0x160>
 8003122:	4a59      	ldr	r2, [pc, #356]	@ (8003288 <HAL_ADC_Init+0x2c4>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7ff fc88 	bl	8002a40 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_ADC_Init+0x2bc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d129      	bne.n	800318e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7e5b      	ldrb	r3, [r3, #25]
 800313e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003144:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800314a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d013      	beq.n	800317c <HAL_ADC_Init+0x1b8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d00d      	beq.n	8003178 <HAL_ADC_Init+0x1b4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b1c      	cmp	r3, #28
 8003162:	d007      	beq.n	8003174 <HAL_ADC_Init+0x1b0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b18      	cmp	r3, #24
 800316a:	d101      	bne.n	8003170 <HAL_ADC_Init+0x1ac>
 800316c:	2318      	movs	r3, #24
 800316e:	e006      	b.n	800317e <HAL_ADC_Init+0x1ba>
 8003170:	2300      	movs	r3, #0
 8003172:	e004      	b.n	800317e <HAL_ADC_Init+0x1ba>
 8003174:	2310      	movs	r3, #16
 8003176:	e002      	b.n	800317e <HAL_ADC_Init+0x1ba>
 8003178:	2308      	movs	r3, #8
 800317a:	e000      	b.n	800317e <HAL_ADC_Init+0x1ba>
 800317c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800317e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003186:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e00e      	b.n	80031ac <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7e5b      	ldrb	r3, [r3, #25]
 8003192:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003198:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800319e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	3b01      	subs	r3, #1
 80031bc:	045b      	lsls	r3, r3, #17
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <HAL_ADC_Init+0x2bc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d115      	bne.n	8003216 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4b26      	ldr	r3, [pc, #152]	@ (800328c <HAL_ADC_Init+0x2c8>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	430b      	orrs	r3, r1
 80031fc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	e009      	b.n	800322a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <HAL_ADC_Init+0x2cc>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	69b9      	ldr	r1, [r7, #24]
 8003226:	430b      	orrs	r3, r1
 8003228:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fea1 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003234:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff feae 	bl	8002f9c <LL_ADC_INJ_IsConversionOngoing>
 8003240:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 808e 	bne.w	8003366 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 808a 	bne.w	8003366 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <HAL_ADC_Init+0x2bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d11b      	bne.n	8003294 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e1b      	ldrb	r3, [r3, #24]
 8003260:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003268:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e018      	b.n	80032a2 <HAL_ADC_Init+0x2de>
 8003270:	24000000 	.word	0x24000000
 8003274:	053e2d63 	.word	0x053e2d63
 8003278:	40022000 	.word	0x40022000
 800327c:	40022100 	.word	0x40022100
 8003280:	58026000 	.word	0x58026000
 8003284:	40022300 	.word	0x40022300
 8003288:	58026300 	.word	0x58026300
 800328c:	fff04007 	.word	0xfff04007
 8003290:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e1b      	ldrb	r3, [r3, #24]
 8003298:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	4b46      	ldr	r3, [pc, #280]	@ (80033c4 <HAL_ADC_Init+0x400>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	430b      	orrs	r3, r1
 80032b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d137      	bne.n	8003330 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3f      	ldr	r2, [pc, #252]	@ (80033c8 <HAL_ADC_Init+0x404>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d116      	bne.n	80032fe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <HAL_ADC_Init+0x408>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032ee:	430a      	orrs	r2, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	e020      	b.n	8003340 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b32      	ldr	r3, [pc, #200]	@ (80033d0 <HAL_ADC_Init+0x40c>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800330c:	3a01      	subs	r2, #1
 800330e:	0411      	lsls	r1, r2, #16
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003320:	430a      	orrs	r2, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e007      	b.n	8003340 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <HAL_ADC_Init+0x404>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d002      	beq.n	8003366 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 ff63 	bl	800422c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10c      	bne.n	8003388 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	f023 010f 	bic.w	r1, r3, #15
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
 8003386:	e007      	b.n	8003398 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020f 	bic.w	r2, r2, #15
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	f023 0303 	bic.w	r3, r3, #3
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a8:	e007      	b.n	80033ba <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3724      	adds	r7, #36	@ 0x24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd90      	pop	{r4, r7, pc}
 80033c4:	ffffbffc 	.word	0xffffbffc
 80033c8:	58026000 	.word	0x58026000
 80033cc:	fc00f81f 	.word	0xfc00f81f
 80033d0:	fc00f81e 	.word	0xfc00f81e

080033d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a87      	ldr	r2, [pc, #540]	@ (8003614 <HAL_ADC_IRQHandler+0x240>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_ADC_IRQHandler+0x30>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a86      	ldr	r2, [pc, #536]	@ (8003618 <HAL_ADC_IRQHandler+0x244>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_ADC_IRQHandler+0x34>
 8003404:	4b85      	ldr	r3, [pc, #532]	@ (800361c <HAL_ADC_IRQHandler+0x248>)
 8003406:	e000      	b.n	800340a <HAL_ADC_IRQHandler+0x36>
 8003408:	4b85      	ldr	r3, [pc, #532]	@ (8003620 <HAL_ADC_IRQHandler+0x24c>)
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fd36 	bl	8002e7c <LL_ADC_GetMultimode>
 8003410:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_ADC_IRQHandler+0x78>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f001 f830 	bl	80044a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2202      	movs	r2, #2
 800344a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_ADC_IRQHandler+0x8c>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8083 	beq.w	8003572 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07d      	beq.n	8003572 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fc34 	bl	8002d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d062      	beq.n	8003564 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003618 <HAL_ADC_IRQHandler+0x244>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d002      	beq.n	80034ae <HAL_ADC_IRQHandler+0xda>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_IRQHandler+0xdc>
 80034ae:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_ADC_IRQHandler+0x240>)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d008      	beq.n	80034ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d002      	beq.n	80034ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d104      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003618 <HAL_ADC_IRQHandler+0x244>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x110>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_IRQHandler+0x112>
 80034e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <HAL_ADC_IRQHandler+0x240>)
 80034e6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d135      	bne.n	8003564 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	d12e      	bne.n	8003564 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fd33 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11a      	bne.n	800354c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020c 	bic.w	r2, r2, #12
 8003524:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d112      	bne.n	8003564 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003542:	f043 0201 	orr.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	661a      	str	r2, [r3, #96]	@ 0x60
 800354a:	e00b      	b.n	8003564 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f96f 	bl	8003848 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	220c      	movs	r2, #12
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_ADC_IRQHandler+0x1b2>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a0 	beq.w	80036d2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 809a 	beq.w	80036d2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fbdf 	bl	8002d7e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035c0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fb9a 	bl	8002d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035cc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <HAL_ADC_IRQHandler+0x244>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d002      	beq.n	80035de <HAL_ADC_IRQHandler+0x20a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	e000      	b.n	80035e0 <HAL_ADC_IRQHandler+0x20c>
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <HAL_ADC_IRQHandler+0x240>)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d008      	beq.n	80035fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d002      	beq.n	80035fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b07      	cmp	r3, #7
 80035f8:	d104      	bne.n	8003604 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e014      	b.n	800362e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a03      	ldr	r2, [pc, #12]	@ (8003618 <HAL_ADC_IRQHandler+0x244>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00a      	beq.n	8003624 <HAL_ADC_IRQHandler+0x250>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e008      	b.n	8003626 <HAL_ADC_IRQHandler+0x252>
 8003614:	40022000 	.word	0x40022000
 8003618:	40022100 	.word	0x40022100
 800361c:	40022300 	.word	0x40022300
 8003620:	58026300 	.word	0x58026300
 8003624:	4b84      	ldr	r3, [pc, #528]	@ (8003838 <HAL_ADC_IRQHandler+0x464>)
 8003626:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d047      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_ADC_IRQHandler+0x27a>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03f      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13a      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b40      	cmp	r3, #64	@ 0x40
 800365a:	d133      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d12e      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc96 	bl	8002f9c <LL_ADC_INJ_IsConversionOngoing>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11a      	bne.n	80036ac <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003684:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d112      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80036aa:	e00b      	b.n	80036c4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fec5 	bl	8004454 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2260      	movs	r2, #96	@ 0x60
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_ADC_IRQHandler+0x32c>
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8b2 	bl	800385c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2280      	movs	r2, #128	@ 0x80
 80036fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d012      	beq.n	8003730 <HAL_ADC_IRQHandler+0x35c>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 feab 	bl	800447c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <HAL_ADC_IRQHandler+0x38c>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003748:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fe9d 	bl	8004490 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d043      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x41e>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03e      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800377c:	2301      	movs	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003780:	e021      	b.n	80037c6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <HAL_ADC_IRQHandler+0x464>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_ADC_IRQHandler+0x3c8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a29      	ldr	r2, [pc, #164]	@ (800383c <HAL_ADC_IRQHandler+0x468>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x3cc>
 800379c:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <HAL_ADC_IRQHandler+0x46c>)
 800379e:	e000      	b.n	80037a2 <HAL_ADC_IRQHandler+0x3ce>
 80037a0:	4b28      	ldr	r3, [pc, #160]	@ (8003844 <HAL_ADC_IRQHandler+0x470>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fb78 	bl	8002e98 <LL_ADC_GetMultiDMATransfer>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b2:	e008      	b.n	80037c6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037c2:	2301      	movs	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10e      	bne.n	80037ea <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037dc:	f043 0202 	orr.w	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f843 	bl	8003870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d018      	beq.n	800382e <HAL_ADC_IRQHandler+0x45a>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003816:	f043 0208 	orr.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003826:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fe1d 	bl	8004468 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800382e:	bf00      	nop
 8003830:	3728      	adds	r7, #40	@ 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40022000 	.word	0x40022000
 800383c:	40022100 	.word	0x40022100
 8003840:	40022300 	.word	0x40022300
 8003844:	58026300 	.word	0x58026300

08003848 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b0a5      	sub	sp, #148	@ 0x94
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800389e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4aa4      	ldr	r2, [pc, #656]	@ (8003b38 <HAL_ADC_ConfigChannel+0x2b4>)
 80038a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x34>
 80038b2:	2302      	movs	r3, #2
 80038b4:	f000 bca2 	b.w	80041fc <HAL_ADC_ConfigChannel+0x978>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fb56 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8486 	bne.w	80041de <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db31      	blt.n	800393e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a97      	ldr	r2, [pc, #604]	@ (8003b3c <HAL_ADC_ConfigChannel+0x2b8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d02c      	beq.n	800393e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7e>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	0e9b      	lsrs	r3, r3, #26
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2201      	movs	r2, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	e016      	b.n	8003930 <HAL_ADC_ConfigChannel+0xac>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003912:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800391a:	2320      	movs	r3, #32
 800391c:	e003      	b.n	8003926 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800391e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2201      	movs	r2, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	69d1      	ldr	r1, [r2, #28]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	430b      	orrs	r3, r1
 800393c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f7ff f9eb 	bl	8002d26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fb0e 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 800395a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fb1a 	bl	8002f9c <LL_ADC_INJ_IsConversionOngoing>
 8003968:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800396c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 824a 	bne.w	8003e0a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003976:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8245 	bne.w	8003e0a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	461a      	mov	r2, r3
 800398e:	f7ff fa09 	bl	8002da4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a69      	ldr	r2, [pc, #420]	@ (8003b3c <HAL_ADC_ConfigChannel+0x2b8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d10d      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039b6:	e032      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039b8:	4b61      	ldr	r3, [pc, #388]	@ (8003b40 <HAL_ADC_ConfigChannel+0x2bc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c4:	d10b      	bne.n	80039de <HAL_ADC_ConfigChannel+0x15a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	e01d      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x196>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x180>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	e00a      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x196>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d048      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6919      	ldr	r1, [r3, #16]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a36:	f7ff f871 	bl	8002b1c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b3c <HAL_ADC_ConfigChannel+0x2b8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d119      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6919      	ldr	r1, [r3, #16]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7ff f909 	bl	8002c68 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6919      	ldr	r1, [r3, #16]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x1ea>
 8003a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a6c:	e000      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x1ec>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	461a      	mov	r2, r3
 8003a72:	f7ff f8d7 	bl	8002c24 <LL_ADC_SetOffsetSaturation>
 8003a76:	e1c8      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6919      	ldr	r1, [r3, #16]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x20c>
 8003a8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x20e>
 8003a90:	2300      	movs	r3, #0
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7ff f8a4 	bl	8002be0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6919      	ldr	r1, [r3, #16]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	7e1b      	ldrb	r3, [r3, #24]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x22a>
 8003aa8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003aac:	e000      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x22c>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f7ff f87b 	bl	8002bac <LL_ADC_SetDataRightShift>
 8003ab6:	e1a8      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b3c <HAL_ADC_ConfigChannel+0x2b8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f040 815b 	bne.w	8003d7a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f858 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x26c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f84d 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	f003 021f 	and.w	r2, r3, #31
 8003aee:	e017      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x29c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f842 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e003      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x2c0>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	e017      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x2e4>
 8003b38:	47ff0000 	.word	0x47ff0000
 8003b3c:	58026000 	.word	0x58026000
 8003b40:	5c001000 	.word	0x5c001000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	e003      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d106      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff f899 	bl	8002cac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fffd 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x322>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fff2 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	0e9b      	lsrs	r3, r3, #26
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	e017      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x352>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe ffe7 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x36a>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	e011      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x38e>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f844 	bl	8002cac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe ffa8 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x3cc>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2102      	movs	r1, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe ff9d 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	e017      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x3fc>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe ff92 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e003      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x414>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e9b      	lsrs	r3, r3, #26
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	e011      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x438>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	e003      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d106      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe ffef 	bl	8002cac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2103      	movs	r1, #3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe ff53 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x476>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2103      	movs	r1, #3
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe ff48 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	e017      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x4a6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2103      	movs	r1, #3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe ff3d 	bl	8002b80 <LL_ADC_GetOffsetChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	61fb      	str	r3, [r7, #28]
  return result;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	e003      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x4be>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	e011      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x4e2>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	613b      	str	r3, [r7, #16]
  return result;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e003      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d14f      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2103      	movs	r1, #3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe ff9a 	bl	8002cac <LL_ADC_SetOffsetState>
 8003d78:	e047      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	069b      	lsls	r3, r3, #26
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d107      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d9c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	069b      	lsls	r3, r3, #26
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d107      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003dc0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d107      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003de4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	069b      	lsls	r3, r3, #26
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d107      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e08:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f89e 	bl	8002f50 <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 81ea 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f7fe ffe7 	bl	8002dfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4a7a      	ldr	r2, [pc, #488]	@ (800401c <HAL_ADC_ConfigChannel+0x798>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 80e0 	bne.w	8003ffa <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4977      	ldr	r1, [pc, #476]	@ (8004020 <HAL_ADC_ConfigChannel+0x79c>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d147      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x654>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4975      	ldr	r1, [pc, #468]	@ (8004024 <HAL_ADC_ConfigChannel+0x7a0>)
 8003e4e:	428b      	cmp	r3, r1
 8003e50:	d040      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x650>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4974      	ldr	r1, [pc, #464]	@ (8004028 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d039      	beq.n	8003ed0 <HAL_ADC_ConfigChannel+0x64c>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4972      	ldr	r1, [pc, #456]	@ (800402c <HAL_ADC_ConfigChannel+0x7a8>)
 8003e62:	428b      	cmp	r3, r1
 8003e64:	d032      	beq.n	8003ecc <HAL_ADC_ConfigChannel+0x648>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4971      	ldr	r1, [pc, #452]	@ (8004030 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	d02b      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x644>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	496f      	ldr	r1, [pc, #444]	@ (8004034 <HAL_ADC_ConfigChannel+0x7b0>)
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d024      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0x640>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	496e      	ldr	r1, [pc, #440]	@ (8004038 <HAL_ADC_ConfigChannel+0x7b4>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d01d      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x63c>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	496c      	ldr	r1, [pc, #432]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003e8a:	428b      	cmp	r3, r1
 8003e8c:	d016      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x638>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	496b      	ldr	r1, [pc, #428]	@ (8004040 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d00f      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x634>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4969      	ldr	r1, [pc, #420]	@ (8004044 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d008      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x630>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4968      	ldr	r1, [pc, #416]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x62c>
 8003eac:	4b67      	ldr	r3, [pc, #412]	@ (800404c <HAL_ADC_ConfigChannel+0x7c8>)
 8003eae:	e0a0      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e09e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003eb4:	4b66      	ldr	r3, [pc, #408]	@ (8004050 <HAL_ADC_ConfigChannel+0x7cc>)
 8003eb6:	e09c      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003eb8:	4b66      	ldr	r3, [pc, #408]	@ (8004054 <HAL_ADC_ConfigChannel+0x7d0>)
 8003eba:	e09a      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ebc:	4b60      	ldr	r3, [pc, #384]	@ (8004040 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ebe:	e098      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003ec2:	e096      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ec4:	4b64      	ldr	r3, [pc, #400]	@ (8004058 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ec6:	e094      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ec8:	4b64      	ldr	r3, [pc, #400]	@ (800405c <HAL_ADC_ConfigChannel+0x7d8>)
 8003eca:	e092      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ecc:	4b64      	ldr	r3, [pc, #400]	@ (8004060 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ece:	e090      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	@ (8004064 <HAL_ADC_ConfigChannel+0x7e0>)
 8003ed2:	e08e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e08c      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4962      	ldr	r1, [pc, #392]	@ (8004068 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ede:	428b      	cmp	r3, r1
 8003ee0:	d140      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x6e0>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	494f      	ldr	r1, [pc, #316]	@ (8004024 <HAL_ADC_ConfigChannel+0x7a0>)
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	d039      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x6dc>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	494d      	ldr	r1, [pc, #308]	@ (8004028 <HAL_ADC_ConfigChannel+0x7a4>)
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d032      	beq.n	8003f5c <HAL_ADC_ConfigChannel+0x6d8>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	494c      	ldr	r1, [pc, #304]	@ (800402c <HAL_ADC_ConfigChannel+0x7a8>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d02b      	beq.n	8003f58 <HAL_ADC_ConfigChannel+0x6d4>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	494a      	ldr	r1, [pc, #296]	@ (8004030 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f06:	428b      	cmp	r3, r1
 8003f08:	d024      	beq.n	8003f54 <HAL_ADC_ConfigChannel+0x6d0>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4949      	ldr	r1, [pc, #292]	@ (8004034 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d01d      	beq.n	8003f50 <HAL_ADC_ConfigChannel+0x6cc>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4947      	ldr	r1, [pc, #284]	@ (8004038 <HAL_ADC_ConfigChannel+0x7b4>)
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	d016      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x6c8>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4946      	ldr	r1, [pc, #280]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d00f      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0x6c4>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4944      	ldr	r1, [pc, #272]	@ (8004040 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f2e:	428b      	cmp	r3, r1
 8003f30:	d008      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x6c0>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4944      	ldr	r1, [pc, #272]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x6bc>
 8003f3c:	4b43      	ldr	r3, [pc, #268]	@ (800404c <HAL_ADC_ConfigChannel+0x7c8>)
 8003f3e:	e058      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	e056      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f44:	4b43      	ldr	r3, [pc, #268]	@ (8004054 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f46:	e054      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f48:	4b3d      	ldr	r3, [pc, #244]	@ (8004040 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f4a:	e052      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003f4e:	e050      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f50:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f52:	e04e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f54:	4b41      	ldr	r3, [pc, #260]	@ (800405c <HAL_ADC_ConfigChannel+0x7d8>)
 8003f56:	e04c      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f58:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f5a:	e04a      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f5c:	4b41      	ldr	r3, [pc, #260]	@ (8004064 <HAL_ADC_ConfigChannel+0x7e0>)
 8003f5e:	e048      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e046      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4940      	ldr	r1, [pc, #256]	@ (800406c <HAL_ADC_ConfigChannel+0x7e8>)
 8003f6a:	428b      	cmp	r3, r1
 8003f6c:	d140      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x76c>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	492c      	ldr	r1, [pc, #176]	@ (8004024 <HAL_ADC_ConfigChannel+0x7a0>)
 8003f74:	428b      	cmp	r3, r1
 8003f76:	d039      	beq.n	8003fec <HAL_ADC_ConfigChannel+0x768>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	492a      	ldr	r1, [pc, #168]	@ (8004028 <HAL_ADC_ConfigChannel+0x7a4>)
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d032      	beq.n	8003fe8 <HAL_ADC_ConfigChannel+0x764>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4929      	ldr	r1, [pc, #164]	@ (800402c <HAL_ADC_ConfigChannel+0x7a8>)
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	d02b      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0x760>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4927      	ldr	r1, [pc, #156]	@ (8004030 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f92:	428b      	cmp	r3, r1
 8003f94:	d024      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x75c>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4926      	ldr	r1, [pc, #152]	@ (8004034 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d01d      	beq.n	8003fdc <HAL_ADC_ConfigChannel+0x758>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4924      	ldr	r1, [pc, #144]	@ (8004038 <HAL_ADC_ConfigChannel+0x7b4>)
 8003fa6:	428b      	cmp	r3, r1
 8003fa8:	d016      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0x754>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4923      	ldr	r1, [pc, #140]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	d00f      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x750>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4926      	ldr	r1, [pc, #152]	@ (8004054 <HAL_ADC_ConfigChannel+0x7d0>)
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d008      	beq.n	8003fd0 <HAL_ADC_ConfigChannel+0x74c>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	492b      	ldr	r1, [pc, #172]	@ (8004070 <HAL_ADC_ConfigChannel+0x7ec>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x748>
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004074 <HAL_ADC_ConfigChannel+0x7f0>)
 8003fca:	e012      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e010      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fd0:	4b27      	ldr	r3, [pc, #156]	@ (8004070 <HAL_ADC_ConfigChannel+0x7ec>)
 8003fd2:	e00e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004040 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fd6:	e00c      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fd8:	4b18      	ldr	r3, [pc, #96]	@ (800403c <HAL_ADC_ConfigChannel+0x7b8>)
 8003fda:	e00a      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004058 <HAL_ADC_ConfigChannel+0x7d4>)
 8003fde:	e008      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800405c <HAL_ADC_ConfigChannel+0x7d8>)
 8003fe2:	e006      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8004060 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fe6:	e004      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fea:	e002      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x76e>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fd57 	bl	8002aa8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f280 80f6 	bge.w	80041f0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a05      	ldr	r2, [pc, #20]	@ (8004020 <HAL_ADC_ConfigChannel+0x79c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x794>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <HAL_ADC_ConfigChannel+0x7e4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d131      	bne.n	800407c <HAL_ADC_ConfigChannel+0x7f8>
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <HAL_ADC_ConfigChannel+0x7f4>)
 800401a:	e030      	b.n	800407e <HAL_ADC_ConfigChannel+0x7fa>
 800401c:	47ff0000 	.word	0x47ff0000
 8004020:	40022000 	.word	0x40022000
 8004024:	04300002 	.word	0x04300002
 8004028:	08600004 	.word	0x08600004
 800402c:	0c900008 	.word	0x0c900008
 8004030:	10c00010 	.word	0x10c00010
 8004034:	14f00020 	.word	0x14f00020
 8004038:	2a000400 	.word	0x2a000400
 800403c:	2e300800 	.word	0x2e300800
 8004040:	32601000 	.word	0x32601000
 8004044:	43210000 	.word	0x43210000
 8004048:	4b840000 	.word	0x4b840000
 800404c:	4fb80000 	.word	0x4fb80000
 8004050:	47520000 	.word	0x47520000
 8004054:	36902000 	.word	0x36902000
 8004058:	25b00200 	.word	0x25b00200
 800405c:	21800100 	.word	0x21800100
 8004060:	1d500080 	.word	0x1d500080
 8004064:	19200040 	.word	0x19200040
 8004068:	40022100 	.word	0x40022100
 800406c:	58026000 	.word	0x58026000
 8004070:	3ac04000 	.word	0x3ac04000
 8004074:	3ef08000 	.word	0x3ef08000
 8004078:	40022300 	.word	0x40022300
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <HAL_ADC_ConfigChannel+0x980>)
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fd04 	bl	8002a8c <LL_ADC_GetCommonPathInternalCh>
 8004084:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5f      	ldr	r2, [pc, #380]	@ (8004208 <HAL_ADC_ConfigChannel+0x984>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_ADC_ConfigChannel+0x816>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a5d      	ldr	r2, [pc, #372]	@ (800420c <HAL_ADC_ConfigChannel+0x988>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10e      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x834>
 800409a:	485b      	ldr	r0, [pc, #364]	@ (8004208 <HAL_ADC_ConfigChannel+0x984>)
 800409c:	f7fe ff58 	bl	8002f50 <LL_ADC_IsEnabled>
 80040a0:	4604      	mov	r4, r0
 80040a2:	485a      	ldr	r0, [pc, #360]	@ (800420c <HAL_ADC_ConfigChannel+0x988>)
 80040a4:	f7fe ff54 	bl	8002f50 <LL_ADC_IsEnabled>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4323      	orrs	r3, r4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e008      	b.n	80040ca <HAL_ADC_ConfigChannel+0x846>
 80040b8:	4855      	ldr	r0, [pc, #340]	@ (8004210 <HAL_ADC_ConfigChannel+0x98c>)
 80040ba:	f7fe ff49 	bl	8002f50 <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d07d      	beq.n	80041ca <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <HAL_ADC_ConfigChannel+0x990>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d130      	bne.n	800413a <HAL_ADC_ConfigChannel+0x8b6>
 80040d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d12b      	bne.n	800413a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004210 <HAL_ADC_ConfigChannel+0x98c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	f040 8081 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a45      	ldr	r2, [pc, #276]	@ (8004208 <HAL_ADC_ConfigChannel+0x984>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_ADC_ConfigChannel+0x87e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a43      	ldr	r2, [pc, #268]	@ (800420c <HAL_ADC_ConfigChannel+0x988>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x882>
 8004102:	4a45      	ldr	r2, [pc, #276]	@ (8004218 <HAL_ADC_ConfigChannel+0x994>)
 8004104:	e000      	b.n	8004108 <HAL_ADC_ConfigChannel+0x884>
 8004106:	4a3f      	ldr	r2, [pc, #252]	@ (8004204 <HAL_ADC_ConfigChannel+0x980>)
 8004108:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800410a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f7fe fca8 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <HAL_ADC_ConfigChannel+0x998>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	4a40      	ldr	r2, [pc, #256]	@ (8004220 <HAL_ADC_ConfigChannel+0x99c>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	3301      	adds	r3, #1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800412a:	e002      	b.n	8004132 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b01      	subs	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f9      	bne.n	800412c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004138:	e05a      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a39      	ldr	r2, [pc, #228]	@ (8004224 <HAL_ADC_ConfigChannel+0x9a0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d11e      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x8fe>
 8004144:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d119      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <HAL_ADC_ConfigChannel+0x98c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d14b      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <HAL_ADC_ConfigChannel+0x984>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_ADC_ConfigChannel+0x8e8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a29      	ldr	r2, [pc, #164]	@ (800420c <HAL_ADC_ConfigChannel+0x988>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x8ec>
 800416c:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <HAL_ADC_ConfigChannel+0x994>)
 800416e:	e000      	b.n	8004172 <HAL_ADC_ConfigChannel+0x8ee>
 8004170:	4a24      	ldr	r2, [pc, #144]	@ (8004204 <HAL_ADC_ConfigChannel+0x980>)
 8004172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004174:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fe fc73 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004180:	e036      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <HAL_ADC_ConfigChannel+0x9a4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d131      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
 800418c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800418e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d12c      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_ADC_ConfigChannel+0x98c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d127      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_ADC_ConfigChannel+0x984>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x930>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <HAL_ADC_ConfigChannel+0x988>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x934>
 80041b4:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_ADC_ConfigChannel+0x994>)
 80041b6:	e000      	b.n	80041ba <HAL_ADC_ConfigChannel+0x936>
 80041b8:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <HAL_ADC_ConfigChannel+0x980>)
 80041ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe fc4f 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
 80041c8:	e012      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80041dc:	e008      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80041f8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3794      	adds	r7, #148	@ 0x94
 8004200:	46bd      	mov	sp, r7
 8004202:	bd90      	pop	{r4, r7, pc}
 8004204:	58026300 	.word	0x58026300
 8004208:	40022000 	.word	0x40022000
 800420c:	40022100 	.word	0x40022100
 8004210:	58026000 	.word	0x58026000
 8004214:	c7520000 	.word	0xc7520000
 8004218:	40022300 	.word	0x40022300
 800421c:	24000000 	.word	0x24000000
 8004220:	053e2d63 	.word	0x053e2d63
 8004224:	c3210000 	.word	0xc3210000
 8004228:	cb840000 	.word	0xcb840000

0800422c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6c      	ldr	r2, [pc, #432]	@ (80043ec <ADC_ConfigureBoostMode+0x1c0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <ADC_ConfigureBoostMode+0x1c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6b      	ldr	r2, [pc, #428]	@ (80043f0 <ADC_ConfigureBoostMode+0x1c4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <ADC_ConfigureBoostMode+0x30>
 8004248:	4b6a      	ldr	r3, [pc, #424]	@ (80043f4 <ADC_ConfigureBoostMode+0x1c8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e008      	b.n	800426e <ADC_ConfigureBoostMode+0x42>
 800425c:	4b66      	ldr	r3, [pc, #408]	@ (80043f8 <ADC_ConfigureBoostMode+0x1cc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01c      	beq.n	80042ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004272:	f005 fd0b 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8004276:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004280:	d010      	beq.n	80042a4 <ADC_ConfigureBoostMode+0x78>
 8004282:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004286:	d873      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428c:	d002      	beq.n	8004294 <ADC_ConfigureBoostMode+0x68>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004292:	d16d      	bne.n	8004370 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	60fb      	str	r3, [r7, #12]
        break;
 80042a2:	e068      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	60fb      	str	r3, [r7, #12]
        break;
 80042aa:	e064      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	f006 fee6 	bl	800b084 <HAL_RCCEx_GetPeriphCLKFreq>
 80042b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80042c2:	d051      	beq.n	8004368 <ADC_ConfigureBoostMode+0x13c>
 80042c4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80042c8:	d854      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 80042ca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80042ce:	d047      	beq.n	8004360 <ADC_ConfigureBoostMode+0x134>
 80042d0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80042d4:	d84e      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 80042d6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80042da:	d03d      	beq.n	8004358 <ADC_ConfigureBoostMode+0x12c>
 80042dc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80042e0:	d848      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 80042e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042e6:	d033      	beq.n	8004350 <ADC_ConfigureBoostMode+0x124>
 80042e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ec:	d842      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 80042ee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80042f2:	d029      	beq.n	8004348 <ADC_ConfigureBoostMode+0x11c>
 80042f4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80042f8:	d83c      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 80042fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80042fe:	d01a      	beq.n	8004336 <ADC_ConfigureBoostMode+0x10a>
 8004300:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004304:	d836      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 8004306:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800430a:	d014      	beq.n	8004336 <ADC_ConfigureBoostMode+0x10a>
 800430c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004310:	d830      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d00e      	beq.n	8004336 <ADC_ConfigureBoostMode+0x10a>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431c:	d82a      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 800431e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004322:	d008      	beq.n	8004336 <ADC_ConfigureBoostMode+0x10a>
 8004324:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004328:	d824      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x148>
 800432a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800432e:	d002      	beq.n	8004336 <ADC_ConfigureBoostMode+0x10a>
 8004330:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004334:	d11e      	bne.n	8004374 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	0c9b      	lsrs	r3, r3, #18
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	60fb      	str	r3, [r7, #12]
        break;
 8004346:	e016      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
        break;
 800434e:	e012      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	60fb      	str	r3, [r7, #12]
        break;
 8004356:	e00e      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	60fb      	str	r3, [r7, #12]
        break;
 800435e:	e00a      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	09db      	lsrs	r3, r3, #7
 8004364:	60fb      	str	r3, [r7, #12]
        break;
 8004366:	e006      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	60fb      	str	r3, [r7, #12]
        break;
 800436e:	e002      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004374:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <ADC_ConfigureBoostMode+0x1d0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d808      	bhi.n	8004396 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004392:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004394:	e025      	b.n	80043e2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <ADC_ConfigureBoostMode+0x1d4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d80a      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b0:	609a      	str	r2, [r3, #8]
}
 80043b2:	e016      	b.n	80043e2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a13      	ldr	r2, [pc, #76]	@ (8004404 <ADC_ConfigureBoostMode+0x1d8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d80a      	bhi.n	80043d2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	e007      	b.n	80043e2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80043e0:	609a      	str	r2, [r3, #8]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40022000 	.word	0x40022000
 80043f0:	40022100 	.word	0x40022100
 80043f4:	40022300 	.word	0x40022300
 80043f8:	58026300 	.word	0x58026300
 80043fc:	005f5e10 	.word	0x005f5e10
 8004400:	00bebc20 	.word	0x00bebc20
 8004404:	017d7840 	.word	0x017d7840

08004408 <LL_ADC_IsEnabled>:
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <LL_ADC_IsEnabled+0x18>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <LL_ADC_IsEnabled+0x1a>
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_ADC_REG_IsConversionOngoing>:
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d101      	bne.n	8004446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b0a3      	sub	sp, #140	@ 0x8c
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0c1      	b.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d102      	bne.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e001      	b.n	80044fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0a0      	b.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff87 	bl	800442e <LL_ADC_REG_IsConversionOngoing>
 8004520:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff80 	bl	800442e <LL_ADC_REG_IsConversionOngoing>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 8081 	bne.w	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d17c      	bne.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a48      	ldr	r2, [pc, #288]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a46      	ldr	r2, [pc, #280]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004554:	e000      	b.n	8004558 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004556:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004558:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d039      	beq.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004562:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	431a      	orrs	r2, r3
 8004570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004572:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3a      	ldr	r2, [pc, #232]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a39      	ldr	r2, [pc, #228]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10e      	bne.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004588:	4836      	ldr	r0, [pc, #216]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800458a:	f7ff ff3d 	bl	8004408 <LL_ADC_IsEnabled>
 800458e:	4604      	mov	r4, r0
 8004590:	4835      	ldr	r0, [pc, #212]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004592:	f7ff ff39 	bl	8004408 <LL_ADC_IsEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	4323      	orrs	r3, r4
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e008      	b.n	80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80045a6:	4833      	ldr	r0, [pc, #204]	@ (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045a8:	f7ff ff2e 	bl	8004408 <LL_ADC_IsEnabled>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d047      	beq.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	6811      	ldr	r1, [r2, #0]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	6892      	ldr	r2, [r2, #8]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d4:	e03a      	b.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10e      	bne.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80045f6:	481b      	ldr	r0, [pc, #108]	@ (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045f8:	f7ff ff06 	bl	8004408 <LL_ADC_IsEnabled>
 80045fc:	4604      	mov	r4, r0
 80045fe:	481a      	ldr	r0, [pc, #104]	@ (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004600:	f7ff ff02 	bl	8004408 <LL_ADC_IsEnabled>
 8004604:	4603      	mov	r3, r0
 8004606:	4323      	orrs	r3, r4
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e008      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004614:	4817      	ldr	r0, [pc, #92]	@ (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004616:	f7ff fef7 	bl	8004408 <LL_ADC_IsEnabled>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800462a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004630:	4013      	ands	r3, r2
 8004632:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004634:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004636:	e009      	b.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800464a:	e000      	b.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800464c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004656:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800465a:	4618      	mov	r0, r3
 800465c:	378c      	adds	r7, #140	@ 0x8c
 800465e:	46bd      	mov	sp, r7
 8004660:	bd90      	pop	{r4, r7, pc}
 8004662:	bf00      	nop
 8004664:	40022000 	.word	0x40022000
 8004668:	40022100 	.word	0x40022100
 800466c:	40022300 	.word	0x40022300
 8004670:	58026300 	.word	0x58026300
 8004674:	58026000 	.word	0x58026000
 8004678:	fffff0e0 	.word	0xfffff0e0

0800467c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e023      	b.n	80046d6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc f960 	bl	8000968 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d039      	beq.n	800477c <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004716:	d101      	bne.n	800471c <HAL_CORDIC_IRQHandler+0x2a>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_CORDIC_IRQHandler+0x2c>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02c      	beq.n	800477c <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3308      	adds	r3, #8
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f84f 	bl	80047d6 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f817 	bl	8004784 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800476c:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ffb1 	bl	80046de <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b2:	d10a      	bne.n	80047ca <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	601a      	str	r2, [r3, #0]
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1d1a      	adds	r2, r3, #4
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004800:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004804:	d10a      	bne.n	800481c <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	601a      	str	r2, [r3, #0]
  }
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <__NVIC_SetPriorityGrouping+0x40>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004844:	4013      	ands	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004850:	4b06      	ldr	r3, [pc, #24]	@ (800486c <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	4313      	orrs	r3, r2
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <__NVIC_SetPriorityGrouping+0x40>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	05fa0000 	.word	0x05fa0000

08004870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004874:	4b04      	ldr	r3, [pc, #16]	@ (8004888 <__NVIC_GetPriorityGrouping+0x18>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 0307 	and.w	r3, r3, #7
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	4907      	ldr	r1, [pc, #28]	@ (80048c4 <__NVIC_EnableIRQ+0x38>)
 80048a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2001      	movs	r0, #1
 80048ae:	fa00 f202 	lsl.w	r2, r0, r2
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db0a      	blt.n	80048f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	490c      	ldr	r1, [pc, #48]	@ (8004914 <__NVIC_SetPriority+0x4c>)
 80048e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e6:	0112      	lsls	r2, r2, #4
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	440b      	add	r3, r1
 80048ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f0:	e00a      	b.n	8004908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4908      	ldr	r1, [pc, #32]	@ (8004918 <__NVIC_SetPriority+0x50>)
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3b04      	subs	r3, #4
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	440b      	add	r3, r1
 8004906:	761a      	strb	r2, [r3, #24]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	@ 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f1c3 0307 	rsb	r3, r3, #7
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf28      	it	cs
 800493a:	2304      	movcs	r3, #4
 800493c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3304      	adds	r3, #4
 8004942:	2b06      	cmp	r3, #6
 8004944:	d902      	bls.n	800494c <NVIC_EncodePriority+0x30>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3b03      	subs	r3, #3
 800494a:	e000      	b.n	800494e <NVIC_EncodePriority+0x32>
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	401a      	ands	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004964:	f04f 31ff 	mov.w	r1, #4294967295
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43d9      	mvns	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	4313      	orrs	r3, r2
         );
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	@ 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004994:	d301      	bcc.n	800499a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004996:	2301      	movs	r3, #1
 8004998:	e00f      	b.n	80049ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <SysTick_Config+0x40>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049a2:	210f      	movs	r1, #15
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	f7ff ff8e 	bl	80048c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <SysTick_Config+0x40>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049b2:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <SysTick_Config+0x40>)
 80049b4:	2207      	movs	r2, #7
 80049b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000e010 	.word	0xe000e010

080049c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff29 	bl	8004828 <__NVIC_SetPriorityGrouping>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ec:	f7ff ff40 	bl	8004870 <__NVIC_GetPriorityGrouping>
 80049f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f7ff ff90 	bl	800491c <NVIC_EncodePriority>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff5f 	bl	80048c8 <__NVIC_SetPriority>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	4603      	mov	r3, r0
 8004a1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff33 	bl	800488c <__NVIC_EnableIRQ>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ffa4 	bl	8004984 <SysTick_Config>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004a4c:	f3bf 8f5f 	dmb	sy
}
 8004a50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004a52:	4b07      	ldr	r3, [pc, #28]	@ (8004a70 <HAL_MPU_Disable+0x28>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	4a06      	ldr	r2, [pc, #24]	@ (8004a70 <HAL_MPU_Disable+0x28>)
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_MPU_Disable+0x2c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	e000ed00 	.word	0xe000ed00
 8004a74:	e000ed90 	.word	0xe000ed90

08004a78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004a80:	4a0b      	ldr	r2, [pc, #44]	@ (8004ab0 <HAL_MPU_Enable+0x38>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <HAL_MPU_Enable+0x3c>)
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <HAL_MPU_Enable+0x3c>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004a96:	f3bf 8f4f 	dsb	sy
}
 8004a9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a9c:	f3bf 8f6f 	isb	sy
}
 8004aa0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000ed90 	.word	0xe000ed90
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	785a      	ldrb	r2, [r3, #1]
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <HAL_MPU_ConfigRegion+0x7c>)
 8004ac6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_MPU_ConfigRegion+0x7c>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	4a19      	ldr	r2, [pc, #100]	@ (8004b34 <HAL_MPU_ConfigRegion+0x7c>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004ad4:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <HAL_MPU_ConfigRegion+0x7c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
 8004ae0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7adb      	ldrb	r3, [r3, #11]
 8004ae6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7a9b      	ldrb	r3, [r3, #10]
 8004aee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7b5b      	ldrb	r3, [r3, #13]
 8004af6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004af8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7b9b      	ldrb	r3, [r3, #14]
 8004afe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7bdb      	ldrb	r3, [r3, #15]
 8004b06:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7a5b      	ldrb	r3, [r3, #9]
 8004b0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7a1b      	ldrb	r3, [r3, #8]
 8004b16:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004b18:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b22:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b24:	6113      	str	r3, [r2, #16]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000ed90 	.word	0xe000ed90

08004b38 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e014      	b.n	8004b74 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	791b      	ldrb	r3, [r3, #4]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fb ffc2 	bl	8000ae4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_DAC_ConfigChannel+0x1e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e12d      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	795b      	ldrb	r3, [r3, #5]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_DAC_ConfigChannel+0x34>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e124      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x27e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d17a      	bne.n	8004cba <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004bc4:	f7fd ff0c 	bl	80029e0 <HAL_GetTick>
 8004bc8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d13d      	bne.n	8004c4c <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004bd0:	e018      	b.n	8004c04 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004bd2:	f7fd ff05 	bl	80029e0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d911      	bls.n	8004c04 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be6:	4b87      	ldr	r3, [pc, #540]	@ (8004e04 <HAL_DAC_ConfigChannel+0x288>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f043 0208 	orr.w	r2, r3, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0fa      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c0a:	4b7e      	ldr	r3, [pc, #504]	@ (8004e04 <HAL_DAC_ConfigChannel+0x288>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1df      	bne.n	8004bd2 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	6992      	ldr	r2, [r2, #24]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c1c:	e020      	b.n	8004c60 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c1e:	f7fd fedf 	bl	80029e0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d90f      	bls.n	8004c4c <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da0a      	bge.n	8004c4c <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f043 0208 	orr.w	r2, r3, #8
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2203      	movs	r2, #3
 8004c46:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0d6      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dbe3      	blt.n	8004c1e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	6992      	ldr	r2, [r2, #24]
 8004c5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	ea02 0103 	and.w	r1, r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	409a      	lsls	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	21ff      	movs	r1, #255	@ 0xff
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	ea02 0103 	and.w	r1, r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11d      	bne.n	8004cfe <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	221f      	movs	r2, #31
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d102      	bne.n	8004d28 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d26:	e00f      	b.n	8004d48 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d102      	bne.n	8004d36 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d34:	e008      	b.n	8004d48 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d42:	e001      	b.n	8004d48 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43da      	mvns	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	22c0      	movs	r2, #192	@ 0xc0
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	400a      	ands	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004df6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3728      	adds	r7, #40	@ 0x28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20008000 	.word	0x20008000

08004e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7fd fde6 	bl	80029e0 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e312      	b.n	8005446 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a66      	ldr	r2, [pc, #408]	@ (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a65      	ldr	r2, [pc, #404]	@ (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a63      	ldr	r2, [pc, #396]	@ (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a62      	ldr	r2, [pc, #392]	@ (8004fcc <HAL_DMA_Init+0x1c4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a60      	ldr	r2, [pc, #384]	@ (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5d      	ldr	r2, [pc, #372]	@ (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fdc <HAL_DMA_Init+0x1d4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a59      	ldr	r2, [pc, #356]	@ (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a57      	ldr	r2, [pc, #348]	@ (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a56      	ldr	r2, [pc, #344]	@ (8004fec <HAL_DMA_Init+0x1e4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a54      	ldr	r2, [pc, #336]	@ (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a53      	ldr	r2, [pc, #332]	@ (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a51      	ldr	r2, [pc, #324]	@ (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a50      	ldr	r2, [pc, #320]	@ (8004ffc <HAL_DMA_Init+0x1f4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Init+0xbc>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_DMA_Init+0xbe>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 813c 	beq.w	8005144 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a37      	ldr	r2, [pc, #220]	@ (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a36      	ldr	r2, [pc, #216]	@ (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	@ (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a33      	ldr	r2, [pc, #204]	@ (8004fcc <HAL_DMA_Init+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a31      	ldr	r2, [pc, #196]	@ (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a30      	ldr	r2, [pc, #192]	@ (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <HAL_DMA_Init+0x1d4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a28      	ldr	r2, [pc, #160]	@ (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a27      	ldr	r2, [pc, #156]	@ (8004fec <HAL_DMA_Init+0x1e4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a25      	ldr	r2, [pc, #148]	@ (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	@ (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	@ (8004ffc <HAL_DMA_Init+0x1f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_Init+0x186>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e007      	b.n	8004f9e <HAL_DMA_Init+0x196>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f9e:	e02f      	b.n	8005000 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa0:	f7fd fd1e 	bl	80029e0 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d928      	bls.n	8005000 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e242      	b.n	8005446 <HAL_DMA_Init+0x63e>
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c8      	bne.n	8004fa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4b83      	ldr	r3, [pc, #524]	@ (8005228 <HAL_DMA_Init+0x420>)
 800501a:	4013      	ands	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005026:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005032:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2b04      	cmp	r3, #4
 8005052:	d107      	bne.n	8005064 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505c:	4313      	orrs	r3, r2
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b28      	cmp	r3, #40	@ 0x28
 800506a:	d903      	bls.n	8005074 <HAL_DMA_Init+0x26c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b2e      	cmp	r3, #46	@ 0x2e
 8005072:	d91f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b3e      	cmp	r3, #62	@ 0x3e
 800507a:	d903      	bls.n	8005084 <HAL_DMA_Init+0x27c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b42      	cmp	r3, #66	@ 0x42
 8005082:	d917      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b46      	cmp	r3, #70	@ 0x46
 800508a:	d903      	bls.n	8005094 <HAL_DMA_Init+0x28c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b48      	cmp	r3, #72	@ 0x48
 8005092:	d90f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b4e      	cmp	r3, #78	@ 0x4e
 800509a:	d903      	bls.n	80050a4 <HAL_DMA_Init+0x29c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b52      	cmp	r3, #82	@ 0x52
 80050a2:	d907      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b73      	cmp	r3, #115	@ 0x73
 80050aa:	d905      	bls.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b77      	cmp	r3, #119	@ 0x77
 80050b2:	d801      	bhi.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_DMA_Init+0x2b2>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d117      	bne.n	8005120 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00e      	beq.n	8005120 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 ff18 	bl	8006f38 <DMA_CheckFifoParam>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2240      	movs	r2, #64	@ 0x40
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e192      	b.n	8005446 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 fe53 	bl	8006dd4 <DMA_CalcBaseAndBitshift>
 800512e:	4603      	mov	r3, r0
 8005130:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	223f      	movs	r2, #63	@ 0x3f
 800513c:	409a      	lsls	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e0c8      	b.n	80052d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a38      	ldr	r2, [pc, #224]	@ (800522c <HAL_DMA_Init+0x424>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a37      	ldr	r2, [pc, #220]	@ (8005230 <HAL_DMA_Init+0x428>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d01d      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a35      	ldr	r2, [pc, #212]	@ (8005234 <HAL_DMA_Init+0x42c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a34      	ldr	r2, [pc, #208]	@ (8005238 <HAL_DMA_Init+0x430>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a32      	ldr	r2, [pc, #200]	@ (800523c <HAL_DMA_Init+0x434>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a31      	ldr	r2, [pc, #196]	@ (8005240 <HAL_DMA_Init+0x438>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2f      	ldr	r2, [pc, #188]	@ (8005244 <HAL_DMA_Init+0x43c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2e      	ldr	r2, [pc, #184]	@ (8005248 <HAL_DMA_Init+0x440>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x390>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_DMA_Init+0x392>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8092 	beq.w	80052c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a21      	ldr	r2, [pc, #132]	@ (800522c <HAL_DMA_Init+0x424>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d021      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a20      	ldr	r2, [pc, #128]	@ (8005230 <HAL_DMA_Init+0x428>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01c      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_DMA_Init+0x42c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d017      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <HAL_DMA_Init+0x430>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d012      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	@ (800523c <HAL_DMA_Init+0x434>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00d      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005240 <HAL_DMA_Init+0x438>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d008      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a18      	ldr	r2, [pc, #96]	@ (8005244 <HAL_DMA_Init+0x43c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	@ (8005248 <HAL_DMA_Init+0x440>)
 80051ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4b10      	ldr	r3, [pc, #64]	@ (800524c <HAL_DMA_Init+0x444>)
 800520a:	4013      	ands	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d01c      	beq.n	8005250 <HAL_DMA_Init+0x448>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b80      	cmp	r3, #128	@ 0x80
 800521c:	d102      	bne.n	8005224 <HAL_DMA_Init+0x41c>
 800521e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005222:	e016      	b.n	8005252 <HAL_DMA_Init+0x44a>
 8005224:	2300      	movs	r3, #0
 8005226:	e014      	b.n	8005252 <HAL_DMA_Init+0x44a>
 8005228:	fe10803f 	.word	0xfe10803f
 800522c:	58025408 	.word	0x58025408
 8005230:	5802541c 	.word	0x5802541c
 8005234:	58025430 	.word	0x58025430
 8005238:	58025444 	.word	0x58025444
 800523c:	58025458 	.word	0x58025458
 8005240:	5802546c 	.word	0x5802546c
 8005244:	58025480 	.word	0x58025480
 8005248:	58025494 	.word	0x58025494
 800524c:	fffe000f 	.word	0xfffe000f
 8005250:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68d2      	ldr	r2, [r2, #12]
 8005256:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005260:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005268:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005280:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	4b6e      	ldr	r3, [pc, #440]	@ (8005450 <HAL_DMA_Init+0x648>)
 8005298:	4413      	add	r3, r2
 800529a:	4a6e      	ldr	r2, [pc, #440]	@ (8005454 <HAL_DMA_Init+0x64c>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fd93 	bl	8006dd4 <DMA_CalcBaseAndBitshift>
 80052ae:	4603      	mov	r3, r0
 80052b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	e008      	b.n	80052d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2240      	movs	r2, #64	@ 0x40
 80052c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2203      	movs	r2, #3
 80052ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0b7      	b.n	8005446 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5f      	ldr	r2, [pc, #380]	@ (8005458 <HAL_DMA_Init+0x650>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d072      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5d      	ldr	r2, [pc, #372]	@ (800545c <HAL_DMA_Init+0x654>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d06d      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005460 <HAL_DMA_Init+0x658>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d068      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005464 <HAL_DMA_Init+0x65c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d063      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a59      	ldr	r2, [pc, #356]	@ (8005468 <HAL_DMA_Init+0x660>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d05e      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a57      	ldr	r2, [pc, #348]	@ (800546c <HAL_DMA_Init+0x664>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d059      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a56      	ldr	r2, [pc, #344]	@ (8005470 <HAL_DMA_Init+0x668>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d054      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a54      	ldr	r2, [pc, #336]	@ (8005474 <HAL_DMA_Init+0x66c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d04f      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a53      	ldr	r2, [pc, #332]	@ (8005478 <HAL_DMA_Init+0x670>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d04a      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a51      	ldr	r2, [pc, #324]	@ (800547c <HAL_DMA_Init+0x674>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d045      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a50      	ldr	r2, [pc, #320]	@ (8005480 <HAL_DMA_Init+0x678>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d040      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4e      	ldr	r2, [pc, #312]	@ (8005484 <HAL_DMA_Init+0x67c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d03b      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a4d      	ldr	r2, [pc, #308]	@ (8005488 <HAL_DMA_Init+0x680>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d036      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4b      	ldr	r2, [pc, #300]	@ (800548c <HAL_DMA_Init+0x684>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d031      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4a      	ldr	r2, [pc, #296]	@ (8005490 <HAL_DMA_Init+0x688>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d02c      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a48      	ldr	r2, [pc, #288]	@ (8005494 <HAL_DMA_Init+0x68c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d027      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a47      	ldr	r2, [pc, #284]	@ (8005498 <HAL_DMA_Init+0x690>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a45      	ldr	r2, [pc, #276]	@ (800549c <HAL_DMA_Init+0x694>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a44      	ldr	r2, [pc, #272]	@ (80054a0 <HAL_DMA_Init+0x698>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a42      	ldr	r2, [pc, #264]	@ (80054a4 <HAL_DMA_Init+0x69c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a41      	ldr	r2, [pc, #260]	@ (80054a8 <HAL_DMA_Init+0x6a0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3f      	ldr	r2, [pc, #252]	@ (80054ac <HAL_DMA_Init+0x6a4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3e      	ldr	r2, [pc, #248]	@ (80054b0 <HAL_DMA_Init+0x6a8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_DMA_Init+0x5be>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3c      	ldr	r2, [pc, #240]	@ (80054b4 <HAL_DMA_Init+0x6ac>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_DMA_Init+0x5c2>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_DMA_Init+0x5c4>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d032      	beq.n	8005436 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 fe2d 	bl	8007030 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b80      	cmp	r3, #128	@ 0x80
 80053dc:	d102      	bne.n	80053e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_DMA_Init+0x61c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b08      	cmp	r3, #8
 8005408:	d80c      	bhi.n	8005424 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 feaa 	bl	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	e008      	b.n	8005436 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	a7fdabf8 	.word	0xa7fdabf8
 8005454:	cccccccd 	.word	0xcccccccd
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028
 8005460:	40020040 	.word	0x40020040
 8005464:	40020058 	.word	0x40020058
 8005468:	40020070 	.word	0x40020070
 800546c:	40020088 	.word	0x40020088
 8005470:	400200a0 	.word	0x400200a0
 8005474:	400200b8 	.word	0x400200b8
 8005478:	40020410 	.word	0x40020410
 800547c:	40020428 	.word	0x40020428
 8005480:	40020440 	.word	0x40020440
 8005484:	40020458 	.word	0x40020458
 8005488:	40020470 	.word	0x40020470
 800548c:	40020488 	.word	0x40020488
 8005490:	400204a0 	.word	0x400204a0
 8005494:	400204b8 	.word	0x400204b8
 8005498:	58025408 	.word	0x58025408
 800549c:	5802541c 	.word	0x5802541c
 80054a0:	58025430 	.word	0x58025430
 80054a4:	58025444 	.word	0x58025444
 80054a8:	58025458 	.word	0x58025458
 80054ac:	5802546c 	.word	0x5802546c
 80054b0:	58025480 	.word	0x58025480
 80054b4:	58025494 	.word	0x58025494

080054b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054c0:	f7fd fa8e 	bl	80029e0 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e2dc      	b.n	8005a8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d008      	beq.n	80054ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2280      	movs	r2, #128	@ 0x80
 80054e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e2cd      	b.n	8005a8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a76      	ldr	r2, [pc, #472]	@ (80056cc <HAL_DMA_Abort+0x214>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d04a      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a74      	ldr	r2, [pc, #464]	@ (80056d0 <HAL_DMA_Abort+0x218>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d045      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a73      	ldr	r2, [pc, #460]	@ (80056d4 <HAL_DMA_Abort+0x21c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a71      	ldr	r2, [pc, #452]	@ (80056d8 <HAL_DMA_Abort+0x220>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d03b      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a70      	ldr	r2, [pc, #448]	@ (80056dc <HAL_DMA_Abort+0x224>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d036      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6e      	ldr	r2, [pc, #440]	@ (80056e0 <HAL_DMA_Abort+0x228>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d031      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6d      	ldr	r2, [pc, #436]	@ (80056e4 <HAL_DMA_Abort+0x22c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d02c      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6b      	ldr	r2, [pc, #428]	@ (80056e8 <HAL_DMA_Abort+0x230>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d027      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6a      	ldr	r2, [pc, #424]	@ (80056ec <HAL_DMA_Abort+0x234>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a68      	ldr	r2, [pc, #416]	@ (80056f0 <HAL_DMA_Abort+0x238>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a67      	ldr	r2, [pc, #412]	@ (80056f4 <HAL_DMA_Abort+0x23c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a65      	ldr	r2, [pc, #404]	@ (80056f8 <HAL_DMA_Abort+0x240>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a64      	ldr	r2, [pc, #400]	@ (80056fc <HAL_DMA_Abort+0x244>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a62      	ldr	r2, [pc, #392]	@ (8005700 <HAL_DMA_Abort+0x248>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a61      	ldr	r2, [pc, #388]	@ (8005704 <HAL_DMA_Abort+0x24c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_DMA_Abort+0xd6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5f      	ldr	r2, [pc, #380]	@ (8005708 <HAL_DMA_Abort+0x250>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <HAL_DMA_Abort+0xda>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_DMA_Abort+0xdc>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d013      	beq.n	80055c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 021e 	bic.w	r2, r2, #30
 80055a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e00a      	b.n	80055d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 020e 	bic.w	r2, r2, #14
 80055ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a3c      	ldr	r2, [pc, #240]	@ (80056cc <HAL_DMA_Abort+0x214>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d072      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a3a      	ldr	r2, [pc, #232]	@ (80056d0 <HAL_DMA_Abort+0x218>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d06d      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a39      	ldr	r2, [pc, #228]	@ (80056d4 <HAL_DMA_Abort+0x21c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d068      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a37      	ldr	r2, [pc, #220]	@ (80056d8 <HAL_DMA_Abort+0x220>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d063      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a36      	ldr	r2, [pc, #216]	@ (80056dc <HAL_DMA_Abort+0x224>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d05e      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a34      	ldr	r2, [pc, #208]	@ (80056e0 <HAL_DMA_Abort+0x228>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d059      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a33      	ldr	r2, [pc, #204]	@ (80056e4 <HAL_DMA_Abort+0x22c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d054      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a31      	ldr	r2, [pc, #196]	@ (80056e8 <HAL_DMA_Abort+0x230>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d04f      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a30      	ldr	r2, [pc, #192]	@ (80056ec <HAL_DMA_Abort+0x234>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2e      	ldr	r2, [pc, #184]	@ (80056f0 <HAL_DMA_Abort+0x238>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2d      	ldr	r2, [pc, #180]	@ (80056f4 <HAL_DMA_Abort+0x23c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2b      	ldr	r2, [pc, #172]	@ (80056f8 <HAL_DMA_Abort+0x240>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <HAL_DMA_Abort+0x244>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a28      	ldr	r2, [pc, #160]	@ (8005700 <HAL_DMA_Abort+0x248>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a27      	ldr	r2, [pc, #156]	@ (8005704 <HAL_DMA_Abort+0x24c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <HAL_DMA_Abort+0x250>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a24      	ldr	r2, [pc, #144]	@ (800570c <HAL_DMA_Abort+0x254>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a22      	ldr	r2, [pc, #136]	@ (8005710 <HAL_DMA_Abort+0x258>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a21      	ldr	r2, [pc, #132]	@ (8005714 <HAL_DMA_Abort+0x25c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <HAL_DMA_Abort+0x260>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <HAL_DMA_Abort+0x264>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <HAL_DMA_Abort+0x268>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <HAL_DMA_Abort+0x26c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_Abort+0x20e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <HAL_DMA_Abort+0x270>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d132      	bne.n	800572c <HAL_DMA_Abort+0x274>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e031      	b.n	800572e <HAL_DMA_Abort+0x276>
 80056ca:	bf00      	nop
 80056cc:	40020010 	.word	0x40020010
 80056d0:	40020028 	.word	0x40020028
 80056d4:	40020040 	.word	0x40020040
 80056d8:	40020058 	.word	0x40020058
 80056dc:	40020070 	.word	0x40020070
 80056e0:	40020088 	.word	0x40020088
 80056e4:	400200a0 	.word	0x400200a0
 80056e8:	400200b8 	.word	0x400200b8
 80056ec:	40020410 	.word	0x40020410
 80056f0:	40020428 	.word	0x40020428
 80056f4:	40020440 	.word	0x40020440
 80056f8:	40020458 	.word	0x40020458
 80056fc:	40020470 	.word	0x40020470
 8005700:	40020488 	.word	0x40020488
 8005704:	400204a0 	.word	0x400204a0
 8005708:	400204b8 	.word	0x400204b8
 800570c:	58025408 	.word	0x58025408
 8005710:	5802541c 	.word	0x5802541c
 8005714:	58025430 	.word	0x58025430
 8005718:	58025444 	.word	0x58025444
 800571c:	58025458 	.word	0x58025458
 8005720:	5802546c 	.word	0x5802546c
 8005724:	58025480 	.word	0x58025480
 8005728:	58025494 	.word	0x58025494
 800572c:	2300      	movs	r3, #0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005740:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6d      	ldr	r2, [pc, #436]	@ (80058fc <HAL_DMA_Abort+0x444>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04a      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a6b      	ldr	r2, [pc, #428]	@ (8005900 <HAL_DMA_Abort+0x448>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d045      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6a      	ldr	r2, [pc, #424]	@ (8005904 <HAL_DMA_Abort+0x44c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a68      	ldr	r2, [pc, #416]	@ (8005908 <HAL_DMA_Abort+0x450>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d03b      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a67      	ldr	r2, [pc, #412]	@ (800590c <HAL_DMA_Abort+0x454>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d036      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a65      	ldr	r2, [pc, #404]	@ (8005910 <HAL_DMA_Abort+0x458>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d031      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a64      	ldr	r2, [pc, #400]	@ (8005914 <HAL_DMA_Abort+0x45c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d02c      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a62      	ldr	r2, [pc, #392]	@ (8005918 <HAL_DMA_Abort+0x460>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d027      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a61      	ldr	r2, [pc, #388]	@ (800591c <HAL_DMA_Abort+0x464>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005920 <HAL_DMA_Abort+0x468>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005924 <HAL_DMA_Abort+0x46c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005928 <HAL_DMA_Abort+0x470>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5b      	ldr	r2, [pc, #364]	@ (800592c <HAL_DMA_Abort+0x474>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a59      	ldr	r2, [pc, #356]	@ (8005930 <HAL_DMA_Abort+0x478>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a58      	ldr	r2, [pc, #352]	@ (8005934 <HAL_DMA_Abort+0x47c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_Abort+0x32a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a56      	ldr	r2, [pc, #344]	@ (8005938 <HAL_DMA_Abort+0x480>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <HAL_DMA_Abort+0x33c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <HAL_DMA_Abort+0x34c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005804:	e013      	b.n	800582e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005806:	f7fd f8eb 	bl	80029e0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b05      	cmp	r3, #5
 8005812:	d90c      	bls.n	800582e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2203      	movs	r2, #3
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e12d      	b.n	8005a8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2f      	ldr	r2, [pc, #188]	@ (80058fc <HAL_DMA_Abort+0x444>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2d      	ldr	r2, [pc, #180]	@ (8005900 <HAL_DMA_Abort+0x448>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_Abort+0x422>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <HAL_DMA_Abort+0x44c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2a      	ldr	r2, [pc, #168]	@ (8005908 <HAL_DMA_Abort+0x450>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a29      	ldr	r2, [pc, #164]	@ (800590c <HAL_DMA_Abort+0x454>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_Abort+0x422>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a27      	ldr	r2, [pc, #156]	@ (8005910 <HAL_DMA_Abort+0x458>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a26      	ldr	r2, [pc, #152]	@ (8005914 <HAL_DMA_Abort+0x45c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <HAL_DMA_Abort+0x460>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_Abort+0x422>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a23      	ldr	r2, [pc, #140]	@ (800591c <HAL_DMA_Abort+0x464>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_Abort+0x422>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a21      	ldr	r2, [pc, #132]	@ (8005920 <HAL_DMA_Abort+0x468>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_Abort+0x422>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a20      	ldr	r2, [pc, #128]	@ (8005924 <HAL_DMA_Abort+0x46c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_Abort+0x422>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005928 <HAL_DMA_Abort+0x470>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_Abort+0x422>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <HAL_DMA_Abort+0x474>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_Abort+0x422>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_DMA_Abort+0x478>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_Abort+0x422>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <HAL_DMA_Abort+0x47c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_Abort+0x422>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_DMA_Abort+0x480>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Abort+0x426>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_DMA_Abort+0x428>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02b      	beq.n	800593c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	223f      	movs	r2, #63	@ 0x3f
 80058f4:	409a      	lsls	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	e02a      	b.n	8005952 <HAL_DMA_Abort+0x49a>
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005940:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2201      	movs	r2, #1
 800594c:	409a      	lsls	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4f      	ldr	r2, [pc, #316]	@ (8005a94 <HAL_DMA_Abort+0x5dc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d072      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a4d      	ldr	r2, [pc, #308]	@ (8005a98 <HAL_DMA_Abort+0x5e0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d06d      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a9c <HAL_DMA_Abort+0x5e4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d068      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a4a      	ldr	r2, [pc, #296]	@ (8005aa0 <HAL_DMA_Abort+0x5e8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d063      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a49      	ldr	r2, [pc, #292]	@ (8005aa4 <HAL_DMA_Abort+0x5ec>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d05e      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a47      	ldr	r2, [pc, #284]	@ (8005aa8 <HAL_DMA_Abort+0x5f0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d059      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a46      	ldr	r2, [pc, #280]	@ (8005aac <HAL_DMA_Abort+0x5f4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d054      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a44      	ldr	r2, [pc, #272]	@ (8005ab0 <HAL_DMA_Abort+0x5f8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d04f      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a43      	ldr	r2, [pc, #268]	@ (8005ab4 <HAL_DMA_Abort+0x5fc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d04a      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a41      	ldr	r2, [pc, #260]	@ (8005ab8 <HAL_DMA_Abort+0x600>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d045      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a40      	ldr	r2, [pc, #256]	@ (8005abc <HAL_DMA_Abort+0x604>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d040      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac0 <HAL_DMA_Abort+0x608>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d03b      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3d      	ldr	r2, [pc, #244]	@ (8005ac4 <HAL_DMA_Abort+0x60c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d036      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac8 <HAL_DMA_Abort+0x610>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d031      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3a      	ldr	r2, [pc, #232]	@ (8005acc <HAL_DMA_Abort+0x614>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d02c      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a38      	ldr	r2, [pc, #224]	@ (8005ad0 <HAL_DMA_Abort+0x618>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d027      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a37      	ldr	r2, [pc, #220]	@ (8005ad4 <HAL_DMA_Abort+0x61c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a35      	ldr	r2, [pc, #212]	@ (8005ad8 <HAL_DMA_Abort+0x620>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01d      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a34      	ldr	r2, [pc, #208]	@ (8005adc <HAL_DMA_Abort+0x624>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a32      	ldr	r2, [pc, #200]	@ (8005ae0 <HAL_DMA_Abort+0x628>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a31      	ldr	r2, [pc, #196]	@ (8005ae4 <HAL_DMA_Abort+0x62c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae8 <HAL_DMA_Abort+0x630>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2e      	ldr	r2, [pc, #184]	@ (8005aec <HAL_DMA_Abort+0x634>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_Abort+0x58a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <HAL_DMA_Abort+0x638>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA_Abort+0x58e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_DMA_Abort+0x590>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	58025408 	.word	0x58025408
 8005ad8:	5802541c 	.word	0x5802541c
 8005adc:	58025430 	.word	0x58025430
 8005ae0:	58025444 	.word	0x58025444
 8005ae4:	58025458 	.word	0x58025458
 8005ae8:	5802546c 	.word	0x5802546c
 8005aec:	58025480 	.word	0x58025480
 8005af0:	58025494 	.word	0x58025494

08005af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e237      	b.n	8005f76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d004      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2280      	movs	r2, #128	@ 0x80
 8005b16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e22c      	b.n	8005f76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a5c      	ldr	r2, [pc, #368]	@ (8005c94 <HAL_DMA_Abort_IT+0x1a0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d04a      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c98 <HAL_DMA_Abort_IT+0x1a4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d045      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a59      	ldr	r2, [pc, #356]	@ (8005c9c <HAL_DMA_Abort_IT+0x1a8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d040      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a58      	ldr	r2, [pc, #352]	@ (8005ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d03b      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a56      	ldr	r2, [pc, #344]	@ (8005ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d036      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a55      	ldr	r2, [pc, #340]	@ (8005ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d031      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a53      	ldr	r2, [pc, #332]	@ (8005cac <HAL_DMA_Abort_IT+0x1b8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02c      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a52      	ldr	r2, [pc, #328]	@ (8005cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d027      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a50      	ldr	r2, [pc, #320]	@ (8005cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8005cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01d      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a4d      	ldr	r2, [pc, #308]	@ (8005cbc <HAL_DMA_Abort_IT+0x1c8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a4a      	ldr	r2, [pc, #296]	@ (8005cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a49      	ldr	r2, [pc, #292]	@ (8005cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a47      	ldr	r2, [pc, #284]	@ (8005ccc <HAL_DMA_Abort_IT+0x1d8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_DMA_Abort_IT+0xc8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a46      	ldr	r2, [pc, #280]	@ (8005cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_DMA_Abort_IT+0xcc>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_DMA_Abort_IT+0xce>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8086 	beq.w	8005cd4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2204      	movs	r2, #4
 8005bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8005c94 <HAL_DMA_Abort_IT+0x1a0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d04a      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2e      	ldr	r2, [pc, #184]	@ (8005c98 <HAL_DMA_Abort_IT+0x1a4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d045      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c9c <HAL_DMA_Abort_IT+0x1a8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d040      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d03b      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a29      	ldr	r2, [pc, #164]	@ (8005ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d036      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a28      	ldr	r2, [pc, #160]	@ (8005ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d031      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a26      	ldr	r2, [pc, #152]	@ (8005cac <HAL_DMA_Abort_IT+0x1b8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02c      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a25      	ldr	r2, [pc, #148]	@ (8005cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a23      	ldr	r2, [pc, #140]	@ (8005cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a22      	ldr	r2, [pc, #136]	@ (8005cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <HAL_DMA_Abort_IT+0x1c8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <HAL_DMA_Abort_IT+0x1d8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x17c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <HAL_DMA_Abort_IT+0x18e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e178      	b.n	8005f74 <HAL_DMA_Abort_IT+0x480>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e16f      	b.n	8005f74 <HAL_DMA_Abort_IT+0x480>
 8005c94:	40020010 	.word	0x40020010
 8005c98:	40020028 	.word	0x40020028
 8005c9c:	40020040 	.word	0x40020040
 8005ca0:	40020058 	.word	0x40020058
 8005ca4:	40020070 	.word	0x40020070
 8005ca8:	40020088 	.word	0x40020088
 8005cac:	400200a0 	.word	0x400200a0
 8005cb0:	400200b8 	.word	0x400200b8
 8005cb4:	40020410 	.word	0x40020410
 8005cb8:	40020428 	.word	0x40020428
 8005cbc:	40020440 	.word	0x40020440
 8005cc0:	40020458 	.word	0x40020458
 8005cc4:	40020470 	.word	0x40020470
 8005cc8:	40020488 	.word	0x40020488
 8005ccc:	400204a0 	.word	0x400204a0
 8005cd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 020e 	bic.w	r2, r2, #14
 8005ce2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6c      	ldr	r2, [pc, #432]	@ (8005e9c <HAL_DMA_Abort_IT+0x3a8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04a      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d045      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a69      	ldr	r2, [pc, #420]	@ (8005ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d040      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a68      	ldr	r2, [pc, #416]	@ (8005ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03b      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a66      	ldr	r2, [pc, #408]	@ (8005eac <HAL_DMA_Abort_IT+0x3b8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d036      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a65      	ldr	r2, [pc, #404]	@ (8005eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d031      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a63      	ldr	r2, [pc, #396]	@ (8005eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02c      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a62      	ldr	r2, [pc, #392]	@ (8005eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d027      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a60      	ldr	r2, [pc, #384]	@ (8005ebc <HAL_DMA_Abort_IT+0x3c8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5a      	ldr	r2, [pc, #360]	@ (8005ecc <HAL_DMA_Abort_IT+0x3d8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a59      	ldr	r2, [pc, #356]	@ (8005ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a57      	ldr	r2, [pc, #348]	@ (8005ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x290>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	@ (8005ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <HAL_DMA_Abort_IT+0x2a2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e007      	b.n	8005da6 <HAL_DMA_Abort_IT+0x2b2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a3c      	ldr	r2, [pc, #240]	@ (8005e9c <HAL_DMA_Abort_IT+0x3a8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d072      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d06d      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a39      	ldr	r2, [pc, #228]	@ (8005ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d068      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a37      	ldr	r2, [pc, #220]	@ (8005ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d063      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a36      	ldr	r2, [pc, #216]	@ (8005eac <HAL_DMA_Abort_IT+0x3b8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d05e      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a34      	ldr	r2, [pc, #208]	@ (8005eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d059      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a33      	ldr	r2, [pc, #204]	@ (8005eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d054      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a31      	ldr	r2, [pc, #196]	@ (8005eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04f      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a30      	ldr	r2, [pc, #192]	@ (8005ebc <HAL_DMA_Abort_IT+0x3c8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2a      	ldr	r2, [pc, #168]	@ (8005ecc <HAL_DMA_Abort_IT+0x3d8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a28      	ldr	r2, [pc, #160]	@ (8005ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a27      	ldr	r2, [pc, #156]	@ (8005ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a24      	ldr	r2, [pc, #144]	@ (8005edc <HAL_DMA_Abort_IT+0x3e8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <HAL_DMA_Abort_IT+0x3ec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	@ (8005ee4 <HAL_DMA_Abort_IT+0x3f0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_DMA_Abort_IT+0x3f4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1e      	ldr	r2, [pc, #120]	@ (8005eec <HAL_DMA_Abort_IT+0x3f8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <HAL_DMA_Abort_IT+0x3fc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef4 <HAL_DMA_Abort_IT+0x400>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x3a2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <HAL_DMA_Abort_IT+0x404>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d132      	bne.n	8005efc <HAL_DMA_Abort_IT+0x408>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e031      	b.n	8005efe <HAL_DMA_Abort_IT+0x40a>
 8005e9a:	bf00      	nop
 8005e9c:	40020010 	.word	0x40020010
 8005ea0:	40020028 	.word	0x40020028
 8005ea4:	40020040 	.word	0x40020040
 8005ea8:	40020058 	.word	0x40020058
 8005eac:	40020070 	.word	0x40020070
 8005eb0:	40020088 	.word	0x40020088
 8005eb4:	400200a0 	.word	0x400200a0
 8005eb8:	400200b8 	.word	0x400200b8
 8005ebc:	40020410 	.word	0x40020410
 8005ec0:	40020428 	.word	0x40020428
 8005ec4:	40020440 	.word	0x40020440
 8005ec8:	40020458 	.word	0x40020458
 8005ecc:	40020470 	.word	0x40020470
 8005ed0:	40020488 	.word	0x40020488
 8005ed4:	400204a0 	.word	0x400204a0
 8005ed8:	400204b8 	.word	0x400204b8
 8005edc:	58025408 	.word	0x58025408
 8005ee0:	5802541c 	.word	0x5802541c
 8005ee4:	58025430 	.word	0x58025430
 8005ee8:	58025444 	.word	0x58025444
 8005eec:	58025458 	.word	0x58025458
 8005ef0:	5802546c 	.word	0x5802546c
 8005ef4:	58025480 	.word	0x58025480
 8005ef8:	58025494 	.word	0x58025494
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	@ 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f8c:	4b67      	ldr	r3, [pc, #412]	@ (800612c <HAL_DMA_IRQHandler+0x1ac>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a67      	ldr	r2, [pc, #412]	@ (8006130 <HAL_DMA_IRQHandler+0x1b0>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a9b      	lsrs	r3, r3, #10
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8006134 <HAL_DMA_IRQHandler+0x1b4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8006138 <HAL_DMA_IRQHandler+0x1b8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	@ (800613c <HAL_DMA_IRQHandler+0x1bc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8006140 <HAL_DMA_IRQHandler+0x1c0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a59      	ldr	r2, [pc, #356]	@ (8006144 <HAL_DMA_IRQHandler+0x1c4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	@ (8006148 <HAL_DMA_IRQHandler+0x1c8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a56      	ldr	r2, [pc, #344]	@ (800614c <HAL_DMA_IRQHandler+0x1cc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a54      	ldr	r2, [pc, #336]	@ (8006150 <HAL_DMA_IRQHandler+0x1d0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a53      	ldr	r2, [pc, #332]	@ (8006154 <HAL_DMA_IRQHandler+0x1d4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a51      	ldr	r2, [pc, #324]	@ (8006158 <HAL_DMA_IRQHandler+0x1d8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a50      	ldr	r2, [pc, #320]	@ (800615c <HAL_DMA_IRQHandler+0x1dc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a4e      	ldr	r2, [pc, #312]	@ (8006160 <HAL_DMA_IRQHandler+0x1e0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4d      	ldr	r2, [pc, #308]	@ (8006164 <HAL_DMA_IRQHandler+0x1e4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a4b      	ldr	r2, [pc, #300]	@ (8006168 <HAL_DMA_IRQHandler+0x1e8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4a      	ldr	r2, [pc, #296]	@ (800616c <HAL_DMA_IRQHandler+0x1ec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a48      	ldr	r2, [pc, #288]	@ (8006170 <HAL_DMA_IRQHandler+0x1f0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_DMA_IRQHandler+0xd6>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <HAL_DMA_IRQHandler+0xd8>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 842b 	beq.w	80068b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2208      	movs	r2, #8
 8006068:	409a      	lsls	r2, r3
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80a2 	beq.w	80061b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2e      	ldr	r2, [pc, #184]	@ (8006134 <HAL_DMA_IRQHandler+0x1b4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <HAL_DMA_IRQHandler+0x1b8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2b      	ldr	r2, [pc, #172]	@ (800613c <HAL_DMA_IRQHandler+0x1bc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2a      	ldr	r2, [pc, #168]	@ (8006140 <HAL_DMA_IRQHandler+0x1c0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a28      	ldr	r2, [pc, #160]	@ (8006144 <HAL_DMA_IRQHandler+0x1c4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <HAL_DMA_IRQHandler+0x1c8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a25      	ldr	r2, [pc, #148]	@ (800614c <HAL_DMA_IRQHandler+0x1cc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <HAL_DMA_IRQHandler+0x1d0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a22      	ldr	r2, [pc, #136]	@ (8006154 <HAL_DMA_IRQHandler+0x1d4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	@ (8006158 <HAL_DMA_IRQHandler+0x1d8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <HAL_DMA_IRQHandler+0x1dc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006160 <HAL_DMA_IRQHandler+0x1e0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006164 <HAL_DMA_IRQHandler+0x1e4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006168 <HAL_DMA_IRQHandler+0x1e8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	@ (800616c <HAL_DMA_IRQHandler+0x1ec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	@ (8006170 <HAL_DMA_IRQHandler+0x1f0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d12f      	bne.n	8006174 <HAL_DMA_IRQHandler+0x1f4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e02e      	b.n	8006188 <HAL_DMA_IRQHandler+0x208>
 800612a:	bf00      	nop
 800612c:	24000000 	.word	0x24000000
 8006130:	1b4e81b5 	.word	0x1b4e81b5
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2208      	movs	r2, #8
 80061a6:	409a      	lsls	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d06e      	beq.n	80062ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a69      	ldr	r2, [pc, #420]	@ (8006378 <HAL_DMA_IRQHandler+0x3f8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a67      	ldr	r2, [pc, #412]	@ (800637c <HAL_DMA_IRQHandler+0x3fc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a66      	ldr	r2, [pc, #408]	@ (8006380 <HAL_DMA_IRQHandler+0x400>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a64      	ldr	r2, [pc, #400]	@ (8006384 <HAL_DMA_IRQHandler+0x404>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a63      	ldr	r2, [pc, #396]	@ (8006388 <HAL_DMA_IRQHandler+0x408>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a61      	ldr	r2, [pc, #388]	@ (800638c <HAL_DMA_IRQHandler+0x40c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a60      	ldr	r2, [pc, #384]	@ (8006390 <HAL_DMA_IRQHandler+0x410>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5e      	ldr	r2, [pc, #376]	@ (8006394 <HAL_DMA_IRQHandler+0x414>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a5d      	ldr	r2, [pc, #372]	@ (8006398 <HAL_DMA_IRQHandler+0x418>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a5b      	ldr	r2, [pc, #364]	@ (800639c <HAL_DMA_IRQHandler+0x41c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5a      	ldr	r2, [pc, #360]	@ (80063a0 <HAL_DMA_IRQHandler+0x420>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a58      	ldr	r2, [pc, #352]	@ (80063a4 <HAL_DMA_IRQHandler+0x424>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a57      	ldr	r2, [pc, #348]	@ (80063a8 <HAL_DMA_IRQHandler+0x428>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a55      	ldr	r2, [pc, #340]	@ (80063ac <HAL_DMA_IRQHandler+0x42c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a54      	ldr	r2, [pc, #336]	@ (80063b0 <HAL_DMA_IRQHandler+0x430>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a52      	ldr	r2, [pc, #328]	@ (80063b4 <HAL_DMA_IRQHandler+0x434>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10a      	bne.n	8006284 <HAL_DMA_IRQHandler+0x304>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e003      	b.n	800628c <HAL_DMA_IRQHandler+0x30c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2201      	movs	r2, #1
 800629a:	409a      	lsls	r2, r3
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a4:	f043 0202 	orr.w	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2204      	movs	r2, #4
 80062b6:	409a      	lsls	r2, r3
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 808f 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006378 <HAL_DMA_IRQHandler+0x3f8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2a      	ldr	r2, [pc, #168]	@ (800637c <HAL_DMA_IRQHandler+0x3fc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a29      	ldr	r2, [pc, #164]	@ (8006380 <HAL_DMA_IRQHandler+0x400>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <HAL_DMA_IRQHandler+0x404>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a26      	ldr	r2, [pc, #152]	@ (8006388 <HAL_DMA_IRQHandler+0x408>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a24      	ldr	r2, [pc, #144]	@ (800638c <HAL_DMA_IRQHandler+0x40c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a23      	ldr	r2, [pc, #140]	@ (8006390 <HAL_DMA_IRQHandler+0x410>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <HAL_DMA_IRQHandler+0x414>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a20      	ldr	r2, [pc, #128]	@ (8006398 <HAL_DMA_IRQHandler+0x418>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1e      	ldr	r2, [pc, #120]	@ (800639c <HAL_DMA_IRQHandler+0x41c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1d      	ldr	r2, [pc, #116]	@ (80063a0 <HAL_DMA_IRQHandler+0x420>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	@ (80063a4 <HAL_DMA_IRQHandler+0x424>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	@ (80063a8 <HAL_DMA_IRQHandler+0x428>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <HAL_DMA_IRQHandler+0x42c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <HAL_DMA_IRQHandler+0x430>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	@ (80063b4 <HAL_DMA_IRQHandler+0x434>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d12a      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x438>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e023      	b.n	80063c0 <HAL_DMA_IRQHandler+0x440>
 8006378:	40020010 	.word	0x40020010
 800637c:	40020028 	.word	0x40020028
 8006380:	40020040 	.word	0x40020040
 8006384:	40020058 	.word	0x40020058
 8006388:	40020070 	.word	0x40020070
 800638c:	40020088 	.word	0x40020088
 8006390:	400200a0 	.word	0x400200a0
 8006394:	400200b8 	.word	0x400200b8
 8006398:	40020410 	.word	0x40020410
 800639c:	40020428 	.word	0x40020428
 80063a0:	40020440 	.word	0x40020440
 80063a4:	40020458 	.word	0x40020458
 80063a8:	40020470 	.word	0x40020470
 80063ac:	40020488 	.word	0x40020488
 80063b0:	400204a0 	.word	0x400204a0
 80063b4:	400204b8 	.word	0x400204b8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2204      	movs	r2, #4
 80063ce:	409a      	lsls	r2, r3
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2210      	movs	r2, #16
 80063ea:	409a      	lsls	r2, r3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a6 	beq.w	8006542 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a85      	ldr	r2, [pc, #532]	@ (8006610 <HAL_DMA_IRQHandler+0x690>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a83      	ldr	r2, [pc, #524]	@ (8006614 <HAL_DMA_IRQHandler+0x694>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a82      	ldr	r2, [pc, #520]	@ (8006618 <HAL_DMA_IRQHandler+0x698>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a80      	ldr	r2, [pc, #512]	@ (800661c <HAL_DMA_IRQHandler+0x69c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a7f      	ldr	r2, [pc, #508]	@ (8006620 <HAL_DMA_IRQHandler+0x6a0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a7d      	ldr	r2, [pc, #500]	@ (8006624 <HAL_DMA_IRQHandler+0x6a4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7c      	ldr	r2, [pc, #496]	@ (8006628 <HAL_DMA_IRQHandler+0x6a8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a7a      	ldr	r2, [pc, #488]	@ (800662c <HAL_DMA_IRQHandler+0x6ac>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a79      	ldr	r2, [pc, #484]	@ (8006630 <HAL_DMA_IRQHandler+0x6b0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a77      	ldr	r2, [pc, #476]	@ (8006634 <HAL_DMA_IRQHandler+0x6b4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a76      	ldr	r2, [pc, #472]	@ (8006638 <HAL_DMA_IRQHandler+0x6b8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a74      	ldr	r2, [pc, #464]	@ (800663c <HAL_DMA_IRQHandler+0x6bc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a73      	ldr	r2, [pc, #460]	@ (8006640 <HAL_DMA_IRQHandler+0x6c0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a71      	ldr	r2, [pc, #452]	@ (8006644 <HAL_DMA_IRQHandler+0x6c4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a70      	ldr	r2, [pc, #448]	@ (8006648 <HAL_DMA_IRQHandler+0x6c8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a6e      	ldr	r2, [pc, #440]	@ (800664c <HAL_DMA_IRQHandler+0x6cc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d10a      	bne.n	80064ac <HAL_DMA_IRQHandler+0x52c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e009      	b.n	80064c0 <HAL_DMA_IRQHandler+0x540>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d03e      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2210      	movs	r2, #16
 80064ce:	409a      	lsls	r2, r3
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d108      	bne.n	8006502 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d024      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
 8006500:	e01f      	b.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01b      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
 8006512:	e016      	b.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0208 	bic.w	r2, r2, #8
 8006530:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2220      	movs	r2, #32
 800654c:	409a      	lsls	r2, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8110 	beq.w	8006778 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2c      	ldr	r2, [pc, #176]	@ (8006610 <HAL_DMA_IRQHandler+0x690>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d04a      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_DMA_IRQHandler+0x694>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d045      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a29      	ldr	r2, [pc, #164]	@ (8006618 <HAL_DMA_IRQHandler+0x698>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d040      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a28      	ldr	r2, [pc, #160]	@ (800661c <HAL_DMA_IRQHandler+0x69c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d03b      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a26      	ldr	r2, [pc, #152]	@ (8006620 <HAL_DMA_IRQHandler+0x6a0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d036      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a25      	ldr	r2, [pc, #148]	@ (8006624 <HAL_DMA_IRQHandler+0x6a4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d031      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a23      	ldr	r2, [pc, #140]	@ (8006628 <HAL_DMA_IRQHandler+0x6a8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d02c      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a22      	ldr	r2, [pc, #136]	@ (800662c <HAL_DMA_IRQHandler+0x6ac>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d027      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a20      	ldr	r2, [pc, #128]	@ (8006630 <HAL_DMA_IRQHandler+0x6b0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006634 <HAL_DMA_IRQHandler+0x6b4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d01d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006638 <HAL_DMA_IRQHandler+0x6b8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1c      	ldr	r2, [pc, #112]	@ (800663c <HAL_DMA_IRQHandler+0x6bc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <HAL_DMA_IRQHandler+0x6c0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <HAL_DMA_IRQHandler+0x6c4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <HAL_DMA_IRQHandler+0x6c8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a16      	ldr	r2, [pc, #88]	@ (800664c <HAL_DMA_IRQHandler+0x6cc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d12b      	bne.n	8006650 <HAL_DMA_IRQHandler+0x6d0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e02a      	b.n	8006664 <HAL_DMA_IRQHandler+0x6e4>
 800660e:	bf00      	nop
 8006610:	40020010 	.word	0x40020010
 8006614:	40020028 	.word	0x40020028
 8006618:	40020040 	.word	0x40020040
 800661c:	40020058 	.word	0x40020058
 8006620:	40020070 	.word	0x40020070
 8006624:	40020088 	.word	0x40020088
 8006628:	400200a0 	.word	0x400200a0
 800662c:	400200b8 	.word	0x400200b8
 8006630:	40020410 	.word	0x40020410
 8006634:	40020428 	.word	0x40020428
 8006638:	40020440 	.word	0x40020440
 800663c:	40020458 	.word	0x40020458
 8006640:	40020470 	.word	0x40020470
 8006644:	40020488 	.word	0x40020488
 8006648:	400204a0 	.word	0x400204a0
 800664c:	400204b8 	.word	0x400204b8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8087 	beq.w	8006778 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2220      	movs	r2, #32
 8006674:	409a      	lsls	r2, r3
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b04      	cmp	r3, #4
 8006684:	d139      	bne.n	80066fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0216 	bic.w	r2, r2, #22
 8006694:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_DMA_IRQHandler+0x736>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0208 	bic.w	r2, r2, #8
 80066c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	223f      	movs	r2, #63	@ 0x3f
 80066d0:	409a      	lsls	r2, r3
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 834a 	beq.w	8006d84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
          }
          return;
 80066f8:	e344      	b.n	8006d84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d018      	beq.n	800673a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02c      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
 8006726:	e027      	b.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d023      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
 8006738:	e01e      	b.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0210 	bic.w	r2, r2, #16
 8006756:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8306 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8088 	beq.w	80068a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2204      	movs	r2, #4
 8006794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a7a      	ldr	r2, [pc, #488]	@ (8006988 <HAL_DMA_IRQHandler+0xa08>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d04a      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a79      	ldr	r2, [pc, #484]	@ (800698c <HAL_DMA_IRQHandler+0xa0c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d045      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a77      	ldr	r2, [pc, #476]	@ (8006990 <HAL_DMA_IRQHandler+0xa10>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d040      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a76      	ldr	r2, [pc, #472]	@ (8006994 <HAL_DMA_IRQHandler+0xa14>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d03b      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a74      	ldr	r2, [pc, #464]	@ (8006998 <HAL_DMA_IRQHandler+0xa18>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d036      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	@ (800699c <HAL_DMA_IRQHandler+0xa1c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d031      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a71      	ldr	r2, [pc, #452]	@ (80069a0 <HAL_DMA_IRQHandler+0xa20>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d02c      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a70      	ldr	r2, [pc, #448]	@ (80069a4 <HAL_DMA_IRQHandler+0xa24>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d027      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6e      	ldr	r2, [pc, #440]	@ (80069a8 <HAL_DMA_IRQHandler+0xa28>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6d      	ldr	r2, [pc, #436]	@ (80069ac <HAL_DMA_IRQHandler+0xa2c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d01d      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6b      	ldr	r2, [pc, #428]	@ (80069b0 <HAL_DMA_IRQHandler+0xa30>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6a      	ldr	r2, [pc, #424]	@ (80069b4 <HAL_DMA_IRQHandler+0xa34>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a68      	ldr	r2, [pc, #416]	@ (80069b8 <HAL_DMA_IRQHandler+0xa38>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a67      	ldr	r2, [pc, #412]	@ (80069bc <HAL_DMA_IRQHandler+0xa3c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a65      	ldr	r2, [pc, #404]	@ (80069c0 <HAL_DMA_IRQHandler+0xa40>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a64      	ldr	r2, [pc, #400]	@ (80069c4 <HAL_DMA_IRQHandler+0xa44>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d108      	bne.n	800684a <HAL_DMA_IRQHandler+0x8ca>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e007      	b.n	800685a <HAL_DMA_IRQHandler+0x8da>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0201 	bic.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d307      	bcc.n	8006876 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f2      	bne.n	800685a <HAL_DMA_IRQHandler+0x8da>
 8006874:	e000      	b.n	8006878 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006876:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2203      	movs	r2, #3
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800688e:	e003      	b.n	8006898 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8272 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	e26c      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a43      	ldr	r2, [pc, #268]	@ (80069c8 <HAL_DMA_IRQHandler+0xa48>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a42      	ldr	r2, [pc, #264]	@ (80069cc <HAL_DMA_IRQHandler+0xa4c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a40      	ldr	r2, [pc, #256]	@ (80069d0 <HAL_DMA_IRQHandler+0xa50>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	@ (80069d4 <HAL_DMA_IRQHandler+0xa54>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3d      	ldr	r2, [pc, #244]	@ (80069d8 <HAL_DMA_IRQHandler+0xa58>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3c      	ldr	r2, [pc, #240]	@ (80069dc <HAL_DMA_IRQHandler+0xa5c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3a      	ldr	r2, [pc, #232]	@ (80069e0 <HAL_DMA_IRQHandler+0xa60>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a39      	ldr	r2, [pc, #228]	@ (80069e4 <HAL_DMA_IRQHandler+0xa64>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_DMA_IRQHandler+0x988>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_DMA_IRQHandler+0x98a>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 823f 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2204      	movs	r2, #4
 8006922:	409a      	lsls	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80cd 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xb48>
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80c7 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2204      	movs	r2, #4
 8006944:	409a      	lsls	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d049      	beq.n	80069e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8210 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006970:	e20a      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8206 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006984:	e200      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d160      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7f      	ldr	r2, [pc, #508]	@ (8006bf4 <HAL_DMA_IRQHandler+0xc74>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04a      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a7d      	ldr	r2, [pc, #500]	@ (8006bf8 <HAL_DMA_IRQHandler+0xc78>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d045      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8006bfc <HAL_DMA_IRQHandler+0xc7c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d040      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7a      	ldr	r2, [pc, #488]	@ (8006c00 <HAL_DMA_IRQHandler+0xc80>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d03b      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a79      	ldr	r2, [pc, #484]	@ (8006c04 <HAL_DMA_IRQHandler+0xc84>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d036      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a77      	ldr	r2, [pc, #476]	@ (8006c08 <HAL_DMA_IRQHandler+0xc88>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d031      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a76      	ldr	r2, [pc, #472]	@ (8006c0c <HAL_DMA_IRQHandler+0xc8c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d02c      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a74      	ldr	r2, [pc, #464]	@ (8006c10 <HAL_DMA_IRQHandler+0xc90>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d027      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a73      	ldr	r2, [pc, #460]	@ (8006c14 <HAL_DMA_IRQHandler+0xc94>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d022      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a71      	ldr	r2, [pc, #452]	@ (8006c18 <HAL_DMA_IRQHandler+0xc98>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01d      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a70      	ldr	r2, [pc, #448]	@ (8006c1c <HAL_DMA_IRQHandler+0xc9c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d018      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6e      	ldr	r2, [pc, #440]	@ (8006c20 <HAL_DMA_IRQHandler+0xca0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006c24 <HAL_DMA_IRQHandler+0xca4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6b      	ldr	r2, [pc, #428]	@ (8006c28 <HAL_DMA_IRQHandler+0xca8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a6a      	ldr	r2, [pc, #424]	@ (8006c2c <HAL_DMA_IRQHandler+0xcac>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a68      	ldr	r2, [pc, #416]	@ (8006c30 <HAL_DMA_IRQHandler+0xcb0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0xb24>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0208 	bic.w	r2, r2, #8
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e007      	b.n	8006ab4 <HAL_DMA_IRQHandler+0xb34>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0204 	bic.w	r2, r2, #4
 8006ab2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8165 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac6:	e15f      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80c5 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xce8>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80bf 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2202      	movs	r2, #2
 8006af4:	409a      	lsls	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d018      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 813a 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	e134      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8130 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b34:	e12a      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8089 	bne.w	8006c54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2b      	ldr	r2, [pc, #172]	@ (8006bf4 <HAL_DMA_IRQHandler+0xc74>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d04a      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a29      	ldr	r2, [pc, #164]	@ (8006bf8 <HAL_DMA_IRQHandler+0xc78>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d045      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a28      	ldr	r2, [pc, #160]	@ (8006bfc <HAL_DMA_IRQHandler+0xc7c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d040      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a26      	ldr	r2, [pc, #152]	@ (8006c00 <HAL_DMA_IRQHandler+0xc80>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d03b      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a25      	ldr	r2, [pc, #148]	@ (8006c04 <HAL_DMA_IRQHandler+0xc84>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d036      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a23      	ldr	r2, [pc, #140]	@ (8006c08 <HAL_DMA_IRQHandler+0xc88>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d031      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a22      	ldr	r2, [pc, #136]	@ (8006c0c <HAL_DMA_IRQHandler+0xc8c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d02c      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	@ (8006c10 <HAL_DMA_IRQHandler+0xc90>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d027      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	@ (8006c14 <HAL_DMA_IRQHandler+0xc94>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <HAL_DMA_IRQHandler+0xc98>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	@ (8006c1c <HAL_DMA_IRQHandler+0xc9c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c20 <HAL_DMA_IRQHandler+0xca0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a19      	ldr	r2, [pc, #100]	@ (8006c24 <HAL_DMA_IRQHandler+0xca4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	@ (8006c28 <HAL_DMA_IRQHandler+0xca8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a16      	ldr	r2, [pc, #88]	@ (8006c2c <HAL_DMA_IRQHandler+0xcac>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	@ (8006c30 <HAL_DMA_IRQHandler+0xcb0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d128      	bne.n	8006c34 <HAL_DMA_IRQHandler+0xcb4>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0214 	bic.w	r2, r2, #20
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e027      	b.n	8006c44 <HAL_DMA_IRQHandler+0xcc4>
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 020a 	bic.w	r2, r2, #10
 8006c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8097 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c66:	e091      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2208      	movs	r2, #8
 8006c72:	409a      	lsls	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8088 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8082 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a41      	ldr	r2, [pc, #260]	@ (8006d94 <HAL_DMA_IRQHandler+0xe14>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3f      	ldr	r2, [pc, #252]	@ (8006d98 <HAL_DMA_IRQHandler+0xe18>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8006d9c <HAL_DMA_IRQHandler+0xe1c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	@ (8006da0 <HAL_DMA_IRQHandler+0xe20>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8006da4 <HAL_DMA_IRQHandler+0xe24>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a39      	ldr	r2, [pc, #228]	@ (8006da8 <HAL_DMA_IRQHandler+0xe28>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a38      	ldr	r2, [pc, #224]	@ (8006dac <HAL_DMA_IRQHandler+0xe2c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a36      	ldr	r2, [pc, #216]	@ (8006db0 <HAL_DMA_IRQHandler+0xe30>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a35      	ldr	r2, [pc, #212]	@ (8006db4 <HAL_DMA_IRQHandler+0xe34>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a33      	ldr	r2, [pc, #204]	@ (8006db8 <HAL_DMA_IRQHandler+0xe38>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a32      	ldr	r2, [pc, #200]	@ (8006dbc <HAL_DMA_IRQHandler+0xe3c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	@ (8006dc0 <HAL_DMA_IRQHandler+0xe40>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc4 <HAL_DMA_IRQHandler+0xe44>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc8 <HAL_DMA_IRQHandler+0xe48>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dcc <HAL_DMA_IRQHandler+0xe4c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd0 <HAL_DMA_IRQHandler+0xe50>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xdbc>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 021c 	bic.w	r2, r2, #28
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <HAL_DMA_IRQHandler+0xdcc>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 020e 	bic.w	r2, r2, #14
 8006d4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2201      	movs	r2, #1
 8006d56:	409a      	lsls	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	e004      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d8e:	3728      	adds	r7, #40	@ 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8

08006dd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a42      	ldr	r2, [pc, #264]	@ (8006eec <DMA_CalcBaseAndBitshift+0x118>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04a      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a41      	ldr	r2, [pc, #260]	@ (8006ef0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d045      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ef4 <DMA_CalcBaseAndBitshift+0x120>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d040      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef8 <DMA_CalcBaseAndBitshift+0x124>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d03b      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3c      	ldr	r2, [pc, #240]	@ (8006efc <DMA_CalcBaseAndBitshift+0x128>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d036      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3b      	ldr	r2, [pc, #236]	@ (8006f00 <DMA_CalcBaseAndBitshift+0x12c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d031      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a39      	ldr	r2, [pc, #228]	@ (8006f04 <DMA_CalcBaseAndBitshift+0x130>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02c      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a38      	ldr	r2, [pc, #224]	@ (8006f08 <DMA_CalcBaseAndBitshift+0x134>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d027      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a36      	ldr	r2, [pc, #216]	@ (8006f0c <DMA_CalcBaseAndBitshift+0x138>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a35      	ldr	r2, [pc, #212]	@ (8006f10 <DMA_CalcBaseAndBitshift+0x13c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a33      	ldr	r2, [pc, #204]	@ (8006f14 <DMA_CalcBaseAndBitshift+0x140>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a32      	ldr	r2, [pc, #200]	@ (8006f18 <DMA_CalcBaseAndBitshift+0x144>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a30      	ldr	r2, [pc, #192]	@ (8006f1c <DMA_CalcBaseAndBitshift+0x148>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2f      	ldr	r2, [pc, #188]	@ (8006f20 <DMA_CalcBaseAndBitshift+0x14c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f24 <DMA_CalcBaseAndBitshift+0x150>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xa8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	@ (8006f28 <DMA_CalcBaseAndBitshift+0x154>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <DMA_CalcBaseAndBitshift+0xac>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <DMA_CalcBaseAndBitshift+0xae>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d024      	beq.n	8006ed0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	3b10      	subs	r3, #16
 8006e8e:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <DMA_CalcBaseAndBitshift+0x158>)
 8006e90:	fba2 2303 	umull	r2, r3, r2, r3
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	4a24      	ldr	r2, [pc, #144]	@ (8006f30 <DMA_CalcBaseAndBitshift+0x15c>)
 8006ea0:	5cd3      	ldrb	r3, [r2, r3]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d908      	bls.n	8006ec0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <DMA_CalcBaseAndBitshift+0x160>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	1d1a      	adds	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ebe:	e00d      	b.n	8006edc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f34 <DMA_CalcBaseAndBitshift+0x160>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ece:	e005      	b.n	8006edc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	40020010 	.word	0x40020010
 8006ef0:	40020028 	.word	0x40020028
 8006ef4:	40020040 	.word	0x40020040
 8006ef8:	40020058 	.word	0x40020058
 8006efc:	40020070 	.word	0x40020070
 8006f00:	40020088 	.word	0x40020088
 8006f04:	400200a0 	.word	0x400200a0
 8006f08:	400200b8 	.word	0x400200b8
 8006f0c:	40020410 	.word	0x40020410
 8006f10:	40020428 	.word	0x40020428
 8006f14:	40020440 	.word	0x40020440
 8006f18:	40020458 	.word	0x40020458
 8006f1c:	40020470 	.word	0x40020470
 8006f20:	40020488 	.word	0x40020488
 8006f24:	400204a0 	.word	0x400204a0
 8006f28:	400204b8 	.word	0x400204b8
 8006f2c:	aaaaaaab 	.word	0xaaaaaaab
 8006f30:	08014824 	.word	0x08014824
 8006f34:	fffffc00 	.word	0xfffffc00

08006f38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d120      	bne.n	8006f8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d858      	bhi.n	8007006 <DMA_CheckFifoParam+0xce>
 8006f54:	a201      	add	r2, pc, #4	@ (adr r2, 8006f5c <DMA_CheckFifoParam+0x24>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f7f 	.word	0x08006f7f
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08007007 	.word	0x08007007
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d048      	beq.n	800700a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f7c:	e045      	b.n	800700a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f86:	d142      	bne.n	800700e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f8c:	e03f      	b.n	800700e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f96:	d123      	bne.n	8006fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d838      	bhi.n	8007012 <DMA_CheckFifoParam+0xda>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <DMA_CheckFifoParam+0x70>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fbf 	.word	0x08006fbf
 8006fb0:	08006fb9 	.word	0x08006fb9
 8006fb4:	08006fd1 	.word	0x08006fd1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
        break;
 8006fbc:	e030      	b.n	8007020 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d025      	beq.n	8007016 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fce:	e022      	b.n	8007016 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006fd8:	d11f      	bne.n	800701a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fde:	e01c      	b.n	800701a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d902      	bls.n	8006fee <DMA_CheckFifoParam+0xb6>
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d003      	beq.n	8006ff4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006fec:	e018      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ff2:	e015      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	73fb      	strb	r3, [r7, #15]
    break;
 8007004:	e00b      	b.n	800701e <DMA_CheckFifoParam+0xe6>
        break;
 8007006:	bf00      	nop
 8007008:	e00a      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        break;
 800700a:	bf00      	nop
 800700c:	e008      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        break;
 800700e:	bf00      	nop
 8007010:	e006      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        break;
 8007012:	bf00      	nop
 8007014:	e004      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        break;
 8007016:	bf00      	nop
 8007018:	e002      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
        break;
 800701a:	bf00      	nop
 800701c:	e000      	b.n	8007020 <DMA_CheckFifoParam+0xe8>
    break;
 800701e:	bf00      	nop
    }
  }

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop

08007030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a38      	ldr	r2, [pc, #224]	@ (8007124 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a36      	ldr	r2, [pc, #216]	@ (8007128 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a35      	ldr	r2, [pc, #212]	@ (800712c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d018      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a33      	ldr	r2, [pc, #204]	@ (8007130 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a32      	ldr	r2, [pc, #200]	@ (8007134 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a30      	ldr	r2, [pc, #192]	@ (8007138 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2f      	ldr	r2, [pc, #188]	@ (800713c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2d      	ldr	r2, [pc, #180]	@ (8007140 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01a      	beq.n	80070ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	3b08      	subs	r3, #8
 80070a0:	4a28      	ldr	r2, [pc, #160]	@ (8007144 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4b26      	ldr	r3, [pc, #152]	@ (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a24      	ldr	r2, [pc, #144]	@ (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80070bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80070cc:	e024      	b.n	8007118 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	3b10      	subs	r3, #16
 80070d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d806      	bhi.n	80070f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d902      	bls.n	80070f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3308      	adds	r3, #8
 80070f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4b18      	ldr	r3, [pc, #96]	@ (800715c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2201      	movs	r2, #1
 8007112:	409a      	lsls	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	58025408 	.word	0x58025408
 8007128:	5802541c 	.word	0x5802541c
 800712c:	58025430 	.word	0x58025430
 8007130:	58025444 	.word	0x58025444
 8007134:	58025458 	.word	0x58025458
 8007138:	5802546c 	.word	0x5802546c
 800713c:	58025480 	.word	0x58025480
 8007140:	58025494 	.word	0x58025494
 8007144:	cccccccd 	.word	0xcccccccd
 8007148:	16009600 	.word	0x16009600
 800714c:	58025880 	.word	0x58025880
 8007150:	aaaaaaab 	.word	0xaaaaaaab
 8007154:	400204b8 	.word	0x400204b8
 8007158:	4002040f 	.word	0x4002040f
 800715c:	10008200 	.word	0x10008200
 8007160:	40020880 	.word	0x40020880

08007164 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04a      	beq.n	8007210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d847      	bhi.n	8007210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a25      	ldr	r2, [pc, #148]	@ (800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d022      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a24      	ldr	r2, [pc, #144]	@ (8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d01d      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a22      	ldr	r2, [pc, #136]	@ (8007224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d018      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a21      	ldr	r2, [pc, #132]	@ (8007228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1f      	ldr	r2, [pc, #124]	@ (800722c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00e      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d009      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d101      	bne.n	80071d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4b17      	ldr	r3, [pc, #92]	@ (800723c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80071ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80071ee:	e009      	b.n	8007204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4b14      	ldr	r3, [pc, #80]	@ (8007244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007202:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3b01      	subs	r3, #1
 8007208:	2201      	movs	r2, #1
 800720a:	409a      	lsls	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	58025408 	.word	0x58025408
 8007220:	5802541c 	.word	0x5802541c
 8007224:	58025430 	.word	0x58025430
 8007228:	58025444 	.word	0x58025444
 800722c:	58025458 	.word	0x58025458
 8007230:	5802546c 	.word	0x5802546c
 8007234:	58025480 	.word	0x58025480
 8007238:	58025494 	.word	0x58025494
 800723c:	1600963f 	.word	0x1600963f
 8007240:	58025940 	.word	0x58025940
 8007244:	1000823f 	.word	0x1000823f
 8007248:	40020940 	.word	0x40020940

0800724c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	@ 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800725a:	4b86      	ldr	r3, [pc, #536]	@ (8007474 <HAL_GPIO_Init+0x228>)
 800725c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800725e:	e18c      	b.n	800757a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	2101      	movs	r1, #1
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	fa01 f303 	lsl.w	r3, r1, r3
 800726c:	4013      	ands	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 817e 	beq.w	8007574 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d005      	beq.n	8007290 <HAL_GPIO_Init+0x44>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d130      	bne.n	80072f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	2203      	movs	r2, #3
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4013      	ands	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072c6:	2201      	movs	r2, #1
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4013      	ands	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	f003 0201 	and.w	r2, r3, #1
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d017      	beq.n	800732e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	2203      	movs	r2, #3
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43db      	mvns	r3, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4013      	ands	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4313      	orrs	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d123      	bne.n	8007382 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	08da      	lsrs	r2, r3, #3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3208      	adds	r2, #8
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	220f      	movs	r2, #15
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43db      	mvns	r3, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4013      	ands	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	08da      	lsrs	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3208      	adds	r2, #8
 800737c:	69b9      	ldr	r1, [r7, #24]
 800737e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	2203      	movs	r2, #3
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4013      	ands	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 0203 	and.w	r2, r3, #3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80d8 	beq.w	8007574 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007478 <HAL_GPIO_Init+0x22c>)
 80073c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073ca:	4a2b      	ldr	r2, [pc, #172]	@ (8007478 <HAL_GPIO_Init+0x22c>)
 80073cc:	f043 0302 	orr.w	r3, r3, #2
 80073d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80073d4:	4b28      	ldr	r3, [pc, #160]	@ (8007478 <HAL_GPIO_Init+0x22c>)
 80073d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073e2:	4a26      	ldr	r2, [pc, #152]	@ (800747c <HAL_GPIO_Init+0x230>)
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	089b      	lsrs	r3, r3, #2
 80073e8:	3302      	adds	r3, #2
 80073ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	220f      	movs	r2, #15
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <HAL_GPIO_Init+0x234>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d04a      	beq.n	80074a4 <HAL_GPIO_Init+0x258>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1c      	ldr	r2, [pc, #112]	@ (8007484 <HAL_GPIO_Init+0x238>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02b      	beq.n	800746e <HAL_GPIO_Init+0x222>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1b      	ldr	r2, [pc, #108]	@ (8007488 <HAL_GPIO_Init+0x23c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d025      	beq.n	800746a <HAL_GPIO_Init+0x21e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1a      	ldr	r2, [pc, #104]	@ (800748c <HAL_GPIO_Init+0x240>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <HAL_GPIO_Init+0x21a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a19      	ldr	r2, [pc, #100]	@ (8007490 <HAL_GPIO_Init+0x244>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d019      	beq.n	8007462 <HAL_GPIO_Init+0x216>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a18      	ldr	r2, [pc, #96]	@ (8007494 <HAL_GPIO_Init+0x248>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_GPIO_Init+0x212>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a17      	ldr	r2, [pc, #92]	@ (8007498 <HAL_GPIO_Init+0x24c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00d      	beq.n	800745a <HAL_GPIO_Init+0x20e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a16      	ldr	r2, [pc, #88]	@ (800749c <HAL_GPIO_Init+0x250>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <HAL_GPIO_Init+0x20a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a15      	ldr	r2, [pc, #84]	@ (80074a0 <HAL_GPIO_Init+0x254>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_GPIO_Init+0x206>
 800744e:	2309      	movs	r3, #9
 8007450:	e029      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 8007452:	230a      	movs	r3, #10
 8007454:	e027      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 8007456:	2307      	movs	r3, #7
 8007458:	e025      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 800745a:	2306      	movs	r3, #6
 800745c:	e023      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 800745e:	2305      	movs	r3, #5
 8007460:	e021      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 8007462:	2304      	movs	r3, #4
 8007464:	e01f      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 8007466:	2303      	movs	r3, #3
 8007468:	e01d      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 800746a:	2302      	movs	r3, #2
 800746c:	e01b      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 800746e:	2301      	movs	r3, #1
 8007470:	e019      	b.n	80074a6 <HAL_GPIO_Init+0x25a>
 8007472:	bf00      	nop
 8007474:	58000080 	.word	0x58000080
 8007478:	58024400 	.word	0x58024400
 800747c:	58000400 	.word	0x58000400
 8007480:	58020000 	.word	0x58020000
 8007484:	58020400 	.word	0x58020400
 8007488:	58020800 	.word	0x58020800
 800748c:	58020c00 	.word	0x58020c00
 8007490:	58021000 	.word	0x58021000
 8007494:	58021400 	.word	0x58021400
 8007498:	58021800 	.word	0x58021800
 800749c:	58021c00 	.word	0x58021c00
 80074a0:	58022400 	.word	0x58022400
 80074a4:	2300      	movs	r3, #0
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	f002 0203 	and.w	r2, r2, #3
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	4093      	lsls	r3, r2
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074b6:	4938      	ldr	r1, [pc, #224]	@ (8007598 <HAL_GPIO_Init+0x34c>)
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	3302      	adds	r3, #2
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	43db      	mvns	r3, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4013      	ands	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	43db      	mvns	r3, r3
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	4013      	ands	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	43db      	mvns	r3, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4013      	ands	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	f47f ae6b 	bne.w	8007260 <HAL_GPIO_Init+0x14>
  }
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	3724      	adds	r7, #36	@ 0x24
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	58000400 	.word	0x58000400

0800759c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e08b      	b.n	80076c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7f9 fcb8 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	@ 0x24
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d107      	bne.n	8007616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	e006      	b.n	8007624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d108      	bne.n	800763e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800763a:	605a      	str	r2, [r3, #4]
 800763c:	e007      	b.n	800764e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800764c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6859      	ldr	r1, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <HAL_I2C_Init+0x134>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800766c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69d9      	ldr	r1, [r3, #28]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	02008000 	.word	0x02008000

080076d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d138      	bne.n	800775c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e032      	b.n	800775e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2224      	movs	r2, #36	@ 0x24
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	d139      	bne.n	80077f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800778a:	2302      	movs	r3, #2
 800778c:	e033      	b.n	80077f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2224      	movs	r2, #36	@ 0x24
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e000      	b.n	80077f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077f4:	2302      	movs	r3, #2
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e043      	b.n	800789c <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800781c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007826:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6892      	ldr	r2, [r2, #8]
 800783a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800783c:	f7fb f8d0 	bl	80029e0 <HAL_GetTick>
 8007840:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007842:	e011      	b.n	8007868 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007844:	f7fb f8cc 	bl	80029e0 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	f641 0201 	movw	r2, #6145	@ 0x1801
 8007852:	4293      	cmp	r3, r2
 8007854:	d908      	bls.n	8007868 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e019      	b.n	800789c <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	429a      	cmp	r2, r3
 8007882:	d005      	beq.n	8007890 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	68d2      	ldr	r2, [r2, #12]
 800788c:	611a      	str	r2, [r3, #16]
 800788e:	e004      	b.n	800789a <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0fe      	b.n	8007ab4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f00b ff30 	bl	8013730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2203      	movs	r2, #3
 80078d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f008 fac8 	bl	800fe72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7c1a      	ldrb	r2, [r3, #16]
 80078ea:	f88d 2000 	strb.w	r2, [sp]
 80078ee:	3304      	adds	r3, #4
 80078f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078f2:	f008 f999 	bl	800fc28 <USB_CoreInit>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0d5      	b.n	8007ab4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f008 fac0 	bl	800fe94 <USB_SetCurrentMode>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0c6      	b.n	8007ab4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
 800792a:	e04a      	b.n	80079c2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800792c:	7bfa      	ldrb	r2, [r7, #15]
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	440b      	add	r3, r1
 800793a:	3315      	adds	r3, #21
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007940:	7bfa      	ldrb	r2, [r7, #15]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	3314      	adds	r3, #20
 8007950:	7bfa      	ldrb	r2, [r7, #15]
 8007952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	b298      	uxth	r0, r3
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	332e      	adds	r3, #46	@ 0x2e
 8007968:	4602      	mov	r2, r0
 800796a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800796c:	7bfa      	ldrb	r2, [r7, #15]
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4613      	mov	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	3318      	adds	r3, #24
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007980:	7bfa      	ldrb	r2, [r7, #15]
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	331c      	adds	r3, #28
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007994:	7bfa      	ldrb	r2, [r7, #15]
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	440b      	add	r3, r1
 80079a2:	3320      	adds	r3, #32
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80079a8:	7bfa      	ldrb	r2, [r7, #15]
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	3324      	adds	r3, #36	@ 0x24
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	3301      	adds	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	791b      	ldrb	r3, [r3, #4]
 80079c6:	7bfa      	ldrb	r2, [r7, #15]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d3af      	bcc.n	800792c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]
 80079d0:	e044      	b.n	8007a5c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80079d2:	7bfa      	ldrb	r2, [r7, #15]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80079e8:	7bfa      	ldrb	r2, [r7, #15]
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80079fa:	7bfa      	ldrb	r2, [r7, #15]
 80079fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80079fe:	7bfa      	ldrb	r2, [r7, #15]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007a14:	7bfa      	ldrb	r2, [r7, #15]
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a2a:	7bfa      	ldrb	r2, [r7, #15]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a40:	7bfa      	ldrb	r2, [r7, #15]
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	791b      	ldrb	r3, [r3, #4]
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d3b5      	bcc.n	80079d2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7c1a      	ldrb	r2, [r3, #16]
 8007a6e:	f88d 2000 	strb.w	r2, [sp]
 8007a72:	3304      	adds	r3, #4
 8007a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a76:	f008 fa59 	bl	800ff2c <USB_DevInit>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e013      	b.n	8007ab4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7b1b      	ldrb	r3, [r3, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d102      	bne.n	8007aa8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f96e 	bl	8008d84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f009 fa9c 	bl	8010fea <USB_DevDisconnect>

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_PCD_Start+0x1c>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e022      	b.n	8007b1e <HAL_PCD_Start+0x62>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d105      	bne.n	8007b00 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f008 f9a3 	bl	800fe50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f009 fa4a 	bl	8010fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007b26:	b590      	push	{r4, r7, lr}
 8007b28:	b08d      	sub	sp, #52	@ 0x34
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f009 fb08 	bl	8011152 <USB_GetMode>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 84b9 	bne.w	80084bc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f009 fa6c 	bl	801102c <USB_ReadInterrupts>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 84af 	beq.w	80084ba <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f009 fa59 	bl	801102c <USB_ReadInterrupts>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d107      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f002 0202 	and.w	r2, r2, #2
 8007b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f009 fa47 	bl	801102c <USB_ReadInterrupts>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d161      	bne.n	8007c6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0210 	bic.w	r2, r2, #16
 8007bb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007bde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007be2:	d124      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d035      	beq.n	8007c5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	091b      	lsrs	r3, r3, #4
 8007bf8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a38      	ldr	r0, [r7, #32]
 8007c04:	f009 f87e 	bl	8010d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c14:	441a      	add	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	695a      	ldr	r2, [r3, #20]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c26:	441a      	add	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	615a      	str	r2, [r3, #20]
 8007c2c:	e016      	b.n	8007c5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007c34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c38:	d110      	bne.n	8007c5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c40:	2208      	movs	r2, #8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6a38      	ldr	r0, [r7, #32]
 8007c46:	f009 f85d 	bl	8010d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c56:	441a      	add	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0210 	orr.w	r2, r2, #16
 8007c6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f009 f9db 	bl	801102c <USB_ReadInterrupts>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c80:	f040 80a7 	bne.w	8007dd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f009 f9e0 	bl	8011052 <USB_ReadDevAllOutEpInterrupt>
 8007c92:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007c94:	e099      	b.n	8007dca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 808e 	beq.w	8007dbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f009 fa04 	bl	80110ba <USB_ReadDevOutEPInterrupt>
 8007cb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2301      	movs	r3, #1
 8007cce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fed0 	bl	8008a78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00c      	beq.n	8007cfc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 ffa6 	bl	8008c48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	2310      	movs	r3, #16
 8007d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d030      	beq.n	8007d84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2a:	2b80      	cmp	r3, #128	@ 0x80
 8007d2c:	d109      	bne.n	8007d42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	3304      	adds	r3, #4
 8007d56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	78db      	ldrb	r3, [r3, #3]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d108      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2200      	movs	r2, #0
 8007d64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f00b fdff 	bl	8013970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7e:	461a      	mov	r2, r3
 8007d80:	2302      	movs	r3, #2
 8007d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007dbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f af62 	bne.w	8007c96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f009 f928 	bl	801102c <USB_ReadInterrupts>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007de6:	f040 80db 	bne.w	8007fa0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f009 f949 	bl	8011086 <USB_ReadDevAllInEpInterrupt>
 8007df4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007dfa:	e0cd      	b.n	8007f98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80c2 	beq.w	8007f8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f009 f96f 	bl	80110f6 <USB_ReadDevInEPInterrupt>
 8007e18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d057      	beq.n	8007ed4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	69f9      	ldr	r1, [r7, #28]
 8007e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e44:	4013      	ands	r3, r2
 8007e46:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e54:	461a      	mov	r2, r3
 8007e56:	2301      	movs	r3, #1
 8007e58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	799b      	ldrb	r3, [r3, #6]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d132      	bne.n	8007ec8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3320      	adds	r3, #32
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4403      	add	r3, r0
 8007e82:	331c      	adds	r3, #28
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4419      	add	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4403      	add	r3, r0
 8007e96:	3320      	adds	r3, #32
 8007e98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d113      	bne.n	8007ec8 <HAL_PCD_IRQHandler+0x3a2>
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	3324      	adds	r3, #36	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d108      	bne.n	8007ec8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	f009 f978 	bl	80111b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f00b fcc9 	bl	8013866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eea:	461a      	mov	r2, r3
 8007eec:	2308      	movs	r3, #8
 8007eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f003 0310 	and.w	r3, r3, #16
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f06:	461a      	mov	r2, r3
 8007f08:	2310      	movs	r3, #16
 8007f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d008      	beq.n	8007f28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f22:	461a      	mov	r2, r3
 8007f24:	2340      	movs	r3, #64	@ 0x40
 8007f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d023      	beq.n	8007f7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f34:	6a38      	ldr	r0, [r7, #32]
 8007f36:	f008 f957 	bl	80101e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d108      	bne.n	8007f68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f00b fd16 	bl	8013994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f74:	461a      	mov	r2, r3
 8007f76:	2302      	movs	r3, #2
 8007f78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fcea 	bl	8008960 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	3301      	adds	r3, #1
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f af2e 	bne.w	8007dfc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f009 f841 	bl	801102c <USB_ReadInterrupts>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fb4:	d122      	bne.n	8007ffc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc4:	f023 0301 	bic.w	r3, r3, #1
 8007fc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d108      	bne.n	8007fe6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fef4 	bl	8008dcc <HAL_PCDEx_LPM_Callback>
 8007fe4:	e002      	b.n	8007fec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f00b fcb4 	bl	8013954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f009 f813 	bl	801102c <USB_ReadInterrupts>
 8008006:	4603      	mov	r3, r0
 8008008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008010:	d112      	bne.n	8008038 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b01      	cmp	r3, #1
 8008020:	d102      	bne.n	8008028 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f00b fc70 	bl	8013908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008036:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4618      	mov	r0, r3
 800803e:	f008 fff5 	bl	801102c <USB_ReadInterrupts>
 8008042:	4603      	mov	r3, r0
 8008044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800804c:	d121      	bne.n	8008092 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695a      	ldr	r2, [r3, #20]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800805c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	089b      	lsrs	r3, r3, #2
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fea1 	bl	8008dcc <HAL_PCDEx_LPM_Callback>
 800808a:	e002      	b.n	8008092 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f00b fc3b 	bl	8013908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f008 ffc8 	bl	801102c <USB_ReadInterrupts>
 800809c:	4603      	mov	r3, r0
 800809e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a6:	f040 80b7 	bne.w	8008218 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2110      	movs	r1, #16
 80080c4:	4618      	mov	r0, r3
 80080c6:	f008 f88f 	bl	80101e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ce:	e046      	b.n	800815e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80080d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	461a      	mov	r2, r3
 80080de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008102:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008116:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008136:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	440a      	add	r2, r1
 800814e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008152:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008156:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815a:	3301      	adds	r3, #1
 800815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	461a      	mov	r2, r3
 8008164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008166:	4293      	cmp	r3, r2
 8008168:	d3b2      	bcc.n	80080d0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008178:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800817c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	7bdb      	ldrb	r3, [r3, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d016      	beq.n	80081b4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008196:	f043 030b 	orr.w	r3, r3, #11
 800819a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ac:	f043 030b 	orr.w	r3, r3, #11
 80081b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80081b2:	e015      	b.n	80081e0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c2:	4619      	mov	r1, r3
 80081c4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80081c8:	4313      	orrs	r3, r2
 80081ca:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081da:	f043 030b 	orr.w	r3, r3, #11
 80081de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80081f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008202:	461a      	mov	r2, r3
 8008204:	f008 ffd8 	bl	80111b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695a      	ldr	r2, [r3, #20]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4618      	mov	r0, r3
 800821e:	f008 ff05 	bl	801102c <USB_ReadInterrupts>
 8008222:	4603      	mov	r3, r0
 8008224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822c:	d123      	bne.n	8008276 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f008 ff9c 	bl	8011170 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f008 f84c 	bl	80102da <USB_GetDevSpeed>
 8008242:	4603      	mov	r3, r0
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681c      	ldr	r4, [r3, #0]
 800824e:	f001 fd1d 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8008252:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008258:	461a      	mov	r2, r3
 800825a:	4620      	mov	r0, r4
 800825c:	f007 fd56 	bl	800fd0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f00b fb28 	bl	80138b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008274:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f008 fed6 	bl	801102c <USB_ReadInterrupts>
 8008280:	4603      	mov	r3, r0
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b08      	cmp	r3, #8
 8008288:	d10a      	bne.n	80082a0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f00b fb05 	bl	801389a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f002 0208 	and.w	r2, r2, #8
 800829e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f008 fec1 	bl	801102c <USB_ReadInterrupts>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b0:	2b80      	cmp	r3, #128	@ 0x80
 80082b2:	d123      	bne.n	80082fc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80082c0:	2301      	movs	r3, #1
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c4:	e014      	b.n	80082f0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ca:	4613      	mov	r3, r2
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d105      	bne.n	80082ea <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb0a 	bl	80088fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	3301      	adds	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d3e4      	bcc.n	80082c6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f008 fe93 	bl	801102c <USB_ReadInterrupts>
 8008306:	4603      	mov	r3, r0
 8008308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800830c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008310:	d13c      	bne.n	800838c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008312:	2301      	movs	r3, #1
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
 8008316:	e02b      	b.n	8008370 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800832c:	4613      	mov	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3318      	adds	r3, #24
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d115      	bne.n	800836a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800833e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008340:	2b00      	cmp	r3, #0
 8008342:	da12      	bge.n	800836a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	3317      	adds	r3, #23
 8008354:	2201      	movs	r2, #1
 8008356:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008360:	b2db      	uxtb	r3, r3
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 faca 	bl	80088fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	3301      	adds	r3, #1
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	791b      	ldrb	r3, [r3, #4]
 8008374:	461a      	mov	r2, r3
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	4293      	cmp	r3, r2
 800837a:	d3cd      	bcc.n	8008318 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800838a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f008 fe4b 	bl	801102c <USB_ReadInterrupts>
 8008396:	4603      	mov	r3, r0
 8008398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800839c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083a0:	d156      	bne.n	8008450 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083a2:	2301      	movs	r3, #1
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a6:	e045      	b.n	8008434 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d12e      	bne.n	800842e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80083d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	da2b      	bge.n	800842e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	0c1a      	lsrs	r2, r3, #16
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80083e0:	4053      	eors	r3, r2
 80083e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d121      	bne.n	800842e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80083fc:	2201      	movs	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800842a:	6053      	str	r3, [r2, #4]
            break;
 800842c:	e008      	b.n	8008440 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	3301      	adds	r3, #1
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	461a      	mov	r2, r3
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	4293      	cmp	r3, r2
 800843e:	d3b3      	bcc.n	80083a8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800844e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f008 fde9 	bl	801102c <USB_ReadInterrupts>
 800845a:	4603      	mov	r3, r0
 800845c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008464:	d10a      	bne.n	800847c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f00b faa6 	bl	80139b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	695a      	ldr	r2, [r3, #20]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800847a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f008 fdd3 	bl	801102c <USB_ReadInterrupts>
 8008486:	4603      	mov	r3, r0
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d115      	bne.n	80084bc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f00b fa96 	bl	80139d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	e000      	b.n	80084bc <HAL_PCD_IRQHandler+0x996>
      return;
 80084ba:	bf00      	nop
    }
  }
}
 80084bc:	3734      	adds	r7, #52	@ 0x34
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd90      	pop	{r4, r7, pc}

080084c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_PCD_SetAddress+0x1a>
 80084d8:	2302      	movs	r3, #2
 80084da:	e012      	b.n	8008502 <HAL_PCD_SetAddress+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f008 fd32 	bl	8010f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	461a      	mov	r2, r3
 8008518:	4603      	mov	r3, r0
 800851a:	70fb      	strb	r3, [r7, #3]
 800851c:	460b      	mov	r3, r1
 800851e:	803b      	strh	r3, [r7, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	da0f      	bge.n	8008550 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	f003 020f 	and.w	r2, r3, #15
 8008536:	4613      	mov	r3, r2
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	3310      	adds	r3, #16
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	3304      	adds	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	705a      	strb	r2, [r3, #1]
 800854e:	e00f      	b.n	8008570 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	f003 020f 	and.w	r2, r3, #15
 8008556:	4613      	mov	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	b2da      	uxtb	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800857c:	883b      	ldrh	r3, [r7, #0]
 800857e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	78ba      	ldrb	r2, [r7, #2]
 800858a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800859e:	78bb      	ldrb	r3, [r7, #2]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d102      	bne.n	80085aa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_PCD_EP_Open+0xae>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e00e      	b.n	80085d6 <HAL_PCD_EP_Open+0xcc>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f007 feac 	bl	8010324 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80085ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da0f      	bge.n	8008612 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	3310      	adds	r3, #16
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	3304      	adds	r3, #4
 8008608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	705a      	strb	r2, [r3, #1]
 8008610:	e00f      	b.n	8008632 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008612:	78fb      	ldrb	r3, [r7, #3]
 8008614:	f003 020f 	and.w	r2, r3, #15
 8008618:	4613      	mov	r3, r2
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	b2da      	uxtb	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_PCD_EP_Close+0x6e>
 8008648:	2302      	movs	r3, #2
 800864a:	e00e      	b.n	800866a <HAL_PCD_EP_Close+0x8c>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68f9      	ldr	r1, [r7, #12]
 800865a:	4618      	mov	r0, r3
 800865c:	f007 feea 	bl	8010434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	460b      	mov	r3, r1
 8008680:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	4613      	mov	r3, r2
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2200      	movs	r2, #0
 80086b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	799b      	ldrb	r3, [r3, #6]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d102      	bne.n	80086ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	799b      	ldrb	r3, [r3, #6]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6979      	ldr	r1, [r7, #20]
 80086da:	f007 ff87 	bl	80105ec <USB_EPStartXfer>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	460b      	mov	r3, r1
 8008726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	f003 020f 	and.w	r2, r3, #15
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	3310      	adds	r3, #16
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	3304      	adds	r3, #4
 800873e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2201      	movs	r2, #1
 8008756:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	b2da      	uxtb	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	799b      	ldrb	r3, [r3, #6]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d102      	bne.n	8008772 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	799b      	ldrb	r3, [r3, #6]
 800877a:	461a      	mov	r2, r3
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	f007 ff35 	bl	80105ec <USB_EPStartXfer>

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	7912      	ldrb	r2, [r2, #4]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d901      	bls.n	80087aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e04f      	b.n	800884a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80087aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da0f      	bge.n	80087d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	4613      	mov	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	3310      	adds	r3, #16
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	3304      	adds	r3, #4
 80087c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	705a      	strb	r2, [r3, #1]
 80087d0:	e00d      	b.n	80087ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	3304      	adds	r3, #4
 80087e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_PCD_EP_SetStall+0x82>
 800880a:	2302      	movs	r3, #2
 800880c:	e01d      	b.n	800884a <HAL_PCD_EP_SetStall+0xbe>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	4618      	mov	r0, r3
 800881e:	f008 fac9 	bl	8010db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	7999      	ldrb	r1, [r3, #6]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800883a:	461a      	mov	r2, r3
 800883c:	f008 fcbc 	bl	80111b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7912      	ldrb	r2, [r2, #4]
 8008868:	4293      	cmp	r3, r2
 800886a:	d901      	bls.n	8008870 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e042      	b.n	80088f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	da0f      	bge.n	8008898 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	f003 020f 	and.w	r2, r3, #15
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	3310      	adds	r3, #16
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	4413      	add	r3, r2
 800888c:	3304      	adds	r3, #4
 800888e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	705a      	strb	r2, [r3, #1]
 8008896:	e00f      	b.n	80088b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 020f 	and.w	r2, r3, #15
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	3304      	adds	r3, #4
 80088b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_PCD_EP_ClrStall+0x86>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e00e      	b.n	80088f6 <HAL_PCD_EP_ClrStall+0xa4>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68f9      	ldr	r1, [r7, #12]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f008 fad2 	bl	8010e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800890a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800890e:	2b00      	cmp	r3, #0
 8008910:	da0c      	bge.n	800892c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	f003 020f 	and.w	r2, r3, #15
 8008918:	4613      	mov	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	3310      	adds	r3, #16
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	4413      	add	r3, r2
 8008926:	3304      	adds	r3, #4
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	e00c      	b.n	8008946 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	4613      	mov	r3, r2
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	3304      	adds	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	4618      	mov	r0, r3
 800894e:	f008 f8f1 	bl	8010b34 <USB_EPStopXfer>
 8008952:	4603      	mov	r3, r0
 8008954:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008956:	7afb      	ldrb	r3, [r7, #11]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	@ 0x28
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	3310      	adds	r3, #16
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	3304      	adds	r3, #4
 8008986:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	429a      	cmp	r2, r3
 8008992:	d901      	bls.n	8008998 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e06b      	b.n	8008a70 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d902      	bls.n	80089b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	3303      	adds	r3, #3
 80089b8:	089b      	lsrs	r3, r3, #2
 80089ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089bc:	e02a      	b.n	8008a14 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d902      	bls.n	80089da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3303      	adds	r3, #3
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68d9      	ldr	r1, [r3, #12]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4603      	mov	r3, r0
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f008 f946 	bl	8010c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	441a      	add	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	441a      	add	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d809      	bhi.n	8008a3e <PCD_WriteEmptyTxFifo+0xde>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1bf      	bne.n	80089be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d811      	bhi.n	8008a6e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2201      	movs	r2, #1
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	6939      	ldr	r1, [r7, #16]
 8008a66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	333c      	adds	r3, #60	@ 0x3c
 8008a90:	3304      	adds	r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	799b      	ldrb	r3, [r3, #6]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d17b      	bne.n	8008ba6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d015      	beq.n	8008ae4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4a61      	ldr	r2, [pc, #388]	@ (8008c40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	f240 80b9 	bls.w	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 80b3 	beq.w	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ada:	461a      	mov	r2, r3
 8008adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ae0:	6093      	str	r3, [r2, #8]
 8008ae2:	e0a7      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008afa:	461a      	mov	r2, r3
 8008afc:	2320      	movs	r3, #32
 8008afe:	6093      	str	r3, [r2, #8]
 8008b00:	e098      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f040 8093 	bne.w	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	4a4b      	ldr	r2, [pc, #300]	@ (8008c40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d90f      	bls.n	8008b36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b32:	6093      	str	r3, [r2, #8]
 8008b34:	e07e      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a1a      	ldr	r2, [r3, #32]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	0159      	lsls	r1, r3, #5
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	440b      	add	r3, r1
 8008b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b62:	1ad2      	subs	r2, r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d114      	bne.n	8008b98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d109      	bne.n	8008b8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b80:	461a      	mov	r2, r3
 8008b82:	2101      	movs	r1, #1
 8008b84:	f008 fb18 	bl	80111b8 <USB_EP0_OutStart>
 8008b88:	e006      	b.n	8008b98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	441a      	add	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f00a fe46 	bl	8013830 <HAL_PCD_DataOutStageCallback>
 8008ba4:	e046      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4a26      	ldr	r2, [pc, #152]	@ (8008c44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d124      	bne.n	8008bf8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bca:	6093      	str	r3, [r2, #8]
 8008bcc:	e032      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	461a      	mov	r2, r3
 8008be6:	2320      	movs	r3, #32
 8008be8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f00a fe1d 	bl	8013830 <HAL_PCD_DataOutStageCallback>
 8008bf6:	e01d      	b.n	8008c34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d114      	bne.n	8008c28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	4613      	mov	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d108      	bne.n	8008c28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c20:	461a      	mov	r2, r3
 8008c22:	2100      	movs	r1, #0
 8008c24:	f008 fac8 	bl	80111b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f00a fdfe 	bl	8013830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	4f54300a 	.word	0x4f54300a
 8008c44:	4f54310a 	.word	0x4f54310a

08008c48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	333c      	adds	r3, #60	@ 0x3c
 8008c60:	3304      	adds	r3, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4a15      	ldr	r2, [pc, #84]	@ (8008cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d90e      	bls.n	8008c9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c94:	461a      	mov	r2, r3
 8008c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f00a fdb5 	bl	801380c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d90c      	bls.n	8008cc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	799b      	ldrb	r3, [r3, #6]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d108      	bne.n	8008cc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	f008 fa7a 	bl	80111b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	4f54300a 	.word	0x4f54300a

08008cd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008cf2:	883b      	ldrh	r3, [r7, #0]
 8008cf4:	0419      	lsls	r1, r3, #16
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d00:	e028      	b.n	8008d54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	e00d      	b.n	8008d32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	3340      	adds	r3, #64	@ 0x40
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	0c1b      	lsrs	r3, r3, #16
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4413      	add	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	73fb      	strb	r3, [r7, #15]
 8008d32:	7bfa      	ldrb	r2, [r7, #15]
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d3ec      	bcc.n	8008d16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008d3c:	883b      	ldrh	r3, [r7, #0]
 8008d3e:	0418      	lsls	r0, r3, #16
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6819      	ldr	r1, [r3, #0]
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4302      	orrs	r2, r0
 8008d4c:	3340      	adds	r3, #64	@ 0x40
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	887a      	ldrh	r2, [r7, #2]
 8008d74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008db2:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	10000003 	.word	0x10000003

08008dcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008dec:	4b19      	ldr	r3, [pc, #100]	@ (8008e54 <HAL_PWREx_ConfigSupply+0x70>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d00a      	beq.n	8008e0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008df8:	4b16      	ldr	r3, [pc, #88]	@ (8008e54 <HAL_PWREx_ConfigSupply+0x70>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d001      	beq.n	8008e0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e01f      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e01d      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e0e:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <HAL_PWREx_ConfigSupply+0x70>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f023 0207 	bic.w	r2, r3, #7
 8008e16:	490f      	ldr	r1, [pc, #60]	@ (8008e54 <HAL_PWREx_ConfigSupply+0x70>)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e1e:	f7f9 fddf 	bl	80029e0 <HAL_GetTick>
 8008e22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e24:	e009      	b.n	8008e3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e26:	f7f9 fddb 	bl	80029e0 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e34:	d901      	bls.n	8008e3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e007      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e3a:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <HAL_PWREx_ConfigSupply+0x70>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e46:	d1ee      	bne.n	8008e26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	58024800 	.word	0x58024800

08008e58 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008e5c:	4b05      	ldr	r3, [pc, #20]	@ (8008e74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4a04      	ldr	r2, [pc, #16]	@ (8008e74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e66:	60d3      	str	r3, [r2, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	58024800 	.word	0x58024800

08008e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	@ 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e3c8      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8087 	beq.w	8008fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e98:	4b88      	ldr	r3, [pc, #544]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ea2:	4b86      	ldr	r3, [pc, #536]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eaa:	2b10      	cmp	r3, #16
 8008eac:	d007      	beq.n	8008ebe <HAL_RCC_OscConfig+0x46>
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	2b18      	cmp	r3, #24
 8008eb2:	d110      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x5e>
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d10b      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d06c      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x12c>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d168      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e3a2      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ede:	d106      	bne.n	8008eee <HAL_RCC_OscConfig+0x76>
 8008ee0:	4b76      	ldr	r3, [pc, #472]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a75      	ldr	r2, [pc, #468]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	e02e      	b.n	8008f4c <HAL_RCC_OscConfig+0xd4>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10c      	bne.n	8008f10 <HAL_RCC_OscConfig+0x98>
 8008ef6:	4b71      	ldr	r3, [pc, #452]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a70      	ldr	r2, [pc, #448]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4b6e      	ldr	r3, [pc, #440]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a6d      	ldr	r2, [pc, #436]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e01d      	b.n	8008f4c <HAL_RCC_OscConfig+0xd4>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f18:	d10c      	bne.n	8008f34 <HAL_RCC_OscConfig+0xbc>
 8008f1a:	4b68      	ldr	r3, [pc, #416]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a67      	ldr	r2, [pc, #412]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4b65      	ldr	r3, [pc, #404]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a64      	ldr	r2, [pc, #400]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e00b      	b.n	8008f4c <HAL_RCC_OscConfig+0xd4>
 8008f34:	4b61      	ldr	r3, [pc, #388]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a60      	ldr	r2, [pc, #384]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4b5e      	ldr	r3, [pc, #376]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a5d      	ldr	r2, [pc, #372]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d013      	beq.n	8008f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f54:	f7f9 fd44 	bl	80029e0 <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f5c:	f7f9 fd40 	bl	80029e0 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b64      	cmp	r3, #100	@ 0x64
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e356      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f6e:	4b53      	ldr	r3, [pc, #332]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0xe4>
 8008f7a:	e014      	b.n	8008fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7f9 fd30 	bl	80029e0 <HAL_GetTick>
 8008f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f84:	f7f9 fd2c 	bl	80029e0 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b64      	cmp	r3, #100	@ 0x64
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e342      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f96:	4b49      	ldr	r3, [pc, #292]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x10c>
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 808c 	beq.w	80090cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb4:	4b41      	ldr	r3, [pc, #260]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <HAL_RCC_OscConfig+0x162>
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	2b18      	cmp	r3, #24
 8008fce:	d137      	bne.n	8009040 <HAL_RCC_OscConfig+0x1c8>
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d132      	bne.n	8009040 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fda:	4b38      	ldr	r3, [pc, #224]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x17a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e314      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ff2:	4b32      	ldr	r3, [pc, #200]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f023 0219 	bic.w	r2, r3, #25
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	492f      	ldr	r1, [pc, #188]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009000:	4313      	orrs	r3, r2
 8009002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7f9 fcec 	bl	80029e0 <HAL_GetTick>
 8009008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800900c:	f7f9 fce8 	bl	80029e0 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e2fe      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800901e:	4b27      	ldr	r3, [pc, #156]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902a:	4b24      	ldr	r3, [pc, #144]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	4920      	ldr	r1, [pc, #128]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 800903a:	4313      	orrs	r3, r2
 800903c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800903e:	e045      	b.n	80090cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d026      	beq.n	8009096 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009048:	4b1c      	ldr	r3, [pc, #112]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f023 0219 	bic.w	r2, r3, #25
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4919      	ldr	r1, [pc, #100]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009056:	4313      	orrs	r3, r2
 8009058:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905a:	f7f9 fcc1 	bl	80029e0 <HAL_GetTick>
 800905e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009060:	e008      	b.n	8009074 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009062:	f7f9 fcbd 	bl	80029e0 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b02      	cmp	r3, #2
 800906e:	d901      	bls.n	8009074 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e2d3      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009074:	4b11      	ldr	r3, [pc, #68]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0f0      	beq.n	8009062 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009080:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	061b      	lsls	r3, r3, #24
 800908e:	490b      	ldr	r1, [pc, #44]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009090:	4313      	orrs	r3, r2
 8009092:	604b      	str	r3, [r1, #4]
 8009094:	e01a      	b.n	80090cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009096:	4b09      	ldr	r3, [pc, #36]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a08      	ldr	r2, [pc, #32]	@ (80090bc <HAL_RCC_OscConfig+0x244>)
 800909c:	f023 0301 	bic.w	r3, r3, #1
 80090a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a2:	f7f9 fc9d 	bl	80029e0 <HAL_GetTick>
 80090a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090a8:	e00a      	b.n	80090c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090aa:	f7f9 fc99 	bl	80029e0 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d903      	bls.n	80090c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e2af      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
 80090bc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090c0:	4b96      	ldr	r3, [pc, #600]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1ee      	bne.n	80090aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0310 	and.w	r3, r3, #16
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d06a      	beq.n	80091ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090d8:	4b90      	ldr	r3, [pc, #576]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090e2:	4b8e      	ldr	r3, [pc, #568]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	d007      	beq.n	80090fe <HAL_RCC_OscConfig+0x286>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b18      	cmp	r3, #24
 80090f2:	d11b      	bne.n	800912c <HAL_RCC_OscConfig+0x2b4>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d116      	bne.n	800912c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090fe:	4b87      	ldr	r3, [pc, #540]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <HAL_RCC_OscConfig+0x29e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	2b80      	cmp	r3, #128	@ 0x80
 8009110:	d001      	beq.n	8009116 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e282      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009116:	4b81      	ldr	r3, [pc, #516]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	497d      	ldr	r1, [pc, #500]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009126:	4313      	orrs	r3, r2
 8009128:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800912a:	e040      	b.n	80091ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d023      	beq.n	800917c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009134:	4b79      	ldr	r3, [pc, #484]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a78      	ldr	r2, [pc, #480]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800913a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7f9 fc4e 	bl	80029e0 <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009148:	f7f9 fc4a 	bl	80029e0 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e260      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800915a:	4b70      	ldr	r3, [pc, #448]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0f0      	beq.n	8009148 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009166:	4b6d      	ldr	r3, [pc, #436]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	4969      	ldr	r1, [pc, #420]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009176:	4313      	orrs	r3, r2
 8009178:	60cb      	str	r3, [r1, #12]
 800917a:	e018      	b.n	80091ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800917c:	4b67      	ldr	r3, [pc, #412]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a66      	ldr	r2, [pc, #408]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7f9 fc2a 	bl	80029e0 <HAL_GetTick>
 800918c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009190:	f7f9 fc26 	bl	80029e0 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e23c      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091a2:	4b5e      	ldr	r3, [pc, #376]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f0      	bne.n	8009190 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d036      	beq.n	8009228 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d019      	beq.n	80091f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091c2:	4b56      	ldr	r3, [pc, #344]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091c6:	4a55      	ldr	r2, [pc, #340]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ce:	f7f9 fc07 	bl	80029e0 <HAL_GetTick>
 80091d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091d4:	e008      	b.n	80091e8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091d6:	f7f9 fc03 	bl	80029e0 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e219      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091e8:	4b4c      	ldr	r3, [pc, #304]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0f0      	beq.n	80091d6 <HAL_RCC_OscConfig+0x35e>
 80091f4:	e018      	b.n	8009228 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091f6:	4b49      	ldr	r3, [pc, #292]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fa:	4a48      	ldr	r2, [pc, #288]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009202:	f7f9 fbed 	bl	80029e0 <HAL_GetTick>
 8009206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920a:	f7f9 fbe9 	bl	80029e0 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e1ff      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800921c:	4b3f      	ldr	r3, [pc, #252]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800921e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f0      	bne.n	800920a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d036      	beq.n	80092a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d019      	beq.n	8009270 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800923c:	4b37      	ldr	r3, [pc, #220]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a36      	ldr	r2, [pc, #216]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009248:	f7f9 fbca 	bl	80029e0 <HAL_GetTick>
 800924c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009250:	f7f9 fbc6 	bl	80029e0 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b02      	cmp	r3, #2
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e1dc      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009262:	4b2e      	ldr	r3, [pc, #184]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0f0      	beq.n	8009250 <HAL_RCC_OscConfig+0x3d8>
 800926e:	e018      	b.n	80092a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009270:	4b2a      	ldr	r3, [pc, #168]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a29      	ldr	r2, [pc, #164]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800927a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800927c:	f7f9 fbb0 	bl	80029e0 <HAL_GetTick>
 8009280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009284:	f7f9 fbac 	bl	80029e0 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e1c2      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009296:	4b21      	ldr	r3, [pc, #132]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8086 	beq.w	80093bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009320 <HAL_RCC_OscConfig+0x4a8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1a      	ldr	r2, [pc, #104]	@ (8009320 <HAL_RCC_OscConfig+0x4a8>)
 80092b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092bc:	f7f9 fb90 	bl	80029e0 <HAL_GetTick>
 80092c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c2:	e008      	b.n	80092d6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c4:	f7f9 fb8c 	bl	80029e0 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b64      	cmp	r3, #100	@ 0x64
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e1a2      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092d6:	4b12      	ldr	r3, [pc, #72]	@ (8009320 <HAL_RCC_OscConfig+0x4a8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0f0      	beq.n	80092c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d106      	bne.n	80092f8 <HAL_RCC_OscConfig+0x480>
 80092ea:	4b0c      	ldr	r3, [pc, #48]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ee:	4a0b      	ldr	r2, [pc, #44]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 80092f0:	f043 0301 	orr.w	r3, r3, #1
 80092f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80092f6:	e032      	b.n	800935e <HAL_RCC_OscConfig+0x4e6>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d111      	bne.n	8009324 <HAL_RCC_OscConfig+0x4ac>
 8009300:	4b06      	ldr	r3, [pc, #24]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009304:	4a05      	ldr	r2, [pc, #20]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	6713      	str	r3, [r2, #112]	@ 0x70
 800930c:	4b03      	ldr	r3, [pc, #12]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 800930e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009310:	4a02      	ldr	r2, [pc, #8]	@ (800931c <HAL_RCC_OscConfig+0x4a4>)
 8009312:	f023 0304 	bic.w	r3, r3, #4
 8009316:	6713      	str	r3, [r2, #112]	@ 0x70
 8009318:	e021      	b.n	800935e <HAL_RCC_OscConfig+0x4e6>
 800931a:	bf00      	nop
 800931c:	58024400 	.word	0x58024400
 8009320:	58024800 	.word	0x58024800
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b05      	cmp	r3, #5
 800932a:	d10c      	bne.n	8009346 <HAL_RCC_OscConfig+0x4ce>
 800932c:	4b83      	ldr	r3, [pc, #524]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800932e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009330:	4a82      	ldr	r2, [pc, #520]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009332:	f043 0304 	orr.w	r3, r3, #4
 8009336:	6713      	str	r3, [r2, #112]	@ 0x70
 8009338:	4b80      	ldr	r3, [pc, #512]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	4a7f      	ldr	r2, [pc, #508]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	6713      	str	r3, [r2, #112]	@ 0x70
 8009344:	e00b      	b.n	800935e <HAL_RCC_OscConfig+0x4e6>
 8009346:	4b7d      	ldr	r3, [pc, #500]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934a:	4a7c      	ldr	r2, [pc, #496]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	6713      	str	r3, [r2, #112]	@ 0x70
 8009352:	4b7a      	ldr	r3, [pc, #488]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009356:	4a79      	ldr	r2, [pc, #484]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009358:	f023 0304 	bic.w	r3, r3, #4
 800935c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d015      	beq.n	8009392 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009366:	f7f9 fb3b 	bl	80029e0 <HAL_GetTick>
 800936a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800936c:	e00a      	b.n	8009384 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800936e:	f7f9 fb37 	bl	80029e0 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800937c:	4293      	cmp	r3, r2
 800937e:	d901      	bls.n	8009384 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e14b      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009384:	4b6d      	ldr	r3, [pc, #436]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0ee      	beq.n	800936e <HAL_RCC_OscConfig+0x4f6>
 8009390:	e014      	b.n	80093bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009392:	f7f9 fb25 	bl	80029e0 <HAL_GetTick>
 8009396:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009398:	e00a      	b.n	80093b0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800939a:	f7f9 fb21 	bl	80029e0 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e135      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093b0:	4b62      	ldr	r3, [pc, #392]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1ee      	bne.n	800939a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 812a 	beq.w	800961a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093c6:	4b5d      	ldr	r3, [pc, #372]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093ce:	2b18      	cmp	r3, #24
 80093d0:	f000 80ba 	beq.w	8009548 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d8:	2b02      	cmp	r3, #2
 80093da:	f040 8095 	bne.w	8009508 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093de:	4b57      	ldr	r3, [pc, #348]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a56      	ldr	r2, [pc, #344]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80093e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ea:	f7f9 faf9 	bl	80029e0 <HAL_GetTick>
 80093ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093f0:	e008      	b.n	8009404 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f2:	f7f9 faf5 	bl	80029e0 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d901      	bls.n	8009404 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e10b      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009404:	4b4d      	ldr	r3, [pc, #308]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f0      	bne.n	80093f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009410:	4b4a      	ldr	r3, [pc, #296]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009414:	4b4a      	ldr	r3, [pc, #296]	@ (8009540 <HAL_RCC_OscConfig+0x6c8>)
 8009416:	4013      	ands	r3, r2
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009420:	0112      	lsls	r2, r2, #4
 8009422:	430a      	orrs	r2, r1
 8009424:	4945      	ldr	r1, [pc, #276]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009426:	4313      	orrs	r3, r2
 8009428:	628b      	str	r3, [r1, #40]	@ 0x28
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942e:	3b01      	subs	r3, #1
 8009430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009438:	3b01      	subs	r3, #1
 800943a:	025b      	lsls	r3, r3, #9
 800943c:	b29b      	uxth	r3, r3
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	3b01      	subs	r3, #1
 8009446:	041b      	lsls	r3, r3, #16
 8009448:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009452:	3b01      	subs	r3, #1
 8009454:	061b      	lsls	r3, r3, #24
 8009456:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800945a:	4938      	ldr	r1, [pc, #224]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800945c:	4313      	orrs	r3, r2
 800945e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009460:	4b36      	ldr	r3, [pc, #216]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a35      	ldr	r2, [pc, #212]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800946c:	4b33      	ldr	r3, [pc, #204]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800946e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009470:	4b34      	ldr	r3, [pc, #208]	@ (8009544 <HAL_RCC_OscConfig+0x6cc>)
 8009472:	4013      	ands	r3, r2
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009478:	00d2      	lsls	r2, r2, #3
 800947a:	4930      	ldr	r1, [pc, #192]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800947c:	4313      	orrs	r3, r2
 800947e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009480:	4b2e      	ldr	r3, [pc, #184]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	f023 020c 	bic.w	r2, r3, #12
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948c:	492b      	ldr	r1, [pc, #172]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800948e:	4313      	orrs	r3, r2
 8009490:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009492:	4b2a      	ldr	r3, [pc, #168]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	f023 0202 	bic.w	r2, r3, #2
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800949e:	4927      	ldr	r1, [pc, #156]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094a4:	4b25      	ldr	r3, [pc, #148]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	4a24      	ldr	r2, [pc, #144]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b0:	4b22      	ldr	r3, [pc, #136]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	4a21      	ldr	r2, [pc, #132]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094bc:	4b1f      	ldr	r3, [pc, #124]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	4a1e      	ldr	r2, [pc, #120]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094c8:	4b1c      	ldr	r3, [pc, #112]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	4a1b      	ldr	r2, [pc, #108]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094d4:	4b19      	ldr	r3, [pc, #100]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a18      	ldr	r2, [pc, #96]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e0:	f7f9 fa7e 	bl	80029e0 <HAL_GetTick>
 80094e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094e8:	f7f9 fa7a 	bl	80029e0 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e090      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094fa:	4b10      	ldr	r3, [pc, #64]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f0      	beq.n	80094e8 <HAL_RCC_OscConfig+0x670>
 8009506:	e088      	b.n	800961a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009508:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a0b      	ldr	r2, [pc, #44]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 800950e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009514:	f7f9 fa64 	bl	80029e0 <HAL_GetTick>
 8009518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951c:	f7f9 fa60 	bl	80029e0 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e076      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800952e:	4b03      	ldr	r3, [pc, #12]	@ (800953c <HAL_RCC_OscConfig+0x6c4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f0      	bne.n	800951c <HAL_RCC_OscConfig+0x6a4>
 800953a:	e06e      	b.n	800961a <HAL_RCC_OscConfig+0x7a2>
 800953c:	58024400 	.word	0x58024400
 8009540:	fffffc0c 	.word	0xfffffc0c
 8009544:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009548:	4b36      	ldr	r3, [pc, #216]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800954e:	4b35      	ldr	r3, [pc, #212]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	2b01      	cmp	r3, #1
 800955a:	d031      	beq.n	80095c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f003 0203 	and.w	r2, r3, #3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009566:	429a      	cmp	r2, r3
 8009568:	d12a      	bne.n	80095c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	091b      	lsrs	r3, r3, #4
 800956e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009576:	429a      	cmp	r2, r3
 8009578:	d122      	bne.n	80095c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009586:	429a      	cmp	r2, r3
 8009588:	d11a      	bne.n	80095c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	0a5b      	lsrs	r3, r3, #9
 800958e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009598:	429a      	cmp	r2, r3
 800959a:	d111      	bne.n	80095c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0c1b      	lsrs	r3, r3, #16
 80095a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d108      	bne.n	80095c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	0e1b      	lsrs	r3, r3, #24
 80095b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095bc:	429a      	cmp	r2, r3
 80095be:	d001      	beq.n	80095c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e02b      	b.n	800961c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095c4:	4b17      	ldr	r3, [pc, #92]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 80095c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d01f      	beq.n	800961a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80095da:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4a11      	ldr	r2, [pc, #68]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095e6:	f7f9 f9fb 	bl	80029e0 <HAL_GetTick>
 80095ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80095ec:	bf00      	nop
 80095ee:	f7f9 f9f7 	bl	80029e0 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d0f9      	beq.n	80095ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 80095fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <HAL_RCC_OscConfig+0x7b0>)
 8009600:	4013      	ands	r3, r2
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009606:	00d2      	lsls	r2, r2, #3
 8009608:	4906      	ldr	r1, [pc, #24]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 800960a:	4313      	orrs	r3, r2
 800960c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800960e:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	4a04      	ldr	r2, [pc, #16]	@ (8009624 <HAL_RCC_OscConfig+0x7ac>)
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3730      	adds	r7, #48	@ 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	58024400 	.word	0x58024400
 8009628:	ffff0007 	.word	0xffff0007

0800962c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e19c      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009640:	4b8a      	ldr	r3, [pc, #552]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d910      	bls.n	8009670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800964e:	4b87      	ldr	r3, [pc, #540]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f023 020f 	bic.w	r2, r3, #15
 8009656:	4985      	ldr	r1, [pc, #532]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	4313      	orrs	r3, r2
 800965c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800965e:	4b83      	ldr	r3, [pc, #524]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d001      	beq.n	8009670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e184      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d010      	beq.n	800969e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	4b7b      	ldr	r3, [pc, #492]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009688:	429a      	cmp	r2, r3
 800968a:	d908      	bls.n	800969e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800968c:	4b78      	ldr	r3, [pc, #480]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	4975      	ldr	r1, [pc, #468]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800969a:	4313      	orrs	r3, r2
 800969c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d010      	beq.n	80096cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	4b70      	ldr	r3, [pc, #448]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d908      	bls.n	80096cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	496a      	ldr	r1, [pc, #424]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d010      	beq.n	80096fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	4b64      	ldr	r3, [pc, #400]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d908      	bls.n	80096fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096e8:	4b61      	ldr	r3, [pc, #388]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	495e      	ldr	r1, [pc, #376]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d010      	beq.n	8009728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	4b59      	ldr	r3, [pc, #356]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009712:	429a      	cmp	r2, r3
 8009714:	d908      	bls.n	8009728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009716:	4b56      	ldr	r3, [pc, #344]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	4953      	ldr	r1, [pc, #332]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009724:	4313      	orrs	r3, r2
 8009726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d010      	beq.n	8009756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	4b4d      	ldr	r3, [pc, #308]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	429a      	cmp	r2, r3
 8009742:	d908      	bls.n	8009756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009744:	4b4a      	ldr	r3, [pc, #296]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	f023 020f 	bic.w	r2, r3, #15
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4947      	ldr	r1, [pc, #284]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009752:	4313      	orrs	r3, r2
 8009754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d055      	beq.n	800980e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009762:	4b43      	ldr	r3, [pc, #268]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	4940      	ldr	r1, [pc, #256]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009770:	4313      	orrs	r3, r2
 8009772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d107      	bne.n	800978c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800977c:	4b3c      	ldr	r3, [pc, #240]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d121      	bne.n	80097cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e0f6      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	2b03      	cmp	r3, #3
 8009792:	d107      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009794:	4b36      	ldr	r3, [pc, #216]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d115      	bne.n	80097cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0ea      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d107      	bne.n	80097bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097ac:	4b30      	ldr	r3, [pc, #192]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0de      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0d6      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097cc:	4b28      	ldr	r3, [pc, #160]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f023 0207 	bic.w	r2, r3, #7
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4925      	ldr	r1, [pc, #148]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097de:	f7f9 f8ff 	bl	80029e0 <HAL_GetTick>
 80097e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097e4:	e00a      	b.n	80097fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097e6:	f7f9 f8fb 	bl	80029e0 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e0be      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	429a      	cmp	r2, r3
 800980c:	d1eb      	bne.n	80097e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d010      	beq.n	800983c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	4b14      	ldr	r3, [pc, #80]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	429a      	cmp	r2, r3
 8009828:	d208      	bcs.n	800983c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800982a:	4b11      	ldr	r3, [pc, #68]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f023 020f 	bic.w	r2, r3, #15
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	490e      	ldr	r1, [pc, #56]	@ (8009870 <HAL_RCC_ClockConfig+0x244>)
 8009838:	4313      	orrs	r3, r2
 800983a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d214      	bcs.n	8009874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800984a:	4b08      	ldr	r3, [pc, #32]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f023 020f 	bic.w	r2, r3, #15
 8009852:	4906      	ldr	r1, [pc, #24]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	4313      	orrs	r3, r2
 8009858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800985a:	4b04      	ldr	r3, [pc, #16]	@ (800986c <HAL_RCC_ClockConfig+0x240>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d005      	beq.n	8009874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e086      	b.n	800997a <HAL_RCC_ClockConfig+0x34e>
 800986c:	52002000 	.word	0x52002000
 8009870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b00      	cmp	r3, #0
 800987e:	d010      	beq.n	80098a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	4b3f      	ldr	r3, [pc, #252]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800988c:	429a      	cmp	r2, r3
 800988e:	d208      	bcs.n	80098a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009890:	4b3c      	ldr	r3, [pc, #240]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	4939      	ldr	r1, [pc, #228]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d010      	beq.n	80098d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695a      	ldr	r2, [r3, #20]
 80098b2:	4b34      	ldr	r3, [pc, #208]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d208      	bcs.n	80098d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098be:	4b31      	ldr	r3, [pc, #196]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	492e      	ldr	r1, [pc, #184]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d010      	beq.n	80098fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	4b28      	ldr	r3, [pc, #160]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d208      	bcs.n	80098fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098ec:	4b25      	ldr	r3, [pc, #148]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	4922      	ldr	r1, [pc, #136]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d010      	beq.n	800992c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69da      	ldr	r2, [r3, #28]
 800990e:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009916:	429a      	cmp	r2, r3
 8009918:	d208      	bcs.n	800992c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800991a:	4b1a      	ldr	r3, [pc, #104]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	4917      	ldr	r1, [pc, #92]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 8009928:	4313      	orrs	r3, r2
 800992a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800992c:	f000 f834 	bl	8009998 <HAL_RCC_GetSysClockFreq>
 8009930:	4602      	mov	r2, r0
 8009932:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	4912      	ldr	r1, [pc, #72]	@ (8009988 <HAL_RCC_ClockConfig+0x35c>)
 800993e:	5ccb      	ldrb	r3, [r1, r3]
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	fa22 f303 	lsr.w	r3, r2, r3
 8009948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800994a:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <HAL_RCC_ClockConfig+0x358>)
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 030f 	and.w	r3, r3, #15
 8009952:	4a0d      	ldr	r2, [pc, #52]	@ (8009988 <HAL_RCC_ClockConfig+0x35c>)
 8009954:	5cd3      	ldrb	r3, [r2, r3]
 8009956:	f003 031f 	and.w	r3, r3, #31
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
 8009960:	4a0a      	ldr	r2, [pc, #40]	@ (800998c <HAL_RCC_ClockConfig+0x360>)
 8009962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009964:	4a0a      	ldr	r2, [pc, #40]	@ (8009990 <HAL_RCC_ClockConfig+0x364>)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800996a:	4b0a      	ldr	r3, [pc, #40]	@ (8009994 <HAL_RCC_ClockConfig+0x368>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f7f8 ffec 	bl	800294c <HAL_InitTick>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	58024400 	.word	0x58024400
 8009988:	08014814 	.word	0x08014814
 800998c:	24000004 	.word	0x24000004
 8009990:	24000000 	.word	0x24000000
 8009994:	24000008 	.word	0x24000008

08009998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009998:	b480      	push	{r7}
 800999a:	b089      	sub	sp, #36	@ 0x24
 800999c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800999e:	4bb3      	ldr	r3, [pc, #716]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099a6:	2b18      	cmp	r3, #24
 80099a8:	f200 8155 	bhi.w	8009c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80099ac:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	08009a19 	.word	0x08009a19
 80099b8:	08009c57 	.word	0x08009c57
 80099bc:	08009c57 	.word	0x08009c57
 80099c0:	08009c57 	.word	0x08009c57
 80099c4:	08009c57 	.word	0x08009c57
 80099c8:	08009c57 	.word	0x08009c57
 80099cc:	08009c57 	.word	0x08009c57
 80099d0:	08009c57 	.word	0x08009c57
 80099d4:	08009a3f 	.word	0x08009a3f
 80099d8:	08009c57 	.word	0x08009c57
 80099dc:	08009c57 	.word	0x08009c57
 80099e0:	08009c57 	.word	0x08009c57
 80099e4:	08009c57 	.word	0x08009c57
 80099e8:	08009c57 	.word	0x08009c57
 80099ec:	08009c57 	.word	0x08009c57
 80099f0:	08009c57 	.word	0x08009c57
 80099f4:	08009a45 	.word	0x08009a45
 80099f8:	08009c57 	.word	0x08009c57
 80099fc:	08009c57 	.word	0x08009c57
 8009a00:	08009c57 	.word	0x08009c57
 8009a04:	08009c57 	.word	0x08009c57
 8009a08:	08009c57 	.word	0x08009c57
 8009a0c:	08009c57 	.word	0x08009c57
 8009a10:	08009c57 	.word	0x08009c57
 8009a14:	08009a4b 	.word	0x08009a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a18:	4b94      	ldr	r3, [pc, #592]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d009      	beq.n	8009a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a24:	4b91      	ldr	r3, [pc, #580]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	4a90      	ldr	r2, [pc, #576]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
 8009a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a36:	e111      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a38:	4b8d      	ldr	r3, [pc, #564]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a3a:	61bb      	str	r3, [r7, #24]
      break;
 8009a3c:	e10e      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a40:	61bb      	str	r3, [r7, #24]
      break;
 8009a42:	e10b      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a44:	4b8c      	ldr	r3, [pc, #560]	@ (8009c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a46:	61bb      	str	r3, [r7, #24]
      break;
 8009a48:	e108      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a4a:	4b88      	ldr	r3, [pc, #544]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a54:	4b85      	ldr	r3, [pc, #532]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	091b      	lsrs	r3, r3, #4
 8009a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a60:	4b82      	ldr	r3, [pc, #520]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a6a:	4b80      	ldr	r3, [pc, #512]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a6e:	08db      	lsrs	r3, r3, #3
 8009a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 80e1 	beq.w	8009c50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	f000 8083 	beq.w	8009b9c <HAL_RCC_GetSysClockFreq+0x204>
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	f200 80a1 	bhi.w	8009be0 <HAL_RCC_GetSysClockFreq+0x248>
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <HAL_RCC_GetSysClockFreq+0x114>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d056      	beq.n	8009b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009aaa:	e099      	b.n	8009be0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aac:	4b6f      	ldr	r3, [pc, #444]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d02d      	beq.n	8009b14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	08db      	lsrs	r3, r3, #3
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae2:	4b62      	ldr	r3, [pc, #392]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b12:	e087      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b26:	4b51      	ldr	r3, [pc, #324]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b56:	e065      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6a:	4b40      	ldr	r3, [pc, #256]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b9a:	e043      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bae:	4b2f      	ldr	r3, [pc, #188]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bde:	e021      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c24:	4b11      	ldr	r3, [pc, #68]	@ (8009c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c28:	0a5b      	lsrs	r3, r3, #9
 8009c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c2e:	3301      	adds	r3, #1
 8009c30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c48:	ee17 3a90 	vmov	r3, s15
 8009c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c4e:	e005      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61bb      	str	r3, [r7, #24]
      break;
 8009c54:	e002      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c56:	4b07      	ldr	r3, [pc, #28]	@ (8009c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c58:	61bb      	str	r3, [r7, #24]
      break;
 8009c5a:	bf00      	nop
  }

  return sysclockfreq;
 8009c5c:	69bb      	ldr	r3, [r7, #24]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3724      	adds	r7, #36	@ 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	03d09000 	.word	0x03d09000
 8009c74:	003d0900 	.word	0x003d0900
 8009c78:	017d7840 	.word	0x017d7840
 8009c7c:	46000000 	.word	0x46000000
 8009c80:	4c742400 	.word	0x4c742400
 8009c84:	4a742400 	.word	0x4a742400
 8009c88:	4bbebc20 	.word	0x4bbebc20

08009c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c92:	f7ff fe81 	bl	8009998 <HAL_RCC_GetSysClockFreq>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b10      	ldr	r3, [pc, #64]	@ (8009cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	0a1b      	lsrs	r3, r3, #8
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	490f      	ldr	r1, [pc, #60]	@ (8009ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ca4:	5ccb      	ldrb	r3, [r1, r3]
 8009ca6:	f003 031f 	and.w	r3, r3, #31
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cba:	5cd3      	ldrb	r3, [r2, r3]
 8009cbc:	f003 031f 	and.w	r3, r3, #31
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc6:	4a07      	ldr	r2, [pc, #28]	@ (8009ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cca:	4a07      	ldr	r2, [pc, #28]	@ (8009ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cd0:	4b04      	ldr	r3, [pc, #16]	@ (8009ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	08014814 	.word	0x08014814
 8009ce4:	24000004 	.word	0x24000004
 8009ce8:	24000000 	.word	0x24000000

08009cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009cf0:	f7ff ffcc 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	091b      	lsrs	r3, r3, #4
 8009cfc:	f003 0307 	and.w	r3, r3, #7
 8009d00:	4904      	ldr	r1, [pc, #16]	@ (8009d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d02:	5ccb      	ldrb	r3, [r1, r3]
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	58024400 	.word	0x58024400
 8009d14:	08014814 	.word	0x08014814

08009d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d1c:	f7ff ffb6 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b06      	ldr	r3, [pc, #24]	@ (8009d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4904      	ldr	r1, [pc, #16]	@ (8009d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	08014814 	.word	0x08014814

08009d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d48:	b0c6      	sub	sp, #280	@ 0x118
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d68:	2500      	movs	r5, #0
 8009d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8009d6e:	d049      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d7a:	d02f      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d80:	d828      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d86:	d01a      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d8c:	d822      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d96:	d007      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d98:	e01c      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9a:	4bab      	ldr	r3, [pc, #684]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9e:	4aaa      	ldr	r2, [pc, #680]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009da6:	e01a      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dac:	3308      	adds	r3, #8
 8009dae:	2102      	movs	r1, #2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f002 fa49 	bl	800c248 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc2:	3328      	adds	r3, #40	@ 0x28
 8009dc4:	2102      	movs	r1, #2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 faf0 	bl	800c3ac <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009de6:	4b98      	ldr	r3, [pc, #608]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009df4:	4a94      	ldr	r2, [pc, #592]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009df6:	430b      	orrs	r3, r1
 8009df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dfa:	e003      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e10:	f04f 0900 	mov.w	r9, #0
 8009e14:	ea58 0309 	orrs.w	r3, r8, r9
 8009e18:	d047      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d82a      	bhi.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e24:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e41 	.word	0x08009e41
 8009e30:	08009e4f 	.word	0x08009e4f
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009e83 	.word	0x08009e83
 8009e3c:	08009e83 	.word	0x08009e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e40:	4b81      	ldr	r3, [pc, #516]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e44:	4a80      	ldr	r2, [pc, #512]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e4c:	e01a      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e52:	3308      	adds	r3, #8
 8009e54:	2100      	movs	r1, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 f9f6 	bl	800c248 <RCCEx_PLL2_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e62:	e00f      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e68:	3328      	adds	r3, #40	@ 0x28
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f002 fa9d 	bl	800c3ac <RCCEx_PLL3_Config>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e78:	e004      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e80:	e000      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e8c:	4b6e      	ldr	r3, [pc, #440]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e90:	f023 0107 	bic.w	r1, r3, #7
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e9a:	4a6b      	ldr	r2, [pc, #428]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009eb6:	f04f 0b00 	mov.w	fp, #0
 8009eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ebe:	d05b      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ec8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009ecc:	d03b      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009ece:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009ed2:	d834      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ed8:	d037      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ede:	d82e      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ee4:	d033      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009eea:	d828      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ef0:	d01a      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ef6:	d822      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f00:	d007      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009f02:	e01c      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f04:	4b50      	ldr	r3, [pc, #320]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f08:	4a4f      	ldr	r2, [pc, #316]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f10:	e01e      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f16:	3308      	adds	r3, #8
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 f994 	bl	800c248 <RCCEx_PLL2_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f26:	e013      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2c:	3328      	adds	r3, #40	@ 0x28
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f002 fa3b 	bl	800c3ac <RCCEx_PLL3_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f3c:	e008      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f44:	e004      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f46:	bf00      	nop
 8009f48:	e002      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f4a:	bf00      	nop
 8009f4c:	e000      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10b      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f58:	4b3b      	ldr	r3, [pc, #236]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f68:	4a37      	ldr	r2, [pc, #220]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f6a:	430b      	orrs	r3, r1
 8009f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f6e:	e003      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f92:	460b      	mov	r3, r1
 8009f94:	4313      	orrs	r3, r2
 8009f96:	d05d      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fa0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fa4:	d03b      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009fa6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009faa:	d834      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fb0:	d037      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fb6:	d82e      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fbc:	d033      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fc2:	d828      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fc8:	d01a      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fce:	d822      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fd8:	d007      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009fda:	e01c      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe0:	4a19      	ldr	r2, [pc, #100]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe8:	e01e      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fee:	3308      	adds	r3, #8
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 f928 	bl	800c248 <RCCEx_PLL2_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ffe:	e013      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a004:	3328      	adds	r3, #40	@ 0x28
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 f9cf 	bl	800c3ac <RCCEx_PLL3_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a014:	e008      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a01c:	e004      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10d      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a030:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a034:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a040:	4a01      	ldr	r2, [pc, #4]	@ (800a048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a042:	430b      	orrs	r3, r1
 800a044:	6593      	str	r3, [r2, #88]	@ 0x58
 800a046:	e005      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a060:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a064:	2300      	movs	r3, #0
 800a066:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a06a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a06e:	460b      	mov	r3, r1
 800a070:	4313      	orrs	r3, r2
 800a072:	d03a      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07a:	2b30      	cmp	r3, #48	@ 0x30
 800a07c:	d01f      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a07e:	2b30      	cmp	r3, #48	@ 0x30
 800a080:	d819      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a082:	2b20      	cmp	r3, #32
 800a084:	d00c      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a086:	2b20      	cmp	r3, #32
 800a088:	d815      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d019      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a08e:	2b10      	cmp	r3, #16
 800a090:	d111      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a092:	4baa      	ldr	r3, [pc, #680]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a096:	4aa9      	ldr	r2, [pc, #676]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a09c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a09e:	e011      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	2102      	movs	r1, #2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 f8cd 	bl	800c248 <RCCEx_PLL2_Config>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a0b4:	e006      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a0cc:	4b9b      	ldr	r3, [pc, #620]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0da:	4a98      	ldr	r2, [pc, #608]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0e0:	e003      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a0f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a104:	460b      	mov	r3, r1
 800a106:	4313      	orrs	r3, r2
 800a108:	d051      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a114:	d035      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a11a:	d82e      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a11c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a120:	d031      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a126:	d828      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a12c:	d01a      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a12e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a132:	d822      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a13c:	d007      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a13e:	e01c      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a140:	4b7e      	ldr	r3, [pc, #504]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a144:	4a7d      	ldr	r2, [pc, #500]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a14a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a14c:	e01c      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a152:	3308      	adds	r3, #8
 800a154:	2100      	movs	r1, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f002 f876 	bl	800c248 <RCCEx_PLL2_Config>
 800a15c:	4603      	mov	r3, r0
 800a15e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a162:	e011      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	3328      	adds	r3, #40	@ 0x28
 800a16a:	2100      	movs	r1, #0
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f91d 	bl	800c3ac <RCCEx_PLL3_Config>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a178:	e006      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a180:	e002      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a186:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a190:	4b6a      	ldr	r3, [pc, #424]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a194:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a19e:	4a67      	ldr	r2, [pc, #412]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a1ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d053      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1d8:	d033      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a1da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1de:	d82c      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1e4:	d02f      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a1e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1ea:	d826      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1f0:	d02b      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a1f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1f6:	d820      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fc:	d012      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a1fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a202:	d81a      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d022      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a20c:	d115      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a212:	3308      	adds	r3, #8
 800a214:	2101      	movs	r1, #1
 800a216:	4618      	mov	r0, r3
 800a218:	f002 f816 	bl	800c248 <RCCEx_PLL2_Config>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a222:	e015      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a228:	3328      	adds	r3, #40	@ 0x28
 800a22a:	2101      	movs	r1, #1
 800a22c:	4618      	mov	r0, r3
 800a22e:	f002 f8bd 	bl	800c3ac <RCCEx_PLL3_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a238:	e00a      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a240:	e006      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a242:	bf00      	nop
 800a244:	e004      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a246:	bf00      	nop
 800a248:	e002      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a24e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10a      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a258:	4b38      	ldr	r3, [pc, #224]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a25a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a25c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a266:	4a35      	ldr	r2, [pc, #212]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a26c:	e003      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a286:	2300      	movs	r3, #0
 800a288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a28c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d058      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a29e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2a2:	d033      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a2a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2a8:	d82c      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ae:	d02f      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b4:	d826      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2ba:	d02b      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a2bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2c0:	d820      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c6:	d012      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a2c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2cc:	d81a      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d022      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a2d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d6:	d115      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2dc:	3308      	adds	r3, #8
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 ffb1 	bl	800c248 <RCCEx_PLL2_Config>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2ec:	e015      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f2:	3328      	adds	r3, #40	@ 0x28
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 f858 	bl	800c3ac <RCCEx_PLL3_Config>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a302:	e00a      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a30a:	e006      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a30c:	bf00      	nop
 800a30e:	e004      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a310:	bf00      	nop
 800a312:	e002      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a314:	bf00      	nop
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10e      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a322:	4b06      	ldr	r3, [pc, #24]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a332:	4a02      	ldr	r2, [pc, #8]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a334:	430b      	orrs	r3, r1
 800a336:	6593      	str	r3, [r2, #88]	@ 0x58
 800a338:	e006      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a35e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a362:	460b      	mov	r3, r1
 800a364:	4313      	orrs	r3, r2
 800a366:	d037      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a372:	d00e      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a378:	d816      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d018      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a37e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a382:	d111      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a384:	4bc4      	ldr	r3, [pc, #784]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	4ac3      	ldr	r2, [pc, #780]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a38a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a38e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a390:	e00f      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a396:	3308      	adds	r3, #8
 800a398:	2101      	movs	r1, #1
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 ff54 	bl	800c248 <RCCEx_PLL2_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3a6:	e004      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3ba:	4bb7      	ldr	r3, [pc, #732]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3c8:	4ab3      	ldr	r2, [pc, #716]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3ce:	e003      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a3e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d039      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d81c      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a402:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a445 	.word	0x0800a445
 800a40c:	0800a419 	.word	0x0800a419
 800a410:	0800a427 	.word	0x0800a427
 800a414:	0800a445 	.word	0x0800a445
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a418:	4b9f      	ldr	r3, [pc, #636]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	4a9e      	ldr	r2, [pc, #632]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a424:	e00f      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	3308      	adds	r3, #8
 800a42c:	2102      	movs	r1, #2
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 ff0a 	bl	800c248 <RCCEx_PLL2_Config>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a43a:	e004      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a442:	e000      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a444:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a44e:	4b92      	ldr	r3, [pc, #584]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a452:	f023 0103 	bic.w	r1, r3, #3
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a45c:	4a8e      	ldr	r2, [pc, #568]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a45e:	430b      	orrs	r3, r1
 800a460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a462:	e003      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a482:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	f000 8099 	beq.w	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a48e:	4b83      	ldr	r3, [pc, #524]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a82      	ldr	r2, [pc, #520]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a49a:	f7f8 faa1 	bl	80029e0 <HAL_GetTick>
 800a49e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4a2:	e00b      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a4:	f7f8 fa9c 	bl	80029e0 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b64      	cmp	r3, #100	@ 0x64
 800a4b2:	d903      	bls.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4ba:	e005      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4bc:	4b77      	ldr	r3, [pc, #476]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0ed      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d173      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4d0:	4b71      	ldr	r3, [pc, #452]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4dc:	4053      	eors	r3, r2
 800a4de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d015      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4e6:	4b6c      	ldr	r3, [pc, #432]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4f2:	4b69      	ldr	r3, [pc, #420]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4f6:	4a68      	ldr	r2, [pc, #416]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4fe:	4b66      	ldr	r3, [pc, #408]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a502:	4a65      	ldr	r2, [pc, #404]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a508:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a50a:	4a63      	ldr	r2, [pc, #396]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a510:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a51a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a51e:	d118      	bne.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a520:	f7f8 fa5e 	bl	80029e0 <HAL_GetTick>
 800a524:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a528:	e00d      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a52a:	f7f8 fa59 	bl	80029e0 <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a534:	1ad2      	subs	r2, r2, r3
 800a536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d903      	bls.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a544:	e005      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a546:	4b54      	ldr	r3, [pc, #336]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0eb      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a556:	2b00      	cmp	r3, #0
 800a558:	d129      	bne.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a56a:	d10e      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a56c:	4b4a      	ldr	r3, [pc, #296]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a57c:	091a      	lsrs	r2, r3, #4
 800a57e:	4b48      	ldr	r3, [pc, #288]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a580:	4013      	ands	r3, r2
 800a582:	4a45      	ldr	r2, [pc, #276]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a584:	430b      	orrs	r3, r1
 800a586:	6113      	str	r3, [r2, #16]
 800a588:	e005      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a58a:	4b43      	ldr	r3, [pc, #268]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	4a42      	ldr	r2, [pc, #264]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a594:	6113      	str	r3, [r2, #16]
 800a596:	4b40      	ldr	r3, [pc, #256]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a598:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a59e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5a6:	4a3c      	ldr	r2, [pc, #240]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5ac:	e008      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a5b6:	e003      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f002 0301 	and.w	r3, r2, #1
 800a5cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a5d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f000 808f 	beq.w	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5e8:	2b28      	cmp	r3, #40	@ 0x28
 800a5ea:	d871      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a6d9 	.word	0x0800a6d9
 800a5f8:	0800a6d1 	.word	0x0800a6d1
 800a5fc:	0800a6d1 	.word	0x0800a6d1
 800a600:	0800a6d1 	.word	0x0800a6d1
 800a604:	0800a6d1 	.word	0x0800a6d1
 800a608:	0800a6d1 	.word	0x0800a6d1
 800a60c:	0800a6d1 	.word	0x0800a6d1
 800a610:	0800a6d1 	.word	0x0800a6d1
 800a614:	0800a6a5 	.word	0x0800a6a5
 800a618:	0800a6d1 	.word	0x0800a6d1
 800a61c:	0800a6d1 	.word	0x0800a6d1
 800a620:	0800a6d1 	.word	0x0800a6d1
 800a624:	0800a6d1 	.word	0x0800a6d1
 800a628:	0800a6d1 	.word	0x0800a6d1
 800a62c:	0800a6d1 	.word	0x0800a6d1
 800a630:	0800a6d1 	.word	0x0800a6d1
 800a634:	0800a6bb 	.word	0x0800a6bb
 800a638:	0800a6d1 	.word	0x0800a6d1
 800a63c:	0800a6d1 	.word	0x0800a6d1
 800a640:	0800a6d1 	.word	0x0800a6d1
 800a644:	0800a6d1 	.word	0x0800a6d1
 800a648:	0800a6d1 	.word	0x0800a6d1
 800a64c:	0800a6d1 	.word	0x0800a6d1
 800a650:	0800a6d1 	.word	0x0800a6d1
 800a654:	0800a6d9 	.word	0x0800a6d9
 800a658:	0800a6d1 	.word	0x0800a6d1
 800a65c:	0800a6d1 	.word	0x0800a6d1
 800a660:	0800a6d1 	.word	0x0800a6d1
 800a664:	0800a6d1 	.word	0x0800a6d1
 800a668:	0800a6d1 	.word	0x0800a6d1
 800a66c:	0800a6d1 	.word	0x0800a6d1
 800a670:	0800a6d1 	.word	0x0800a6d1
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6d1 	.word	0x0800a6d1
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	0800a6d1 	.word	0x0800a6d1
 800a688:	0800a6d1 	.word	0x0800a6d1
 800a68c:	0800a6d1 	.word	0x0800a6d1
 800a690:	0800a6d1 	.word	0x0800a6d1
 800a694:	0800a6d9 	.word	0x0800a6d9
 800a698:	58024400 	.word	0x58024400
 800a69c:	58024800 	.word	0x58024800
 800a6a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 fdcb 	bl	800c248 <RCCEx_PLL2_Config>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6b8:	e00f      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6be:	3328      	adds	r3, #40	@ 0x28
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 fe72 	bl	800c3ac <RCCEx_PLL3_Config>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6ce:	e004      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6d6:	e000      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a6e2:	4bbf      	ldr	r3, [pc, #764]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6f0:	4abb      	ldr	r2, [pc, #748]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6f6:	e003      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f002 0302 	and.w	r3, r2, #2
 800a70c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a710:	2300      	movs	r3, #0
 800a712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a716:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4313      	orrs	r3, r2
 800a71e:	d041      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a726:	2b05      	cmp	r3, #5
 800a728:	d824      	bhi.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a72a:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a77d 	.word	0x0800a77d
 800a734:	0800a749 	.word	0x0800a749
 800a738:	0800a75f 	.word	0x0800a75f
 800a73c:	0800a77d 	.word	0x0800a77d
 800a740:	0800a77d 	.word	0x0800a77d
 800a744:	0800a77d 	.word	0x0800a77d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74c:	3308      	adds	r3, #8
 800a74e:	2101      	movs	r1, #1
 800a750:	4618      	mov	r0, r3
 800a752:	f001 fd79 	bl	800c248 <RCCEx_PLL2_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a75c:	e00f      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a762:	3328      	adds	r3, #40	@ 0x28
 800a764:	2101      	movs	r1, #1
 800a766:	4618      	mov	r0, r3
 800a768:	f001 fe20 	bl	800c3ac <RCCEx_PLL3_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a772:	e004      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a77a:	e000      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a77e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a786:	4b96      	ldr	r3, [pc, #600]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a78a:	f023 0107 	bic.w	r1, r3, #7
 800a78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a794:	4a92      	ldr	r2, [pc, #584]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a796:	430b      	orrs	r3, r1
 800a798:	6553      	str	r3, [r2, #84]	@ 0x54
 800a79a:	e003      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a79c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f002 0304 	and.w	r3, r2, #4
 800a7b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	d044      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7cc:	2b05      	cmp	r3, #5
 800a7ce:	d825      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a7d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a825 	.word	0x0800a825
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a807 	.word	0x0800a807
 800a7e4:	0800a825 	.word	0x0800a825
 800a7e8:	0800a825 	.word	0x0800a825
 800a7ec:	0800a825 	.word	0x0800a825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 fd25 	bl	800c248 <RCCEx_PLL2_Config>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a804:	e00f      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80a:	3328      	adds	r3, #40	@ 0x28
 800a80c:	2101      	movs	r1, #1
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 fdcc 	bl	800c3ac <RCCEx_PLL3_Config>
 800a814:	4603      	mov	r3, r0
 800a816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a81a:	e004      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a822:	e000      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a824:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10b      	bne.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a82e:	4b6c      	ldr	r3, [pc, #432]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a832:	f023 0107 	bic.w	r1, r3, #7
 800a836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a83e:	4a68      	ldr	r2, [pc, #416]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a840:	430b      	orrs	r3, r1
 800a842:	6593      	str	r3, [r2, #88]	@ 0x58
 800a844:	e003      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a84a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f002 0320 	and.w	r3, r2, #32
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a868:	460b      	mov	r3, r1
 800a86a:	4313      	orrs	r3, r2
 800a86c:	d055      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a87a:	d033      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a87c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a880:	d82c      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a886:	d02f      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a88c:	d826      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a88e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a892:	d02b      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a898:	d820      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a89a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a89e:	d012      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a4:	d81a      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d022      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a8aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ae:	d115      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fcc5 	bl	800c248 <RCCEx_PLL2_Config>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8c4:	e015      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ca:	3328      	adds	r3, #40	@ 0x28
 800a8cc:	2102      	movs	r1, #2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 fd6c 	bl	800c3ac <RCCEx_PLL3_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8da:	e00a      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8e2:	e006      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8e4:	bf00      	nop
 800a8e6:	e004      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8e8:	bf00      	nop
 800a8ea:	e002      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8ec:	bf00      	nop
 800a8ee:	e000      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8fa:	4b39      	ldr	r3, [pc, #228]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a90a:	4a35      	ldr	r2, [pc, #212]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a910:	e003      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a916:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a926:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a92a:	2300      	movs	r3, #0
 800a92c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a930:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d058      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a942:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a946:	d033      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a948:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a94c:	d82c      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a952:	d02f      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a958:	d826      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a95a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a95e:	d02b      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a964:	d820      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a96a:	d012      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a96c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a970:	d81a      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d022      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a97a:	d115      	bne.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	3308      	adds	r3, #8
 800a982:	2100      	movs	r1, #0
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fc5f 	bl	800c248 <RCCEx_PLL2_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a990:	e015      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a996:	3328      	adds	r3, #40	@ 0x28
 800a998:	2102      	movs	r1, #2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 fd06 	bl	800c3ac <RCCEx_PLL3_Config>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9a6:	e00a      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9ae:	e006      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9b0:	bf00      	nop
 800a9b2:	e004      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9b4:	bf00      	nop
 800a9b6:	e002      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9b8:	bf00      	nop
 800a9ba:	e000      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10e      	bne.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9c6:	4b06      	ldr	r3, [pc, #24]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9d6:	4a02      	ldr	r2, [pc, #8]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9dc:	e006      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a9de:	bf00      	nop
 800a9e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a9f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa06:	460b      	mov	r3, r1
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d055      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa18:	d033      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800aa1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa1e:	d82c      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa24:	d02f      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800aa26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa2a:	d826      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa30:	d02b      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800aa32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa36:	d820      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa3c:	d012      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aa3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa42:	d81a      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d022      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aa48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa4c:	d115      	bne.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa52:	3308      	adds	r3, #8
 800aa54:	2100      	movs	r1, #0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fbf6 	bl	800c248 <RCCEx_PLL2_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa62:	e015      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa68:	3328      	adds	r3, #40	@ 0x28
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fc9d 	bl	800c3ac <RCCEx_PLL3_Config>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa78:	e00a      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa80:	e006      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa82:	bf00      	nop
 800aa84:	e004      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa86:	bf00      	nop
 800aa88:	e002      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa8a:	bf00      	nop
 800aa8c:	e000      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10b      	bne.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa98:	4ba0      	ldr	r3, [pc, #640]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaa8:	4a9c      	ldr	r2, [pc, #624]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaae:	e003      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f002 0308 	and.w	r3, r2, #8
 800aac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aace:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aad2:	460b      	mov	r3, r1
 800aad4:	4313      	orrs	r3, r2
 800aad6:	d01e      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae4:	d10c      	bne.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaea:	3328      	adds	r3, #40	@ 0x28
 800aaec:	2102      	movs	r1, #2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 fc5c 	bl	800c3ac <RCCEx_PLL3_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ab00:	4b86      	ldr	r3, [pc, #536]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab10:	4a82      	ldr	r2, [pc, #520]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab12:	430b      	orrs	r3, r1
 800ab14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f002 0310 	and.w	r3, r2, #16
 800ab22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab26:	2300      	movs	r3, #0
 800ab28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ab30:	460b      	mov	r3, r1
 800ab32:	4313      	orrs	r3, r2
 800ab34:	d01e      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab42:	d10c      	bne.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab48:	3328      	adds	r3, #40	@ 0x28
 800ab4a:	2102      	movs	r1, #2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f001 fc2d 	bl	800c3ac <RCCEx_PLL3_Config>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab5e:	4b6f      	ldr	r3, [pc, #444]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab6e:	4a6b      	ldr	r2, [pc, #428]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab70:	430b      	orrs	r3, r1
 800ab72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ab80:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab82:	2300      	movs	r3, #0
 800ab84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	d03e      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab9c:	d022      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ab9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba2:	d81b      	bhi.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abac:	d00b      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800abae:	e015      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb4:	3308      	adds	r3, #8
 800abb6:	2100      	movs	r1, #0
 800abb8:	4618      	mov	r0, r3
 800abba:	f001 fb45 	bl	800c248 <RCCEx_PLL2_Config>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abc4:	e00f      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abca:	3328      	adds	r3, #40	@ 0x28
 800abcc:	2102      	movs	r1, #2
 800abce:	4618      	mov	r0, r3
 800abd0:	f001 fbec 	bl	800c3ac <RCCEx_PLL3_Config>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abda:	e004      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abe2:	e000      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800abe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10b      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abee:	4b4b      	ldr	r3, [pc, #300]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abfe:	4a47      	ldr	r2, [pc, #284]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac00:	430b      	orrs	r3, r1
 800ac02:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac04:	e003      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac1a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ac24:	460b      	mov	r3, r1
 800ac26:	4313      	orrs	r3, r2
 800ac28:	d03b      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac36:	d01f      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ac38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac3c:	d818      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ac3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac42:	d003      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ac44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac48:	d007      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ac4a:	e011      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac4c:	4b33      	ldr	r3, [pc, #204]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac50:	4a32      	ldr	r2, [pc, #200]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac58:	e00f      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5e:	3328      	adds	r3, #40	@ 0x28
 800ac60:	2101      	movs	r1, #1
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 fba2 	bl	800c3ac <RCCEx_PLL3_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac6e:	e004      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac76:	e000      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ac78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac82:	4b26      	ldr	r3, [pc, #152]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac92:	4a22      	ldr	r2, [pc, #136]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac98:	e003      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800acae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acb0:	2300      	movs	r3, #0
 800acb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acb4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800acb8:	460b      	mov	r3, r1
 800acba:	4313      	orrs	r3, r2
 800acbc:	d034      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800accc:	d007      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800acce:	e011      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd0:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	4a11      	ldr	r2, [pc, #68]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800acdc:	e00e      	b.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace2:	3308      	adds	r3, #8
 800ace4:	2102      	movs	r1, #2
 800ace6:	4618      	mov	r0, r3
 800ace8:	f001 faae 	bl	800c248 <RCCEx_PLL2_Config>
 800acec:	4603      	mov	r3, r0
 800acee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800acf2:	e003      	b.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10d      	bne.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad12:	4a02      	ldr	r2, [pc, #8]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad14:	430b      	orrs	r3, r1
 800ad16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad18:	e006      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ad1a:	bf00      	nop
 800ad1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ad34:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad36:	2300      	movs	r3, #0
 800ad38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4313      	orrs	r3, r2
 800ad42:	d00c      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad48:	3328      	adds	r3, #40	@ 0x28
 800ad4a:	2102      	movs	r1, #2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f001 fb2d 	bl	800c3ac <RCCEx_PLL3_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ad6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ad74:	460b      	mov	r3, r1
 800ad76:	4313      	orrs	r3, r2
 800ad78:	d036      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad84:	d018      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ad86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad8a:	d811      	bhi.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad90:	d014      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ad92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad96:	d80b      	bhi.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d011      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ad9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ada0:	d106      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada2:	4bb7      	ldr	r3, [pc, #732]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	4ab6      	ldr	r2, [pc, #728]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800adae:	e008      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adb6:	e004      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adb8:	bf00      	nop
 800adba:	e002      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adbc:	bf00      	nop
 800adbe:	e000      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adca:	4bad      	ldr	r3, [pc, #692]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800add6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800add8:	4aa9      	ldr	r2, [pc, #676]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adda:	430b      	orrs	r3, r1
 800addc:	6553      	str	r3, [r2, #84]	@ 0x54
 800adde:	e003      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800adf4:	653b      	str	r3, [r7, #80]	@ 0x50
 800adf6:	2300      	movs	r3, #0
 800adf8:	657b      	str	r3, [r7, #84]	@ 0x54
 800adfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800adfe:	460b      	mov	r3, r1
 800ae00:	4313      	orrs	r3, r2
 800ae02:	d009      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae04:	4b9e      	ldr	r3, [pc, #632]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae12:	4a9b      	ldr	r2, [pc, #620]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae14:	430b      	orrs	r3, r1
 800ae16:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ae24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae26:	2300      	movs	r3, #0
 800ae28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4313      	orrs	r3, r2
 800ae32:	d009      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae34:	4b92      	ldr	r3, [pc, #584]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae38:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ae3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae42:	4a8f      	ldr	r2, [pc, #572]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae44:	430b      	orrs	r3, r1
 800ae46:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ae54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae56:	2300      	movs	r3, #0
 800ae58:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae5e:	460b      	mov	r3, r1
 800ae60:	4313      	orrs	r3, r2
 800ae62:	d00e      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae64:	4b86      	ldr	r3, [pc, #536]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	4a85      	ldr	r2, [pc, #532]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae6e:	6113      	str	r3, [r2, #16]
 800ae70:	4b83      	ldr	r3, [pc, #524]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae72:	6919      	ldr	r1, [r3, #16]
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae7c:	4a80      	ldr	r2, [pc, #512]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	d009      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae9e:	4b78      	ldr	r3, [pc, #480]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aea2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeac:	4a74      	ldr	r2, [pc, #464]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aebe:	633b      	str	r3, [r7, #48]	@ 0x30
 800aec0:	2300      	movs	r3, #0
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aec8:	460b      	mov	r3, r1
 800aeca:	4313      	orrs	r3, r2
 800aecc:	d00a      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aece:	4b6c      	ldr	r3, [pc, #432]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aede:	4a68      	ldr	r2, [pc, #416]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	2100      	movs	r1, #0
 800aeee:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aef6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aefa:	460b      	mov	r3, r1
 800aefc:	4313      	orrs	r3, r2
 800aefe:	d011      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af04:	3308      	adds	r3, #8
 800af06:	2100      	movs	r1, #0
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 f99d 	bl	800c248 <RCCEx_PLL2_Config>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	2100      	movs	r1, #0
 800af2e:	6239      	str	r1, [r7, #32]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
 800af36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af3a:	460b      	mov	r3, r1
 800af3c:	4313      	orrs	r3, r2
 800af3e:	d011      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af44:	3308      	adds	r3, #8
 800af46:	2101      	movs	r1, #1
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f97d 	bl	800c248 <RCCEx_PLL2_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	2100      	movs	r1, #0
 800af6e:	61b9      	str	r1, [r7, #24]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	61fb      	str	r3, [r7, #28]
 800af76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af7a:	460b      	mov	r3, r1
 800af7c:	4313      	orrs	r3, r2
 800af7e:	d011      	beq.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af84:	3308      	adds	r3, #8
 800af86:	2102      	movs	r1, #2
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 f95d 	bl	800c248 <RCCEx_PLL2_Config>
 800af8e:	4603      	mov	r3, r0
 800af90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	2100      	movs	r1, #0
 800afae:	6139      	str	r1, [r7, #16]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afba:	460b      	mov	r3, r1
 800afbc:	4313      	orrs	r3, r2
 800afbe:	d011      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc4:	3328      	adds	r3, #40	@ 0x28
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f001 f9ef 	bl	800c3ac <RCCEx_PLL3_Config>
 800afce:	4603      	mov	r3, r0
 800afd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800afd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	2100      	movs	r1, #0
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800affa:	460b      	mov	r3, r1
 800affc:	4313      	orrs	r3, r2
 800affe:	d011      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b004:	3328      	adds	r3, #40	@ 0x28
 800b006:	2101      	movs	r1, #1
 800b008:	4618      	mov	r0, r3
 800b00a:	f001 f9cf 	bl	800c3ac <RCCEx_PLL3_Config>
 800b00e:	4603      	mov	r3, r0
 800b010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	2100      	movs	r1, #0
 800b02e:	6039      	str	r1, [r7, #0]
 800b030:	f003 0320 	and.w	r3, r3, #32
 800b034:	607b      	str	r3, [r7, #4]
 800b036:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b03a:	460b      	mov	r3, r1
 800b03c:	4313      	orrs	r3, r2
 800b03e:	d011      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b044:	3328      	adds	r3, #40	@ 0x28
 800b046:	2102      	movs	r1, #2
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f9af 	bl	800c3ac <RCCEx_PLL3_Config>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b064:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e000      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
}
 800b072:	4618      	mov	r0, r3
 800b074:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b078:	46bd      	mov	sp, r7
 800b07a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b07e:	bf00      	nop
 800b080:	58024400 	.word	0x58024400

0800b084 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b090      	sub	sp, #64	@ 0x40
 800b088:	af00      	add	r7, sp, #0
 800b08a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b092:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b096:	430b      	orrs	r3, r1
 800b098:	f040 8094 	bne.w	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b09c:	4b9b      	ldr	r3, [pc, #620]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	f200 8087 	bhi.w	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0c9 	.word	0x0800b0c9
 800b0b8:	0800b0f1 	.word	0x0800b0f1
 800b0bc:	0800b119 	.word	0x0800b119
 800b0c0:	0800b1b5 	.word	0x0800b1b5
 800b0c4:	0800b141 	.word	0x0800b141
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c8:	4b90      	ldr	r3, [pc, #576]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0d4:	d108      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 ff62 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e4:	f000 bc93 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ec:	f000 bc8f 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0f0:	4b86      	ldr	r3, [pc, #536]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0fc:	d108      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fe:	f107 0318 	add.w	r3, r7, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fca6 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b10c:	f000 bc7f 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b114:	f000 bc7b 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b118:	4b7c      	ldr	r3, [pc, #496]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b124:	d108      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b126:	f107 030c 	add.w	r3, r7, #12
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fde6 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b134:	f000 bc6b 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b13c:	f000 bc67 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b140:	4b72      	ldr	r3, [pc, #456]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b144:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b148:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b14a:	4b70      	ldr	r3, [pc, #448]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b04      	cmp	r3, #4
 800b154:	d10c      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d109      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b15c:	4b6b      	ldr	r3, [pc, #428]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	08db      	lsrs	r3, r3, #3
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	4a6a      	ldr	r2, [pc, #424]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b168:	fa22 f303 	lsr.w	r3, r2, r3
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b16e:	e01f      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b170:	4b66      	ldr	r3, [pc, #408]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b17c:	d106      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b184:	d102      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b186:	4b63      	ldr	r3, [pc, #396]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b18a:	e011      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b18c:	4b5f      	ldr	r3, [pc, #380]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b198:	d106      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1a0:	d102      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1a2:	4b5d      	ldr	r3, [pc, #372]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a6:	e003      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1ac:	f000 bc2f 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1b0:	f000 bc2d 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1b4:	4b59      	ldr	r3, [pc, #356]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	f000 bc29 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c0:	f000 bc25 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b1cc:	430b      	orrs	r3, r1
 800b1ce:	f040 80a7 	bne.w	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b1d2:	4b4e      	ldr	r3, [pc, #312]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b1da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1e2:	d054      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1ea:	f200 808b 	bhi.w	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b1f4:	f000 8083 	beq.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b1fe:	f200 8081 	bhi.w	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b208:	d02f      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b210:	d878      	bhi.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b21e:	d012      	beq.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b220:	e070      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b222:	4b3a      	ldr	r3, [pc, #232]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b22a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b22e:	d107      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b234:	4618      	mov	r0, r3
 800b236:	f000 feb5 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b23e:	e3e6      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b244:	e3e3      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b246:	4b31      	ldr	r3, [pc, #196]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b24e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b252:	d107      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b254:	f107 0318 	add.w	r3, r7, #24
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fbfb 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b262:	e3d4      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b268:	e3d1      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b26a:	4b28      	ldr	r3, [pc, #160]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b276:	d107      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b278:	f107 030c 	add.w	r3, r7, #12
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fd3d 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b286:	e3c2      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28c:	e3bf      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b28e:	4b1f      	ldr	r3, [pc, #124]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b296:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b298:	4b1c      	ldr	r3, [pc, #112]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0304 	and.w	r3, r3, #4
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d10c      	bne.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2aa:	4b18      	ldr	r3, [pc, #96]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	08db      	lsrs	r3, r3, #3
 800b2b0:	f003 0303 	and.w	r3, r3, #3
 800b2b4:	4a16      	ldr	r2, [pc, #88]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2bc:	e01e      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2be:	4b13      	ldr	r3, [pc, #76]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ca:	d106      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2d2:	d102      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2d8:	e010      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2da:	4b0c      	ldr	r3, [pc, #48]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2e6:	d106      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ee:	d102      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2f0:	4b09      	ldr	r3, [pc, #36]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f4:	e002      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2fa:	e388      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2fc:	e387      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2fe:	4b07      	ldr	r3, [pc, #28]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b302:	e384      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b308:	e381      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b30a:	bf00      	nop
 800b30c:	58024400 	.word	0x58024400
 800b310:	03d09000 	.word	0x03d09000
 800b314:	003d0900 	.word	0x003d0900
 800b318:	017d7840 	.word	0x017d7840
 800b31c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b324:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b328:	430b      	orrs	r3, r1
 800b32a:	f040 809c 	bne.w	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b32e:	4b9e      	ldr	r3, [pc, #632]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b332:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b336:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b33e:	d054      	beq.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b346:	f200 808b 	bhi.w	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b350:	f000 8083 	beq.w	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b35a:	f200 8081 	bhi.w	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b364:	d02f      	beq.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b36c:	d878      	bhi.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	2b00      	cmp	r3, #0
 800b372:	d004      	beq.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b37a:	d012      	beq.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b37c:	e070      	b.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b37e:	4b8a      	ldr	r3, [pc, #552]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b38a:	d107      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b38c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b390:	4618      	mov	r0, r3
 800b392:	f000 fe07 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39a:	e338      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3a0:	e335      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3a2:	4b81      	ldr	r3, [pc, #516]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3ae:	d107      	bne.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3b0:	f107 0318 	add.w	r3, r7, #24
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 fb4d 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3be:	e326      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c4:	e323      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3c6:	4b78      	ldr	r3, [pc, #480]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3d2:	d107      	bne.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d4:	f107 030c 	add.w	r3, r7, #12
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 fc8f 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e2:	e314      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e8:	e311      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ea:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f4:	4b6c      	ldr	r3, [pc, #432]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d10c      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b402:	2b00      	cmp	r3, #0
 800b404:	d109      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b406:	4b68      	ldr	r3, [pc, #416]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	08db      	lsrs	r3, r3, #3
 800b40c:	f003 0303 	and.w	r3, r3, #3
 800b410:	4a66      	ldr	r2, [pc, #408]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b412:	fa22 f303 	lsr.w	r3, r2, r3
 800b416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b418:	e01e      	b.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b41a:	4b63      	ldr	r3, [pc, #396]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b426:	d106      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b42e:	d102      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b430:	4b5f      	ldr	r3, [pc, #380]	@ (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b434:	e010      	b.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b436:	4b5c      	ldr	r3, [pc, #368]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b43e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b442:	d106      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b44a:	d102      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b44c:	4b59      	ldr	r3, [pc, #356]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b450:	e002      	b.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b456:	e2da      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b458:	e2d9      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b45a:	4b57      	ldr	r3, [pc, #348]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45e:	e2d6      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b464:	e2d3      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b46a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b46e:	430b      	orrs	r3, r1
 800b470:	f040 80a7 	bne.w	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b474:	4b4c      	ldr	r3, [pc, #304]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b478:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b47c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b484:	d055      	beq.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b48c:	f200 8096 	bhi.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b492:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b496:	f000 8084 	beq.w	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4a0:	f200 808c 	bhi.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4aa:	d030      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4b2:	f200 8083 	bhi.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4c2:	d012      	beq.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b4c4:	e07a      	b.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4c6:	4b38      	ldr	r3, [pc, #224]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4d2:	d107      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fd63 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e2:	e294      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4e8:	e291      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4f6:	d107      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4f8:	f107 0318 	add.w	r3, r7, #24
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 faa9 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b506:	e282      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b50c:	e27f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b50e:	4b26      	ldr	r3, [pc, #152]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b51a:	d107      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fbeb 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b52a:	e270      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b530:	e26d      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b532:	4b1d      	ldr	r3, [pc, #116]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b53c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b04      	cmp	r3, #4
 800b546:	d10c      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b54e:	4b16      	ldr	r3, [pc, #88]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	08db      	lsrs	r3, r3, #3
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	4a14      	ldr	r2, [pc, #80]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b55a:	fa22 f303 	lsr.w	r3, r2, r3
 800b55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b560:	e01e      	b.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b562:	4b11      	ldr	r3, [pc, #68]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b56a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b56e:	d106      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b576:	d102      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b578:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b57c:	e010      	b.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b58a:	d106      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b592:	d102      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b594:	4b07      	ldr	r3, [pc, #28]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b598:	e002      	b.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b59e:	e236      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5a0:	e235      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5a2:	4b05      	ldr	r3, [pc, #20]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a6:	e232      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5a8:	58024400 	.word	0x58024400
 800b5ac:	03d09000 	.word	0x03d09000
 800b5b0:	003d0900 	.word	0x003d0900
 800b5b4:	017d7840 	.word	0x017d7840
 800b5b8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c0:	e225      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b5c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5c6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b5ca:	430b      	orrs	r3, r1
 800b5cc:	f040 8085 	bne.w	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b5d0:	4b9c      	ldr	r3, [pc, #624]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b5d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5e0:	d06b      	beq.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5e8:	d874      	bhi.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5f0:	d056      	beq.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5f8:	d86c      	bhi.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b600:	d03b      	beq.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b608:	d864      	bhi.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b610:	d021      	beq.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b618:	d85c      	bhi.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b626:	d004      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b628:	e054      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b62a:	f7fe fb5f 	bl	8009cec <HAL_RCC_GetPCLK1Freq>
 800b62e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b630:	e1ed      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b632:	4b84      	ldr	r3, [pc, #528]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b63a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b63e:	d107      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b640:	f107 0318 	add.w	r3, r7, #24
 800b644:	4618      	mov	r0, r3
 800b646:	f000 fa05 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64e:	e1de      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b654:	e1db      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b656:	4b7b      	ldr	r3, [pc, #492]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b662:	d107      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b664:	f107 030c 	add.w	r3, r7, #12
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fb47 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b672:	e1cc      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b678:	e1c9      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b67a:	4b72      	ldr	r3, [pc, #456]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0304 	and.w	r3, r3, #4
 800b682:	2b04      	cmp	r3, #4
 800b684:	d109      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b686:	4b6f      	ldr	r3, [pc, #444]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	08db      	lsrs	r3, r3, #3
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	4a6d      	ldr	r2, [pc, #436]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b692:	fa22 f303 	lsr.w	r3, r2, r3
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b698:	e1b9      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b69e:	e1b6      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6a0:	4b68      	ldr	r3, [pc, #416]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6ac:	d102      	bne.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b6ae:	4b67      	ldr	r3, [pc, #412]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b2:	e1ac      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b8:	e1a9      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6ba:	4b62      	ldr	r3, [pc, #392]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6c6:	d102      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b6c8:	4b61      	ldr	r3, [pc, #388]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6cc:	e19f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d2:	e19c      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d8:	e199      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6de:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b6e2:	430b      	orrs	r3, r1
 800b6e4:	d173      	bne.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b6e6:	4b57      	ldr	r3, [pc, #348]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b6ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6f6:	d02f      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6fe:	d863      	bhi.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b702:	2b00      	cmp	r3, #0
 800b704:	d004      	beq.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b70c:	d012      	beq.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b70e:	e05b      	b.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b710:	4b4c      	ldr	r3, [pc, #304]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b71c:	d107      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b71e:	f107 0318 	add.w	r3, r7, #24
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f996 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72c:	e16f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b732:	e16c      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b734:	4b43      	ldr	r3, [pc, #268]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b740:	d107      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b742:	f107 030c 	add.w	r3, r7, #12
 800b746:	4618      	mov	r0, r3
 800b748:	f000 fad8 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b750:	e15d      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b756:	e15a      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b758:	4b3a      	ldr	r3, [pc, #232]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b75a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b75c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b760:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b762:	4b38      	ldr	r3, [pc, #224]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 0304 	and.w	r3, r3, #4
 800b76a:	2b04      	cmp	r3, #4
 800b76c:	d10c      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b770:	2b00      	cmp	r3, #0
 800b772:	d109      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b774:	4b33      	ldr	r3, [pc, #204]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	08db      	lsrs	r3, r3, #3
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	4a32      	ldr	r2, [pc, #200]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b780:	fa22 f303 	lsr.w	r3, r2, r3
 800b784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b786:	e01e      	b.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b788:	4b2e      	ldr	r3, [pc, #184]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b794:	d106      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b79e:	4b2b      	ldr	r3, [pc, #172]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7a2:	e010      	b.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7a4:	4b27      	ldr	r3, [pc, #156]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7b0:	d106      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b8:	d102      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7ba:	4b25      	ldr	r3, [pc, #148]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7be:	e002      	b.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7c4:	e123      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7c6:	e122      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7cc:	e11f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b7d6:	430b      	orrs	r3, r1
 800b7d8:	d13c      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b7da:	4b1a      	ldr	r3, [pc, #104]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d004      	beq.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f0:	d012      	beq.n	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b7f2:	e023      	b.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7f4:	4b13      	ldr	r3, [pc, #76]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b800:	d107      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b806:	4618      	mov	r0, r3
 800b808:	f000 fbcc 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b810:	e0fd      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b816:	e0fa      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b818:	4b0a      	ldr	r3, [pc, #40]	@ (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b824:	d107      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b826:	f107 0318 	add.w	r3, r7, #24
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f912 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b834:	e0eb      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83a:	e0e8      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b840:	e0e5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
 800b848:	03d09000 	.word	0x03d09000
 800b84c:	003d0900 	.word	0x003d0900
 800b850:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b858:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b85c:	430b      	orrs	r3, r1
 800b85e:	f040 8085 	bne.w	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b862:	4b6d      	ldr	r3, [pc, #436]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b866:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b86a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b872:	d06b      	beq.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b87a:	d874      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b882:	d056      	beq.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b88a:	d86c      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b892:	d03b      	beq.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b89a:	d864      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a2:	d021      	beq.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8aa:	d85c      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8b8:	d004      	beq.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b8ba:	e054      	b.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8bc:	f000 f8b4 	bl	800ba28 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8c2:	e0a4      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8c4:	4b54      	ldr	r3, [pc, #336]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8d0:	d107      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d2:	f107 0318 	add.w	r3, r7, #24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 f8bc 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e0:	e095      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e6:	e092      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8e8:	4b4b      	ldr	r3, [pc, #300]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f4:	d107      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f6:	f107 030c 	add.w	r3, r7, #12
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 f9fe 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b904:	e083      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90a:	e080      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b90c:	4b42      	ldr	r3, [pc, #264]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	2b04      	cmp	r3, #4
 800b916:	d109      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b918:	4b3f      	ldr	r3, [pc, #252]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	08db      	lsrs	r3, r3, #3
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	4a3e      	ldr	r2, [pc, #248]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b924:	fa22 f303 	lsr.w	r3, r2, r3
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b92a:	e070      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b930:	e06d      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b932:	4b39      	ldr	r3, [pc, #228]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b93e:	d102      	bne.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b940:	4b37      	ldr	r3, [pc, #220]	@ (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b944:	e063      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b94a:	e060      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b94c:	4b32      	ldr	r3, [pc, #200]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b958:	d102      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b95a:	4b32      	ldr	r3, [pc, #200]	@ (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b95e:	e056      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b964:	e053      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96a:	e050      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b970:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b974:	430b      	orrs	r3, r1
 800b976:	d148      	bne.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b978:	4b27      	ldr	r3, [pc, #156]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b97c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b988:	d02a      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b990:	d838      	bhi.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b99e:	d00d      	beq.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b9a0:	e030      	b.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9a2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ae:	d102      	bne.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b4:	e02b      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ba:	e028      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9bc:	4b16      	ldr	r3, [pc, #88]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9c8:	d107      	bne.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 fae8 	bl	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d8:	e019      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9de:	e016      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ec:	d107      	bne.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ee:	f107 0318 	add.w	r3, r7, #24
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f82e 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fc:	e007      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba08:	e001      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3740      	adds	r7, #64	@ 0x40
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	03d09000 	.word	0x03d09000
 800ba20:	003d0900 	.word	0x003d0900
 800ba24:	017d7840 	.word	0x017d7840

0800ba28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba2c:	f7fe f92e 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 800ba30:	4602      	mov	r2, r0
 800ba32:	4b06      	ldr	r3, [pc, #24]	@ (800ba4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	091b      	lsrs	r3, r3, #4
 800ba38:	f003 0307 	and.w	r3, r3, #7
 800ba3c:	4904      	ldr	r1, [pc, #16]	@ (800ba50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba3e:	5ccb      	ldrb	r3, [r1, r3]
 800ba40:	f003 031f 	and.w	r3, r3, #31
 800ba44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	58024400 	.word	0x58024400
 800ba50:	08014814 	.word	0x08014814

0800ba54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b089      	sub	sp, #36	@ 0x24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba5c:	4ba1      	ldr	r3, [pc, #644]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba60:	f003 0303 	and.w	r3, r3, #3
 800ba64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba66:	4b9f      	ldr	r3, [pc, #636]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6a:	0b1b      	lsrs	r3, r3, #12
 800ba6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba72:	4b9c      	ldr	r3, [pc, #624]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba76:	091b      	lsrs	r3, r3, #4
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba7e:	4b99      	ldr	r3, [pc, #612]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba82:	08db      	lsrs	r3, r3, #3
 800ba84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	fb02 f303 	mul.w	r3, r2, r3
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8111 	beq.w	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	f000 8083 	beq.w	800bbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	2b02      	cmp	r3, #2
 800baae:	f200 80a1 	bhi.w	800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d056      	beq.n	800bb6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800babe:	e099      	b.n	800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bac0:	4b88      	ldr	r3, [pc, #544]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0320 	and.w	r3, r3, #32
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02d      	beq.n	800bb28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bacc:	4b85      	ldr	r3, [pc, #532]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	08db      	lsrs	r3, r3, #3
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	4a84      	ldr	r2, [pc, #528]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bad8:	fa22 f303 	lsr.w	r3, r2, r3
 800badc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	ee07 3a90 	vmov	s15, r3
 800bae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf6:	4b7b      	ldr	r3, [pc, #492]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb26:	e087      	b.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3a:	4b6a      	ldr	r3, [pc, #424]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb6a:	e065      	b.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	ee07 3a90 	vmov	s15, r3
 800bb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7e:	4b59      	ldr	r3, [pc, #356]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbae:	e043      	b.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	ee07 3a90 	vmov	s15, r3
 800bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc2:	4b48      	ldr	r3, [pc, #288]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbca:	ee07 3a90 	vmov	s15, r3
 800bbce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf2:	e021      	b.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc06:	4b37      	ldr	r3, [pc, #220]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc38:	4b2a      	ldr	r3, [pc, #168]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3c:	0a5b      	lsrs	r3, r3, #9
 800bc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc52:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc5e:	ee17 2a90 	vmov	r2, s15
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc66:	4b1f      	ldr	r3, [pc, #124]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6a:	0c1b      	lsrs	r3, r3, #16
 800bc6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc70:	ee07 3a90 	vmov	s15, r3
 800bc74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc80:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc8c:	ee17 2a90 	vmov	r2, s15
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc94:	4b13      	ldr	r3, [pc, #76]	@ (800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc98:	0e1b      	lsrs	r3, r3, #24
 800bc9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcae:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcba:	ee17 2a90 	vmov	r2, s15
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcc2:	e008      	b.n	800bcd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	609a      	str	r2, [r3, #8]
}
 800bcd6:	bf00      	nop
 800bcd8:	3724      	adds	r7, #36	@ 0x24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	58024400 	.word	0x58024400
 800bce8:	03d09000 	.word	0x03d09000
 800bcec:	46000000 	.word	0x46000000
 800bcf0:	4c742400 	.word	0x4c742400
 800bcf4:	4a742400 	.word	0x4a742400
 800bcf8:	4bbebc20 	.word	0x4bbebc20

0800bcfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b089      	sub	sp, #36	@ 0x24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd04:	4ba1      	ldr	r3, [pc, #644]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd0e:	4b9f      	ldr	r3, [pc, #636]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd12:	0d1b      	lsrs	r3, r3, #20
 800bd14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd1a:	4b9c      	ldr	r3, [pc, #624]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1e:	0a1b      	lsrs	r3, r3, #8
 800bd20:	f003 0301 	and.w	r3, r3, #1
 800bd24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd26:	4b99      	ldr	r3, [pc, #612]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2a:	08db      	lsrs	r3, r3, #3
 800bd2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	fb02 f303 	mul.w	r3, r2, r3
 800bd36:	ee07 3a90 	vmov	s15, r3
 800bd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 8111 	beq.w	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	f000 8083 	beq.w	800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	f200 80a1 	bhi.w	800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d056      	beq.n	800be14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd66:	e099      	b.n	800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd68:	4b88      	ldr	r3, [pc, #544]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 0320 	and.w	r3, r3, #32
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d02d      	beq.n	800bdd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd74:	4b85      	ldr	r3, [pc, #532]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	08db      	lsrs	r3, r3, #3
 800bd7a:	f003 0303 	and.w	r3, r3, #3
 800bd7e:	4a84      	ldr	r2, [pc, #528]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd80:	fa22 f303 	lsr.w	r3, r2, r3
 800bd84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd9e:	4b7b      	ldr	r3, [pc, #492]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdce:	e087      	b.n	800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	ee07 3a90 	vmov	s15, r3
 800bdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bdde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde2:	4b6a      	ldr	r3, [pc, #424]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be12:	e065      	b.n	800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be26:	4b59      	ldr	r3, [pc, #356]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be36:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be56:	e043      	b.n	800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be6a:	4b48      	ldr	r3, [pc, #288]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be72:	ee07 3a90 	vmov	s15, r3
 800be76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be9a:	e021      	b.n	800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800beaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beae:	4b37      	ldr	r3, [pc, #220]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bebe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bee0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee4:	0a5b      	lsrs	r3, r3, #9
 800bee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800befa:	edd7 6a07 	vldr	s13, [r7, #28]
 800befe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf06:	ee17 2a90 	vmov	r2, s15
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf0e:	4b1f      	ldr	r3, [pc, #124]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf12:	0c1b      	lsrs	r3, r3, #16
 800bf14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf18:	ee07 3a90 	vmov	s15, r3
 800bf1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf34:	ee17 2a90 	vmov	r2, s15
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf3c:	4b13      	ldr	r3, [pc, #76]	@ (800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf40:	0e1b      	lsrs	r3, r3, #24
 800bf42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf62:	ee17 2a90 	vmov	r2, s15
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf6a:	e008      	b.n	800bf7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	609a      	str	r2, [r3, #8]
}
 800bf7e:	bf00      	nop
 800bf80:	3724      	adds	r7, #36	@ 0x24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	58024400 	.word	0x58024400
 800bf90:	03d09000 	.word	0x03d09000
 800bf94:	46000000 	.word	0x46000000
 800bf98:	4c742400 	.word	0x4c742400
 800bf9c:	4a742400 	.word	0x4a742400
 800bfa0:	4bbebc20 	.word	0x4bbebc20

0800bfa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b089      	sub	sp, #36	@ 0x24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfac:	4ba0      	ldr	r3, [pc, #640]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bfb6:	4b9e      	ldr	r3, [pc, #632]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfba:	091b      	lsrs	r3, r3, #4
 800bfbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bfc2:	4b9b      	ldr	r3, [pc, #620]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bfcc:	4b98      	ldr	r3, [pc, #608]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd0:	08db      	lsrs	r3, r3, #3
 800bfd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	fb02 f303 	mul.w	r3, r2, r3
 800bfdc:	ee07 3a90 	vmov	s15, r3
 800bfe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 8111 	beq.w	800c212 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	f000 8083 	beq.w	800c0fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	f200 80a1 	bhi.w	800c142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d056      	beq.n	800c0ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c00c:	e099      	b.n	800c142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c00e:	4b88      	ldr	r3, [pc, #544]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b00      	cmp	r3, #0
 800c018:	d02d      	beq.n	800c076 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c01a:	4b85      	ldr	r3, [pc, #532]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	08db      	lsrs	r3, r3, #3
 800c020:	f003 0303 	and.w	r3, r3, #3
 800c024:	4a83      	ldr	r2, [pc, #524]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c026:	fa22 f303 	lsr.w	r3, r2, r3
 800c02a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	ee07 3a90 	vmov	s15, r3
 800c03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c044:	4b7a      	ldr	r3, [pc, #488]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c054:	ed97 6a03 	vldr	s12, [r7, #12]
 800c058:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c070:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c074:	e087      	b.n	800c186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	ee07 3a90 	vmov	s15, r3
 800c07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c080:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c088:	4b69      	ldr	r3, [pc, #420]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c098:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0b8:	e065      	b.n	800c186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	ee07 3a90 	vmov	s15, r3
 800c0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0cc:	4b58      	ldr	r3, [pc, #352]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d4:	ee07 3a90 	vmov	s15, r3
 800c0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0fc:	e043      	b.n	800c186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	ee07 3a90 	vmov	s15, r3
 800c104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c108:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c244 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c10c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c110:	4b47      	ldr	r3, [pc, #284]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c118:	ee07 3a90 	vmov	s15, r3
 800c11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c120:	ed97 6a03 	vldr	s12, [r7, #12]
 800c124:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c140:	e021      	b.n	800c186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	ee07 3a90 	vmov	s15, r3
 800c148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c154:	4b36      	ldr	r3, [pc, #216]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c164:	ed97 6a03 	vldr	s12, [r7, #12]
 800c168:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c16c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c184:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c186:	4b2a      	ldr	r3, [pc, #168]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18a:	0a5b      	lsrs	r3, r3, #9
 800c18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c190:	ee07 3a90 	vmov	s15, r3
 800c194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ac:	ee17 2a90 	vmov	r2, s15
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c1b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b8:	0c1b      	lsrs	r3, r3, #16
 800c1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1da:	ee17 2a90 	vmov	r2, s15
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c1e2:	4b13      	ldr	r3, [pc, #76]	@ (800c230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e6:	0e1b      	lsrs	r3, r3, #24
 800c1e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c208:	ee17 2a90 	vmov	r2, s15
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c210:	e008      	b.n	800c224 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	609a      	str	r2, [r3, #8]
}
 800c224:	bf00      	nop
 800c226:	3724      	adds	r7, #36	@ 0x24
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	58024400 	.word	0x58024400
 800c234:	03d09000 	.word	0x03d09000
 800c238:	46000000 	.word	0x46000000
 800c23c:	4c742400 	.word	0x4c742400
 800c240:	4a742400 	.word	0x4a742400
 800c244:	4bbebc20 	.word	0x4bbebc20

0800c248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c256:	4b53      	ldr	r3, [pc, #332]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d101      	bne.n	800c266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e099      	b.n	800c39a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c266:	4b4f      	ldr	r3, [pc, #316]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a4e      	ldr	r2, [pc, #312]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c272:	f7f6 fbb5 	bl	80029e0 <HAL_GetTick>
 800c276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c278:	e008      	b.n	800c28c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c27a:	f7f6 fbb1 	bl	80029e0 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	2b02      	cmp	r3, #2
 800c286:	d901      	bls.n	800c28c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	e086      	b.n	800c39a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c28c:	4b45      	ldr	r3, [pc, #276]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f0      	bne.n	800c27a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c298:	4b42      	ldr	r3, [pc, #264]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c29c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	031b      	lsls	r3, r3, #12
 800c2a6:	493f      	ldr	r1, [pc, #252]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	025b      	lsls	r3, r3, #9
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	041b      	lsls	r3, r3, #16
 800c2ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	061b      	lsls	r3, r3, #24
 800c2d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c2dc:	4931      	ldr	r1, [pc, #196]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c2e2:	4b30      	ldr	r3, [pc, #192]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	492d      	ldr	r1, [pc, #180]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c2f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f8:	f023 0220 	bic.w	r2, r3, #32
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	4928      	ldr	r1, [pc, #160]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c302:	4313      	orrs	r3, r2
 800c304:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c306:	4b27      	ldr	r3, [pc, #156]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30a:	4a26      	ldr	r2, [pc, #152]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c30c:	f023 0310 	bic.w	r3, r3, #16
 800c310:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c312:	4b24      	ldr	r3, [pc, #144]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c316:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <RCCEx_PLL2_Config+0x160>)
 800c318:	4013      	ands	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	69d2      	ldr	r2, [r2, #28]
 800c31e:	00d2      	lsls	r2, r2, #3
 800c320:	4920      	ldr	r1, [pc, #128]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c322:	4313      	orrs	r3, r2
 800c324:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c326:	4b1f      	ldr	r3, [pc, #124]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c32c:	f043 0310 	orr.w	r3, r3, #16
 800c330:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c338:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33c:	4a19      	ldr	r2, [pc, #100]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c33e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c344:	e00f      	b.n	800c366 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d106      	bne.n	800c35a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c34c:	4b15      	ldr	r3, [pc, #84]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c350:	4a14      	ldr	r2, [pc, #80]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c358:	e005      	b.n	800c366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c35a:	4b12      	ldr	r3, [pc, #72]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35e:	4a11      	ldr	r2, [pc, #68]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c364:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c366:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a0e      	ldr	r2, [pc, #56]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c36c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c372:	f7f6 fb35 	bl	80029e0 <HAL_GetTick>
 800c376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c378:	e008      	b.n	800c38c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c37a:	f7f6 fb31 	bl	80029e0 <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d901      	bls.n	800c38c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e006      	b.n	800c39a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c38c:	4b05      	ldr	r3, [pc, #20]	@ (800c3a4 <RCCEx_PLL2_Config+0x15c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0f0      	beq.n	800c37a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	58024400 	.word	0x58024400
 800c3a8:	ffff0007 	.word	0xffff0007

0800c3ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3ba:	4b53      	ldr	r3, [pc, #332]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3be:	f003 0303 	and.w	r3, r3, #3
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d101      	bne.n	800c3ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e099      	b.n	800c4fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3ca:	4b4f      	ldr	r3, [pc, #316]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a4e      	ldr	r2, [pc, #312]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3d6:	f7f6 fb03 	bl	80029e0 <HAL_GetTick>
 800c3da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3dc:	e008      	b.n	800c3f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3de:	f7f6 faff 	bl	80029e0 <HAL_GetTick>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d901      	bls.n	800c3f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e086      	b.n	800c4fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3f0:	4b45      	ldr	r3, [pc, #276]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1f0      	bne.n	800c3de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c3fc:	4b42      	ldr	r3, [pc, #264]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c400:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	051b      	lsls	r3, r3, #20
 800c40a:	493f      	ldr	r1, [pc, #252]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c40c:	4313      	orrs	r3, r2
 800c40e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	3b01      	subs	r3, #1
 800c416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	3b01      	subs	r3, #1
 800c420:	025b      	lsls	r3, r3, #9
 800c422:	b29b      	uxth	r3, r3
 800c424:	431a      	orrs	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	041b      	lsls	r3, r3, #16
 800c42e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	3b01      	subs	r3, #1
 800c43a:	061b      	lsls	r3, r3, #24
 800c43c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c440:	4931      	ldr	r1, [pc, #196]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c442:	4313      	orrs	r3, r2
 800c444:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c446:	4b30      	ldr	r3, [pc, #192]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	492d      	ldr	r1, [pc, #180]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c454:	4313      	orrs	r3, r2
 800c456:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c458:	4b2b      	ldr	r3, [pc, #172]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	4928      	ldr	r1, [pc, #160]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c466:	4313      	orrs	r3, r2
 800c468:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c46a:	4b27      	ldr	r3, [pc, #156]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46e:	4a26      	ldr	r2, [pc, #152]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c474:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c476:	4b24      	ldr	r3, [pc, #144]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c47a:	4b24      	ldr	r3, [pc, #144]	@ (800c50c <RCCEx_PLL3_Config+0x160>)
 800c47c:	4013      	ands	r3, r2
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	69d2      	ldr	r2, [r2, #28]
 800c482:	00d2      	lsls	r2, r2, #3
 800c484:	4920      	ldr	r1, [pc, #128]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c486:	4313      	orrs	r3, r2
 800c488:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c48a:	4b1f      	ldr	r3, [pc, #124]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c48e:	4a1e      	ldr	r2, [pc, #120]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c494:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d106      	bne.n	800c4aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c49c:	4b1a      	ldr	r3, [pc, #104]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a0:	4a19      	ldr	r2, [pc, #100]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4a8:	e00f      	b.n	800c4ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d106      	bne.n	800c4be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4b0:	4b15      	ldr	r3, [pc, #84]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b4:	4a14      	ldr	r2, [pc, #80]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4bc:	e005      	b.n	800c4ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4be:	4b12      	ldr	r3, [pc, #72]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c2:	4a11      	ldr	r2, [pc, #68]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a0e      	ldr	r2, [pc, #56]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4d6:	f7f6 fa83 	bl	80029e0 <HAL_GetTick>
 800c4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4dc:	e008      	b.n	800c4f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4de:	f7f6 fa7f 	bl	80029e0 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d901      	bls.n	800c4f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e006      	b.n	800c4fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4f0:	4b05      	ldr	r3, [pc, #20]	@ (800c508 <RCCEx_PLL3_Config+0x15c>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0f0      	beq.n	800c4de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	58024400 	.word	0x58024400
 800c50c:	ffff0007 	.word	0xffff0007

0800c510 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e10f      	b.n	800c742 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a87      	ldr	r2, [pc, #540]	@ (800c74c <HAL_SPI_Init+0x23c>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d00f      	beq.n	800c552 <HAL_SPI_Init+0x42>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a86      	ldr	r2, [pc, #536]	@ (800c750 <HAL_SPI_Init+0x240>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d00a      	beq.n	800c552 <HAL_SPI_Init+0x42>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a84      	ldr	r2, [pc, #528]	@ (800c754 <HAL_SPI_Init+0x244>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d005      	beq.n	800c552 <HAL_SPI_Init+0x42>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	2b0f      	cmp	r3, #15
 800c54c:	d901      	bls.n	800c552 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e0f7      	b.n	800c742 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fbba 	bl	800cccc <SPI_GetPacketSize>
 800c558:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a7b      	ldr	r2, [pc, #492]	@ (800c74c <HAL_SPI_Init+0x23c>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d00c      	beq.n	800c57e <HAL_SPI_Init+0x6e>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a79      	ldr	r2, [pc, #484]	@ (800c750 <HAL_SPI_Init+0x240>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d007      	beq.n	800c57e <HAL_SPI_Init+0x6e>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a78      	ldr	r2, [pc, #480]	@ (800c754 <HAL_SPI_Init+0x244>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d002      	beq.n	800c57e <HAL_SPI_Init+0x6e>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b08      	cmp	r3, #8
 800c57c:	d811      	bhi.n	800c5a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c582:	4a72      	ldr	r2, [pc, #456]	@ (800c74c <HAL_SPI_Init+0x23c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d009      	beq.n	800c59c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a70      	ldr	r2, [pc, #448]	@ (800c750 <HAL_SPI_Init+0x240>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d004      	beq.n	800c59c <HAL_SPI_Init+0x8c>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a6f      	ldr	r2, [pc, #444]	@ (800c754 <HAL_SPI_Init+0x244>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d104      	bne.n	800c5a6 <HAL_SPI_Init+0x96>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b10      	cmp	r3, #16
 800c5a0:	d901      	bls.n	800c5a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e0cd      	b.n	800c742 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7f4 fe64 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0201 	bic.w	r2, r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c5e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c5ec:	d119      	bne.n	800c622 <HAL_SPI_Init+0x112>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5f6:	d103      	bne.n	800c600 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10c      	bne.n	800c622 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c60c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c610:	d107      	bne.n	800c622 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c620:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00f      	beq.n	800c64e <HAL_SPI_Init+0x13e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b06      	cmp	r3, #6
 800c634:	d90b      	bls.n	800c64e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	430a      	orrs	r2, r1
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	e007      	b.n	800c65e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c65c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69da      	ldr	r2, [r3, #28]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c666:	431a      	orrs	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	431a      	orrs	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c670:	ea42 0103 	orr.w	r1, r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68da      	ldr	r2, [r3, #12]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	431a      	orrs	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6be:	ea42 0103 	orr.w	r1, r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d113      	bne.n	800c6fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c6fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0201 	bic.w	r2, r2, #1
 800c70c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40013000 	.word	0x40013000
 800c750:	40003800 	.word	0x40003800
 800c754:	40003c00 	.word	0x40003c00

0800c758 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	@ 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c770:	6a3a      	ldr	r2, [r7, #32]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	4013      	ands	r3, r2
 800c776:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c780:	2300      	movs	r3, #0
 800c782:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c78a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3330      	adds	r3, #48	@ 0x30
 800c792:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d010      	beq.n	800c7c0 <HAL_SPI_IRQHandler+0x68>
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	699a      	ldr	r2, [r3, #24]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7b6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f9c3 	bl	800cb44 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c7be:	e192      	b.n	800cae6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d113      	bne.n	800c7f2 <HAL_SPI_IRQHandler+0x9a>
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10e      	bne.n	800c7f2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
    handled = 1UL;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10f      	bne.n	800c81c <HAL_SPI_IRQHandler+0xc4>
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d105      	bne.n	800c81c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
    handled = 1UL;
 800c818:	2301      	movs	r3, #1
 800c81a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10f      	bne.n	800c846 <HAL_SPI_IRQHandler+0xee>
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	f003 0302 	and.w	r3, r3, #2
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	4798      	blx	r3
    handled = 1UL;
 800c842:	2301      	movs	r3, #1
 800c844:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f040 8147 	bne.w	800cadc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	f003 0308 	and.w	r3, r3, #8
 800c854:	2b00      	cmp	r3, #0
 800c856:	f000 808b 	beq.w	800c970 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	699a      	ldr	r2, [r3, #24]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f042 0208 	orr.w	r2, r2, #8
 800c868:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f042 0210 	orr.w	r2, r2, #16
 800c878:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	699a      	ldr	r2, [r3, #24]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c888:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	691a      	ldr	r2, [r3, #16]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f022 0208 	bic.w	r2, r2, #8
 800c898:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d13d      	bne.n	800c924 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c8a8:	e036      	b.n	800c918 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	2b0f      	cmp	r3, #15
 800c8b0:	d90b      	bls.n	800c8ca <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c2:	1d1a      	adds	r2, r3, #4
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	665a      	str	r2, [r3, #100]	@ 0x64
 800c8c8:	e01d      	b.n	800c906 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	2b07      	cmp	r3, #7
 800c8d0:	d90b      	bls.n	800c8ea <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	8812      	ldrh	r2, [r2, #0]
 800c8da:	b292      	uxth	r2, r2
 800c8dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e2:	1c9a      	adds	r2, r3, #2
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	665a      	str	r2, [r3, #100]	@ 0x64
 800c8e8:	e00d      	b.n	800c906 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f6:	7812      	ldrb	r2, [r2, #0]
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	3b01      	subs	r3, #1
 800c910:	b29a      	uxth	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1c2      	bne.n	800c8aa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f931 	bl	800cb8c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f8f7 	bl	800cb30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c942:	e0d0      	b.n	800cae6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c944:	7cfb      	ldrb	r3, [r7, #19]
 800c946:	2b05      	cmp	r3, #5
 800c948:	d103      	bne.n	800c952 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8e6 	bl	800cb1c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c950:	e0c6      	b.n	800cae0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c952:	7cfb      	ldrb	r3, [r7, #19]
 800c954:	2b04      	cmp	r3, #4
 800c956:	d103      	bne.n	800c960 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f8d5 	bl	800cb08 <HAL_SPI_RxCpltCallback>
    return;
 800c95e:	e0bf      	b.n	800cae0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c960:	7cfb      	ldrb	r3, [r7, #19]
 800c962:	2b03      	cmp	r3, #3
 800c964:	f040 80bc 	bne.w	800cae0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f8c3 	bl	800caf4 <HAL_SPI_TxCpltCallback>
    return;
 800c96e:	e0b7      	b.n	800cae0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80b5 	beq.w	800cae6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00f      	beq.n	800c9a6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c98c:	f043 0204 	orr.w	r2, r3, #4
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	699a      	ldr	r2, [r3, #24]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00f      	beq.n	800c9d0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9b6:	f043 0201 	orr.w	r2, r3, #1
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	699a      	ldr	r2, [r3, #24]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00f      	beq.n	800c9fa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9e0:	f043 0208 	orr.w	r2, r3, #8
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	699a      	ldr	r2, [r3, #24]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	f003 0320 	and.w	r3, r3, #32
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00f      	beq.n	800ca24 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699a      	ldr	r2, [r3, #24]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f042 0220 	orr.w	r2, r2, #32
 800ca22:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d05a      	beq.n	800cae4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0201 	bic.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6919      	ldr	r1, [r3, #16]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	4b28      	ldr	r3, [pc, #160]	@ (800caec <HAL_SPI_IRQHandler+0x394>)
 800ca4a:	400b      	ands	r3, r1
 800ca4c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ca54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ca58:	d138      	bne.n	800cacc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	689a      	ldr	r2, [r3, #8]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ca68:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d013      	beq.n	800ca9a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca76:	4a1e      	ldr	r2, [pc, #120]	@ (800caf0 <HAL_SPI_IRQHandler+0x398>)
 800ca78:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f9 f838 	bl	8005af4 <HAL_DMA_Abort_IT>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d007      	beq.n	800ca9a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d020      	beq.n	800cae4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800caa6:	4a12      	ldr	r2, [pc, #72]	@ (800caf0 <HAL_SPI_IRQHandler+0x398>)
 800caa8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800caae:	4618      	mov	r0, r3
 800cab0:	f7f9 f820 	bl	8005af4 <HAL_DMA_Abort_IT>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800caca:	e00b      	b.n	800cae4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f82b 	bl	800cb30 <HAL_SPI_ErrorCallback>
    return;
 800cada:	e003      	b.n	800cae4 <HAL_SPI_IRQHandler+0x38c>
    return;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <HAL_SPI_IRQHandler+0x38e>
    return;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <HAL_SPI_IRQHandler+0x38e>
    return;
 800cae4:	bf00      	nop
  }
}
 800cae6:	3728      	adds	r7, #40	@ 0x28
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	fffffc94 	.word	0xfffffc94
 800caf0:	0800cb59 	.word	0x0800cb59

0800caf4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f7ff ffd6 	bl	800cb30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb84:	bf00      	nop
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	699a      	ldr	r2, [r3, #24]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0208 	orr.w	r2, r2, #8
 800cbaa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f042 0210 	orr.w	r2, r2, #16
 800cbba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 0201 	bic.w	r2, r2, #1
 800cbca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6919      	ldr	r1, [r3, #16]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	4b3c      	ldr	r3, [pc, #240]	@ (800ccc8 <SPI_CloseTransfer+0x13c>)
 800cbd8:	400b      	ands	r3, r1
 800cbda:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689a      	ldr	r2, [r3, #8]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cbea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d014      	beq.n	800cc22 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00f      	beq.n	800cc22 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	699a      	ldr	r2, [r3, #24]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f042 0220 	orr.w	r2, r2, #32
 800cc20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d014      	beq.n	800cc58 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00f      	beq.n	800cc58 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc3e:	f043 0204 	orr.w	r2, r3, #4
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00f      	beq.n	800cc82 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc68:	f043 0201 	orr.w	r2, r3, #1
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	699a      	ldr	r2, [r3, #24]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00f      	beq.n	800ccac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc92:	f043 0208 	orr.w	r2, r3, #8
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccaa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ccbc:	bf00      	nop
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	fffffc90 	.word	0xfffffc90

0800cccc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd8:	095b      	lsrs	r3, r3, #5
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	3301      	adds	r3, #1
 800cce4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	3307      	adds	r3, #7
 800ccea:	08db      	lsrs	r3, r3, #3
 800ccec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	fb02 f303 	mul.w	r3, r2, r3
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b082      	sub	sp, #8
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	e049      	b.n	800cda8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7f4 fe61 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2202      	movs	r2, #2
 800cd32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f000 fbdb 	bl	800d4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e049      	b.n	800ce56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d106      	bne.n	800cddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f841 	bl	800ce5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2202      	movs	r2, #2
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f000 fb84 	bl	800d4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b083      	sub	sp, #12
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	f003 0302 	and.w	r3, r3, #2
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d020      	beq.n	800ced6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d01b      	beq.n	800ced6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f06f 0202 	mvn.w	r2, #2
 800cea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 faff 	bl	800d4c0 <HAL_TIM_IC_CaptureCallback>
 800cec2:	e005      	b.n	800ced0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 faf1 	bl	800d4ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fb02 	bl	800d4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	f003 0304 	and.w	r3, r3, #4
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d020      	beq.n	800cf22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f003 0304 	and.w	r3, r3, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01b      	beq.n	800cf22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f06f 0204 	mvn.w	r2, #4
 800cef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2202      	movs	r2, #2
 800cef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fad9 	bl	800d4c0 <HAL_TIM_IC_CaptureCallback>
 800cf0e:	e005      	b.n	800cf1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 facb 	bl	800d4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fadc 	bl	800d4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d020      	beq.n	800cf6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f003 0308 	and.w	r3, r3, #8
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d01b      	beq.n	800cf6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f06f 0208 	mvn.w	r2, #8
 800cf3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2204      	movs	r2, #4
 800cf44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	f003 0303 	and.w	r3, r3, #3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fab3 	bl	800d4c0 <HAL_TIM_IC_CaptureCallback>
 800cf5a:	e005      	b.n	800cf68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 faa5 	bl	800d4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fab6 	bl	800d4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	f003 0310 	and.w	r3, r3, #16
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d020      	beq.n	800cfba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f003 0310 	and.w	r3, r3, #16
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01b      	beq.n	800cfba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f06f 0210 	mvn.w	r2, #16
 800cf8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2208      	movs	r2, #8
 800cf90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d003      	beq.n	800cfa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fa8d 	bl	800d4c0 <HAL_TIM_IC_CaptureCallback>
 800cfa6:	e005      	b.n	800cfb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 fa7f 	bl	800d4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fa90 	bl	800d4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00c      	beq.n	800cfde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f003 0301 	and.w	r3, r3, #1
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d007      	beq.n	800cfde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f06f 0201 	mvn.w	r2, #1
 800cfd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fa5d 	bl	800d498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d104      	bne.n	800cff2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00c      	beq.n	800d00c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d007      	beq.n	800d00c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 ffca 	bl	800dfa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00c      	beq.n	800d030 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d007      	beq.n	800d030 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 ffc2 	bl	800dfb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00c      	beq.n	800d054 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d007      	beq.n	800d054 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d04c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa4a 	bl	800d4e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f003 0320 	and.w	r3, r3, #32
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00c      	beq.n	800d078 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f06f 0220 	mvn.w	r2, #32
 800d070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 ff8a 	bl	800df8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d078:	bf00      	nop
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d09a:	2302      	movs	r3, #2
 800d09c:	e0ff      	b.n	800d29e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b14      	cmp	r3, #20
 800d0aa:	f200 80f0 	bhi.w	800d28e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d109 	.word	0x0800d109
 800d0b8:	0800d28f 	.word	0x0800d28f
 800d0bc:	0800d28f 	.word	0x0800d28f
 800d0c0:	0800d28f 	.word	0x0800d28f
 800d0c4:	0800d149 	.word	0x0800d149
 800d0c8:	0800d28f 	.word	0x0800d28f
 800d0cc:	0800d28f 	.word	0x0800d28f
 800d0d0:	0800d28f 	.word	0x0800d28f
 800d0d4:	0800d18b 	.word	0x0800d18b
 800d0d8:	0800d28f 	.word	0x0800d28f
 800d0dc:	0800d28f 	.word	0x0800d28f
 800d0e0:	0800d28f 	.word	0x0800d28f
 800d0e4:	0800d1cb 	.word	0x0800d1cb
 800d0e8:	0800d28f 	.word	0x0800d28f
 800d0ec:	0800d28f 	.word	0x0800d28f
 800d0f0:	0800d28f 	.word	0x0800d28f
 800d0f4:	0800d20d 	.word	0x0800d20d
 800d0f8:	0800d28f 	.word	0x0800d28f
 800d0fc:	0800d28f 	.word	0x0800d28f
 800d100:	0800d28f 	.word	0x0800d28f
 800d104:	0800d24d 	.word	0x0800d24d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68b9      	ldr	r1, [r7, #8]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 faa0 	bl	800d654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	699a      	ldr	r2, [r3, #24]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0208 	orr.w	r2, r2, #8
 800d122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	699a      	ldr	r2, [r3, #24]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f022 0204 	bic.w	r2, r2, #4
 800d132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6999      	ldr	r1, [r3, #24]
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	691a      	ldr	r2, [r3, #16]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	619a      	str	r2, [r3, #24]
      break;
 800d146:	e0a5      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fb10 	bl	800d774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	699a      	ldr	r2, [r3, #24]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6999      	ldr	r1, [r3, #24]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	021a      	lsls	r2, r3, #8
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	619a      	str	r2, [r3, #24]
      break;
 800d188:	e084      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68b9      	ldr	r1, [r7, #8]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fb79 	bl	800d888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69da      	ldr	r2, [r3, #28]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f042 0208 	orr.w	r2, r2, #8
 800d1a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69da      	ldr	r2, [r3, #28]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f022 0204 	bic.w	r2, r2, #4
 800d1b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	69d9      	ldr	r1, [r3, #28]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	691a      	ldr	r2, [r3, #16]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	61da      	str	r2, [r3, #28]
      break;
 800d1c8:	e064      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 fbe1 	bl	800d998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	69da      	ldr	r2, [r3, #28]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d1e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	69da      	ldr	r2, [r3, #28]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d1f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	69d9      	ldr	r1, [r3, #28]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	021a      	lsls	r2, r3, #8
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	61da      	str	r2, [r3, #28]
      break;
 800d20a:	e043      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fc2a 	bl	800da6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0208 	orr.w	r2, r2, #8
 800d226:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f022 0204 	bic.w	r2, r2, #4
 800d236:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	691a      	ldr	r2, [r3, #16]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	430a      	orrs	r2, r1
 800d248:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d24a:	e023      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68b9      	ldr	r1, [r7, #8]
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fc6e 	bl	800db34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d266:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d276:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	021a      	lsls	r2, r3, #8
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	430a      	orrs	r2, r1
 800d28a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d28c:	e002      	b.n	800d294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	75fb      	strb	r3, [r7, #23]
      break;
 800d292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop

0800d2a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d101      	bne.n	800d2c4 <HAL_TIM_ConfigClockSource+0x1c>
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	e0dc      	b.n	800d47e <HAL_TIM_ConfigClockSource+0x1d6>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	4b6a      	ldr	r3, [pc, #424]	@ (800d488 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d2ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a64      	ldr	r2, [pc, #400]	@ (800d48c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	f000 80a9 	beq.w	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d300:	4a62      	ldr	r2, [pc, #392]	@ (800d48c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	f200 80ae 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d308:	4a61      	ldr	r2, [pc, #388]	@ (800d490 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	f000 80a1 	beq.w	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d310:	4a5f      	ldr	r2, [pc, #380]	@ (800d490 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d312:	4293      	cmp	r3, r2
 800d314:	f200 80a6 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d318:	4a5e      	ldr	r2, [pc, #376]	@ (800d494 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	f000 8099 	beq.w	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d320:	4a5c      	ldr	r2, [pc, #368]	@ (800d494 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d322:	4293      	cmp	r3, r2
 800d324:	f200 809e 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d328:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d32c:	f000 8091 	beq.w	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d330:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d334:	f200 8096 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d338:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d33c:	f000 8089 	beq.w	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d340:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d344:	f200 808e 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d34c:	d03e      	beq.n	800d3cc <HAL_TIM_ConfigClockSource+0x124>
 800d34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d352:	f200 8087 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d35a:	f000 8086 	beq.w	800d46a <HAL_TIM_ConfigClockSource+0x1c2>
 800d35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d362:	d87f      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d364:	2b70      	cmp	r3, #112	@ 0x70
 800d366:	d01a      	beq.n	800d39e <HAL_TIM_ConfigClockSource+0xf6>
 800d368:	2b70      	cmp	r3, #112	@ 0x70
 800d36a:	d87b      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d36c:	2b60      	cmp	r3, #96	@ 0x60
 800d36e:	d050      	beq.n	800d412 <HAL_TIM_ConfigClockSource+0x16a>
 800d370:	2b60      	cmp	r3, #96	@ 0x60
 800d372:	d877      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d374:	2b50      	cmp	r3, #80	@ 0x50
 800d376:	d03c      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0x14a>
 800d378:	2b50      	cmp	r3, #80	@ 0x50
 800d37a:	d873      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d37c:	2b40      	cmp	r3, #64	@ 0x40
 800d37e:	d058      	beq.n	800d432 <HAL_TIM_ConfigClockSource+0x18a>
 800d380:	2b40      	cmp	r3, #64	@ 0x40
 800d382:	d86f      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d384:	2b30      	cmp	r3, #48	@ 0x30
 800d386:	d064      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d388:	2b30      	cmp	r3, #48	@ 0x30
 800d38a:	d86b      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	d060      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d390:	2b20      	cmp	r3, #32
 800d392:	d867      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05c      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d398:	2b10      	cmp	r3, #16
 800d39a:	d05a      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x1aa>
 800d39c:	e062      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3ae:	f000 fca5 	bl	800dcfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d3c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	609a      	str	r2, [r3, #8]
      break;
 800d3ca:	e04f      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3dc:	f000 fc8e 	bl	800dcfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689a      	ldr	r2, [r3, #8]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d3ee:	609a      	str	r2, [r3, #8]
      break;
 800d3f0:	e03c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3fe:	461a      	mov	r2, r3
 800d400:	f000 fbfe 	bl	800dc00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2150      	movs	r1, #80	@ 0x50
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 fc58 	bl	800dcc0 <TIM_ITRx_SetConfig>
      break;
 800d410:	e02c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d41e:	461a      	mov	r2, r3
 800d420:	f000 fc1d 	bl	800dc5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2160      	movs	r1, #96	@ 0x60
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fc48 	bl	800dcc0 <TIM_ITRx_SetConfig>
      break;
 800d430:	e01c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d43e:	461a      	mov	r2, r3
 800d440:	f000 fbde 	bl	800dc00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2140      	movs	r1, #64	@ 0x40
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fc38 	bl	800dcc0 <TIM_ITRx_SetConfig>
      break;
 800d450:	e00c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4619      	mov	r1, r3
 800d45c:	4610      	mov	r0, r2
 800d45e:	f000 fc2f 	bl	800dcc0 <TIM_ITRx_SetConfig>
      break;
 800d462:	e003      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	73fb      	strb	r3, [r7, #15]
      break;
 800d468:	e000      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d46a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	ffceff88 	.word	0xffceff88
 800d48c:	00100040 	.word	0x00100040
 800d490:	00100030 	.word	0x00100030
 800d494:	00100020 	.word	0x00100020

0800d498 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a47      	ldr	r2, [pc, #284]	@ (800d62c <TIM_Base_SetConfig+0x130>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d013      	beq.n	800d53c <TIM_Base_SetConfig+0x40>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d51a:	d00f      	beq.n	800d53c <TIM_Base_SetConfig+0x40>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4a44      	ldr	r2, [pc, #272]	@ (800d630 <TIM_Base_SetConfig+0x134>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d00b      	beq.n	800d53c <TIM_Base_SetConfig+0x40>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a43      	ldr	r2, [pc, #268]	@ (800d634 <TIM_Base_SetConfig+0x138>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d007      	beq.n	800d53c <TIM_Base_SetConfig+0x40>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a42      	ldr	r2, [pc, #264]	@ (800d638 <TIM_Base_SetConfig+0x13c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d003      	beq.n	800d53c <TIM_Base_SetConfig+0x40>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a41      	ldr	r2, [pc, #260]	@ (800d63c <TIM_Base_SetConfig+0x140>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d108      	bne.n	800d54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a36      	ldr	r2, [pc, #216]	@ (800d62c <TIM_Base_SetConfig+0x130>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d027      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55c:	d023      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a33      	ldr	r2, [pc, #204]	@ (800d630 <TIM_Base_SetConfig+0x134>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d01f      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a32      	ldr	r2, [pc, #200]	@ (800d634 <TIM_Base_SetConfig+0x138>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d01b      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a31      	ldr	r2, [pc, #196]	@ (800d638 <TIM_Base_SetConfig+0x13c>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d017      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a30      	ldr	r2, [pc, #192]	@ (800d63c <TIM_Base_SetConfig+0x140>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d013      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a2f      	ldr	r2, [pc, #188]	@ (800d640 <TIM_Base_SetConfig+0x144>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d00f      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a2e      	ldr	r2, [pc, #184]	@ (800d644 <TIM_Base_SetConfig+0x148>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d00b      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a2d      	ldr	r2, [pc, #180]	@ (800d648 <TIM_Base_SetConfig+0x14c>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d007      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a2c      	ldr	r2, [pc, #176]	@ (800d64c <TIM_Base_SetConfig+0x150>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d003      	beq.n	800d5a6 <TIM_Base_SetConfig+0xaa>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a2b      	ldr	r2, [pc, #172]	@ (800d650 <TIM_Base_SetConfig+0x154>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d108      	bne.n	800d5b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	689a      	ldr	r2, [r3, #8]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a14      	ldr	r2, [pc, #80]	@ (800d62c <TIM_Base_SetConfig+0x130>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d00f      	beq.n	800d5fe <TIM_Base_SetConfig+0x102>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a16      	ldr	r2, [pc, #88]	@ (800d63c <TIM_Base_SetConfig+0x140>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d00b      	beq.n	800d5fe <TIM_Base_SetConfig+0x102>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a15      	ldr	r2, [pc, #84]	@ (800d640 <TIM_Base_SetConfig+0x144>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d007      	beq.n	800d5fe <TIM_Base_SetConfig+0x102>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a14      	ldr	r2, [pc, #80]	@ (800d644 <TIM_Base_SetConfig+0x148>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d003      	beq.n	800d5fe <TIM_Base_SetConfig+0x102>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a13      	ldr	r2, [pc, #76]	@ (800d648 <TIM_Base_SetConfig+0x14c>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d103      	bne.n	800d606 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	691a      	ldr	r2, [r3, #16]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f043 0204 	orr.w	r2, r3, #4
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	601a      	str	r2, [r3, #0]
}
 800d61e:	bf00      	nop
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	40010000 	.word	0x40010000
 800d630:	40000400 	.word	0x40000400
 800d634:	40000800 	.word	0x40000800
 800d638:	40000c00 	.word	0x40000c00
 800d63c:	40010400 	.word	0x40010400
 800d640:	40014000 	.word	0x40014000
 800d644:	40014400 	.word	0x40014400
 800d648:	40014800 	.word	0x40014800
 800d64c:	4000e000 	.word	0x4000e000
 800d650:	4000e400 	.word	0x4000e400

0800d654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	f023 0201 	bic.w	r2, r3, #1
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	4b37      	ldr	r3, [pc, #220]	@ (800d75c <TIM_OC1_SetConfig+0x108>)
 800d680:	4013      	ands	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 0303 	bic.w	r3, r3, #3
 800d68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f023 0302 	bic.w	r3, r3, #2
 800d69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a2d      	ldr	r2, [pc, #180]	@ (800d760 <TIM_OC1_SetConfig+0x10c>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d00f      	beq.n	800d6d0 <TIM_OC1_SetConfig+0x7c>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a2c      	ldr	r2, [pc, #176]	@ (800d764 <TIM_OC1_SetConfig+0x110>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d00b      	beq.n	800d6d0 <TIM_OC1_SetConfig+0x7c>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a2b      	ldr	r2, [pc, #172]	@ (800d768 <TIM_OC1_SetConfig+0x114>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d007      	beq.n	800d6d0 <TIM_OC1_SetConfig+0x7c>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a2a      	ldr	r2, [pc, #168]	@ (800d76c <TIM_OC1_SetConfig+0x118>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d003      	beq.n	800d6d0 <TIM_OC1_SetConfig+0x7c>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a29      	ldr	r2, [pc, #164]	@ (800d770 <TIM_OC1_SetConfig+0x11c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d10c      	bne.n	800d6ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f023 0308 	bic.w	r3, r3, #8
 800d6d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f023 0304 	bic.w	r3, r3, #4
 800d6e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d760 <TIM_OC1_SetConfig+0x10c>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d00f      	beq.n	800d712 <TIM_OC1_SetConfig+0xbe>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a1b      	ldr	r2, [pc, #108]	@ (800d764 <TIM_OC1_SetConfig+0x110>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d00b      	beq.n	800d712 <TIM_OC1_SetConfig+0xbe>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a1a      	ldr	r2, [pc, #104]	@ (800d768 <TIM_OC1_SetConfig+0x114>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d007      	beq.n	800d712 <TIM_OC1_SetConfig+0xbe>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a19      	ldr	r2, [pc, #100]	@ (800d76c <TIM_OC1_SetConfig+0x118>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d003      	beq.n	800d712 <TIM_OC1_SetConfig+0xbe>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a18      	ldr	r2, [pc, #96]	@ (800d770 <TIM_OC1_SetConfig+0x11c>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d111      	bne.n	800d736 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	4313      	orrs	r3, r2
 800d72a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	699b      	ldr	r3, [r3, #24]
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	4313      	orrs	r3, r2
 800d734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	621a      	str	r2, [r3, #32]
}
 800d750:	bf00      	nop
 800d752:	371c      	adds	r7, #28
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	fffeff8f 	.word	0xfffeff8f
 800d760:	40010000 	.word	0x40010000
 800d764:	40010400 	.word	0x40010400
 800d768:	40014000 	.word	0x40014000
 800d76c:	40014400 	.word	0x40014400
 800d770:	40014800 	.word	0x40014800

0800d774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	f023 0210 	bic.w	r2, r3, #16
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4b34      	ldr	r3, [pc, #208]	@ (800d870 <TIM_OC2_SetConfig+0xfc>)
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	021b      	lsls	r3, r3, #8
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f023 0320 	bic.w	r3, r3, #32
 800d7be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	011b      	lsls	r3, r3, #4
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a29      	ldr	r2, [pc, #164]	@ (800d874 <TIM_OC2_SetConfig+0x100>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d003      	beq.n	800d7dc <TIM_OC2_SetConfig+0x68>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a28      	ldr	r2, [pc, #160]	@ (800d878 <TIM_OC2_SetConfig+0x104>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d10d      	bne.n	800d7f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a1e      	ldr	r2, [pc, #120]	@ (800d874 <TIM_OC2_SetConfig+0x100>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d00f      	beq.n	800d820 <TIM_OC2_SetConfig+0xac>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a1d      	ldr	r2, [pc, #116]	@ (800d878 <TIM_OC2_SetConfig+0x104>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d00b      	beq.n	800d820 <TIM_OC2_SetConfig+0xac>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a1c      	ldr	r2, [pc, #112]	@ (800d87c <TIM_OC2_SetConfig+0x108>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d007      	beq.n	800d820 <TIM_OC2_SetConfig+0xac>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a1b      	ldr	r2, [pc, #108]	@ (800d880 <TIM_OC2_SetConfig+0x10c>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d003      	beq.n	800d820 <TIM_OC2_SetConfig+0xac>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a1a      	ldr	r2, [pc, #104]	@ (800d884 <TIM_OC2_SetConfig+0x110>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d113      	bne.n	800d848 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d82e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	693a      	ldr	r2, [r7, #16]
 800d838:	4313      	orrs	r3, r2
 800d83a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	4313      	orrs	r3, r2
 800d846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	621a      	str	r2, [r3, #32]
}
 800d862:	bf00      	nop
 800d864:	371c      	adds	r7, #28
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	feff8fff 	.word	0xfeff8fff
 800d874:	40010000 	.word	0x40010000
 800d878:	40010400 	.word	0x40010400
 800d87c:	40014000 	.word	0x40014000
 800d880:	40014400 	.word	0x40014400
 800d884:	40014800 	.word	0x40014800

0800d888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4b33      	ldr	r3, [pc, #204]	@ (800d980 <TIM_OC3_SetConfig+0xf8>)
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f023 0303 	bic.w	r3, r3, #3
 800d8be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d8d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	021b      	lsls	r3, r3, #8
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a28      	ldr	r2, [pc, #160]	@ (800d984 <TIM_OC3_SetConfig+0xfc>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d003      	beq.n	800d8ee <TIM_OC3_SetConfig+0x66>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4a27      	ldr	r2, [pc, #156]	@ (800d988 <TIM_OC3_SetConfig+0x100>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d10d      	bne.n	800d90a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a1d      	ldr	r2, [pc, #116]	@ (800d984 <TIM_OC3_SetConfig+0xfc>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d00f      	beq.n	800d932 <TIM_OC3_SetConfig+0xaa>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a1c      	ldr	r2, [pc, #112]	@ (800d988 <TIM_OC3_SetConfig+0x100>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d00b      	beq.n	800d932 <TIM_OC3_SetConfig+0xaa>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a1b      	ldr	r2, [pc, #108]	@ (800d98c <TIM_OC3_SetConfig+0x104>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d007      	beq.n	800d932 <TIM_OC3_SetConfig+0xaa>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a1a      	ldr	r2, [pc, #104]	@ (800d990 <TIM_OC3_SetConfig+0x108>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d003      	beq.n	800d932 <TIM_OC3_SetConfig+0xaa>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a19      	ldr	r2, [pc, #100]	@ (800d994 <TIM_OC3_SetConfig+0x10c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d113      	bne.n	800d95a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	011b      	lsls	r3, r3, #4
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	4313      	orrs	r3, r2
 800d94c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	621a      	str	r2, [r3, #32]
}
 800d974:	bf00      	nop
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	fffeff8f 	.word	0xfffeff8f
 800d984:	40010000 	.word	0x40010000
 800d988:	40010400 	.word	0x40010400
 800d98c:	40014000 	.word	0x40014000
 800d990:	40014400 	.word	0x40014400
 800d994:	40014800 	.word	0x40014800

0800d998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4b24      	ldr	r3, [pc, #144]	@ (800da54 <TIM_OC4_SetConfig+0xbc>)
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d9e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	031b      	lsls	r3, r3, #12
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a19      	ldr	r2, [pc, #100]	@ (800da58 <TIM_OC4_SetConfig+0xc0>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d00f      	beq.n	800da18 <TIM_OC4_SetConfig+0x80>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a18      	ldr	r2, [pc, #96]	@ (800da5c <TIM_OC4_SetConfig+0xc4>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00b      	beq.n	800da18 <TIM_OC4_SetConfig+0x80>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a17      	ldr	r2, [pc, #92]	@ (800da60 <TIM_OC4_SetConfig+0xc8>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d007      	beq.n	800da18 <TIM_OC4_SetConfig+0x80>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a16      	ldr	r2, [pc, #88]	@ (800da64 <TIM_OC4_SetConfig+0xcc>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d003      	beq.n	800da18 <TIM_OC4_SetConfig+0x80>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a15      	ldr	r2, [pc, #84]	@ (800da68 <TIM_OC4_SetConfig+0xd0>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d109      	bne.n	800da2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	019b      	lsls	r3, r3, #6
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4313      	orrs	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	685a      	ldr	r2, [r3, #4]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	621a      	str	r2, [r3, #32]
}
 800da46:	bf00      	nop
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	feff8fff 	.word	0xfeff8fff
 800da58:	40010000 	.word	0x40010000
 800da5c:	40010400 	.word	0x40010400
 800da60:	40014000 	.word	0x40014000
 800da64:	40014400 	.word	0x40014400
 800da68:	40014800 	.word	0x40014800

0800da6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a1b      	ldr	r3, [r3, #32]
 800da7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a1b      	ldr	r3, [r3, #32]
 800da80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4b21      	ldr	r3, [pc, #132]	@ (800db1c <TIM_OC5_SetConfig+0xb0>)
 800da98:	4013      	ands	r3, r2
 800da9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800daac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	041b      	lsls	r3, r3, #16
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a18      	ldr	r2, [pc, #96]	@ (800db20 <TIM_OC5_SetConfig+0xb4>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d00f      	beq.n	800dae2 <TIM_OC5_SetConfig+0x76>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a17      	ldr	r2, [pc, #92]	@ (800db24 <TIM_OC5_SetConfig+0xb8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00b      	beq.n	800dae2 <TIM_OC5_SetConfig+0x76>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a16      	ldr	r2, [pc, #88]	@ (800db28 <TIM_OC5_SetConfig+0xbc>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d007      	beq.n	800dae2 <TIM_OC5_SetConfig+0x76>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a15      	ldr	r2, [pc, #84]	@ (800db2c <TIM_OC5_SetConfig+0xc0>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d003      	beq.n	800dae2 <TIM_OC5_SetConfig+0x76>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a14      	ldr	r2, [pc, #80]	@ (800db30 <TIM_OC5_SetConfig+0xc4>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d109      	bne.n	800daf6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	621a      	str	r2, [r3, #32]
}
 800db10:	bf00      	nop
 800db12:	371c      	adds	r7, #28
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	fffeff8f 	.word	0xfffeff8f
 800db20:	40010000 	.word	0x40010000
 800db24:	40010400 	.word	0x40010400
 800db28:	40014000 	.word	0x40014000
 800db2c:	40014400 	.word	0x40014400
 800db30:	40014800 	.word	0x40014800

0800db34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4b22      	ldr	r3, [pc, #136]	@ (800dbe8 <TIM_OC6_SetConfig+0xb4>)
 800db60:	4013      	ands	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	021b      	lsls	r3, r3, #8
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	051b      	lsls	r3, r3, #20
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	4313      	orrs	r3, r2
 800db82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a19      	ldr	r2, [pc, #100]	@ (800dbec <TIM_OC6_SetConfig+0xb8>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d00f      	beq.n	800dbac <TIM_OC6_SetConfig+0x78>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a18      	ldr	r2, [pc, #96]	@ (800dbf0 <TIM_OC6_SetConfig+0xbc>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d00b      	beq.n	800dbac <TIM_OC6_SetConfig+0x78>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a17      	ldr	r2, [pc, #92]	@ (800dbf4 <TIM_OC6_SetConfig+0xc0>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d007      	beq.n	800dbac <TIM_OC6_SetConfig+0x78>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a16      	ldr	r2, [pc, #88]	@ (800dbf8 <TIM_OC6_SetConfig+0xc4>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d003      	beq.n	800dbac <TIM_OC6_SetConfig+0x78>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a15      	ldr	r2, [pc, #84]	@ (800dbfc <TIM_OC6_SetConfig+0xc8>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d109      	bne.n	800dbc0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dbb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	029b      	lsls	r3, r3, #10
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	621a      	str	r2, [r3, #32]
}
 800dbda:	bf00      	nop
 800dbdc:	371c      	adds	r7, #28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	feff8fff 	.word	0xfeff8fff
 800dbec:	40010000 	.word	0x40010000
 800dbf0:	40010400 	.word	0x40010400
 800dbf4:	40014000 	.word	0x40014000
 800dbf8:	40014400 	.word	0x40014400
 800dbfc:	40014800 	.word	0x40014800

0800dc00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	f023 0201 	bic.w	r2, r3, #1
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dc2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f023 030a 	bic.w	r3, r3, #10
 800dc3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	621a      	str	r2, [r3, #32]
}
 800dc52:	bf00      	nop
 800dc54:	371c      	adds	r7, #28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b087      	sub	sp, #28
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	f023 0210 	bic.w	r2, r3, #16
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dc88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	031b      	lsls	r3, r3, #12
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dc9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	011b      	lsls	r3, r3, #4
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	697a      	ldr	r2, [r7, #20]
 800dcb0:	621a      	str	r2, [r3, #32]
}
 800dcb2:	bf00      	nop
 800dcb4:	371c      	adds	r7, #28
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
	...

0800dcc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4b09      	ldr	r3, [pc, #36]	@ (800dcf8 <TIM_ITRx_SetConfig+0x38>)
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	f043 0307 	orr.w	r3, r3, #7
 800dce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	609a      	str	r2, [r3, #8]
}
 800dcea:	bf00      	nop
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	ffcfff8f 	.word	0xffcfff8f

0800dcfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
 800dd08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	021a      	lsls	r2, r3, #8
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	697a      	ldr	r2, [r7, #20]
 800dd2e:	609a      	str	r2, [r3, #8]
}
 800dd30:	bf00      	nop
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d101      	bne.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd50:	2302      	movs	r3, #2
 800dd52:	e077      	b.n	800de44 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2202      	movs	r2, #2
 800dd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a35      	ldr	r2, [pc, #212]	@ (800de50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d004      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a34      	ldr	r2, [pc, #208]	@ (800de54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d108      	bne.n	800dd9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dda0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a25      	ldr	r2, [pc, #148]	@ (800de50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d02c      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddc6:	d027      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a22      	ldr	r2, [pc, #136]	@ (800de58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d022      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a21      	ldr	r2, [pc, #132]	@ (800de5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d01d      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a1f      	ldr	r2, [pc, #124]	@ (800de60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d018      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a1a      	ldr	r2, [pc, #104]	@ (800de54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d013      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a1b      	ldr	r2, [pc, #108]	@ (800de64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d00e      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a1a      	ldr	r2, [pc, #104]	@ (800de68 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d009      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a18      	ldr	r2, [pc, #96]	@ (800de6c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d004      	beq.n	800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a17      	ldr	r2, [pc, #92]	@ (800de70 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d10c      	bne.n	800de32 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	4313      	orrs	r3, r2
 800de28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	40010000 	.word	0x40010000
 800de54:	40010400 	.word	0x40010400
 800de58:	40000400 	.word	0x40000400
 800de5c:	40000800 	.word	0x40000800
 800de60:	40000c00 	.word	0x40000c00
 800de64:	40001800 	.word	0x40001800
 800de68:	40014000 	.word	0x40014000
 800de6c:	4000e000 	.word	0x4000e000
 800de70:	4000e400 	.word	0x4000e400

0800de74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d101      	bne.n	800de90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800de8c:	2302      	movs	r3, #2
 800de8e:	e073      	b.n	800df78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	4313      	orrs	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4313      	orrs	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	4313      	orrs	r3, r2
 800dedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	4313      	orrs	r3, r2
 800deea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	041b      	lsls	r3, r3, #16
 800df06:	4313      	orrs	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	4313      	orrs	r3, r2
 800df16:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a19      	ldr	r2, [pc, #100]	@ (800df84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d004      	beq.n	800df2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a18      	ldr	r2, [pc, #96]	@ (800df88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d11c      	bne.n	800df66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df36:	051b      	lsls	r3, r3, #20
 800df38:	4313      	orrs	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	4313      	orrs	r3, r2
 800df48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df54:	4313      	orrs	r3, r2
 800df56:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df62:	4313      	orrs	r3, r2
 800df64:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	40010000 	.word	0x40010000
 800df88:	40010400 	.word	0x40010400

0800df8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e042      	b.n	800e060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d106      	bne.n	800dff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7f3 fdf7 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2224      	movs	r2, #36	@ 0x24
 800dff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f022 0201 	bic.w	r2, r2, #1
 800e008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 fa8a 	bl	800f52c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fc1b 	bl	800e854 <UART_SetConfig>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e01b      	b.n	800e060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0201 	orr.w	r2, r2, #1
 800e056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f001 fb09 	bl	800f670 <UART_CheckIdleState>
 800e05e:	4603      	mov	r3, r0
}
 800e060:	4618      	mov	r0, r3
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b0ba      	sub	sp, #232	@ 0xe8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	69db      	ldr	r3, [r3, #28]
 800e076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e08e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e092:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e096:	4013      	ands	r3, r2
 800e098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e09c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d11b      	bne.n	800e0dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0a8:	f003 0320 	and.w	r3, r3, #32
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d015      	beq.n	800e0dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0b4:	f003 0320 	and.w	r3, r3, #32
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d105      	bne.n	800e0c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d009      	beq.n	800e0dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 8393 	beq.w	800e7f8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	4798      	blx	r3
      }
      return;
 800e0da:	e38d      	b.n	800e7f8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e0dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 8123 	beq.w	800e32c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e0e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e0ea:	4b8d      	ldr	r3, [pc, #564]	@ (800e320 <HAL_UART_IRQHandler+0x2b8>)
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d106      	bne.n	800e100 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e0f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e0f6:	4b8b      	ldr	r3, [pc, #556]	@ (800e324 <HAL_UART_IRQHandler+0x2bc>)
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 8116 	beq.w	800e32c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e104:	f003 0301 	and.w	r3, r3, #1
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d011      	beq.n	800e130 <HAL_UART_IRQHandler+0xc8>
 800e10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00b      	beq.n	800e130 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2201      	movs	r2, #1
 800e11e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e126:	f043 0201 	orr.w	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e134:	f003 0302 	and.w	r3, r3, #2
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d011      	beq.n	800e160 <HAL_UART_IRQHandler+0xf8>
 800e13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00b      	beq.n	800e160 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2202      	movs	r2, #2
 800e14e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e156:	f043 0204 	orr.w	r2, r3, #4
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e164:	f003 0304 	and.w	r3, r3, #4
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d011      	beq.n	800e190 <HAL_UART_IRQHandler+0x128>
 800e16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00b      	beq.n	800e190 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2204      	movs	r2, #4
 800e17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e186:	f043 0202 	orr.w	r2, r3, #2
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e194:	f003 0308 	and.w	r3, r3, #8
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d017      	beq.n	800e1cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1a0:	f003 0320 	and.w	r3, r3, #32
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d105      	bne.n	800e1b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e1a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800e320 <HAL_UART_IRQHandler+0x2b8>)
 800e1ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2208      	movs	r2, #8
 800e1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c2:	f043 0208 	orr.w	r2, r3, #8
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d012      	beq.n	800e1fe <HAL_UART_IRQHandler+0x196>
 800e1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1f4:	f043 0220 	orr.w	r2, r3, #32
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 82f9 	beq.w	800e7fc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d013      	beq.n	800e23e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e21a:	f003 0320 	and.w	r3, r3, #32
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d105      	bne.n	800e22e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d007      	beq.n	800e23e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e232:	2b00      	cmp	r3, #0
 800e234:	d003      	beq.n	800e23e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e252:	2b40      	cmp	r3, #64	@ 0x40
 800e254:	d005      	beq.n	800e262 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e25a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d054      	beq.n	800e30c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f001 fb1c 	bl	800f8a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e272:	2b40      	cmp	r3, #64	@ 0x40
 800e274:	d146      	bne.n	800e304 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3308      	adds	r3, #8
 800e27c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e284:	e853 3f00 	ldrex	r3, [r3]
 800e288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e28c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3308      	adds	r3, #8
 800e29e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e2a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e2a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e2ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e2b2:	e841 2300 	strex	r3, r2, [r1]
 800e2b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e2ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1d9      	bne.n	800e276 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d017      	beq.n	800e2fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2d2:	4a15      	ldr	r2, [pc, #84]	@ (800e328 <HAL_UART_IRQHandler+0x2c0>)
 800e2d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f7 fc09 	bl	8005af4 <HAL_DMA_Abort_IT>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d019      	beq.n	800e31c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2fa:	e00f      	b.n	800e31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fa93 	bl	800e828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e302:	e00b      	b.n	800e31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fa8f 	bl	800e828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e30a:	e007      	b.n	800e31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fa8b 	bl	800e828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e31a:	e26f      	b.n	800e7fc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e31c:	bf00      	nop
    return;
 800e31e:	e26d      	b.n	800e7fc <HAL_UART_IRQHandler+0x794>
 800e320:	10000001 	.word	0x10000001
 800e324:	04000120 	.word	0x04000120
 800e328:	0800f96d 	.word	0x0800f96d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e330:	2b01      	cmp	r3, #1
 800e332:	f040 8203 	bne.w	800e73c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e33a:	f003 0310 	and.w	r3, r3, #16
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 81fc 	beq.w	800e73c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e348:	f003 0310 	and.w	r3, r3, #16
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 81f5 	beq.w	800e73c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2210      	movs	r2, #16
 800e358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e364:	2b40      	cmp	r3, #64	@ 0x40
 800e366:	f040 816d 	bne.w	800e644 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4aa4      	ldr	r2, [pc, #656]	@ (800e604 <HAL_UART_IRQHandler+0x59c>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d068      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4aa1      	ldr	r2, [pc, #644]	@ (800e608 <HAL_UART_IRQHandler+0x5a0>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d061      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a9f      	ldr	r2, [pc, #636]	@ (800e60c <HAL_UART_IRQHandler+0x5a4>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d05a      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a9c      	ldr	r2, [pc, #624]	@ (800e610 <HAL_UART_IRQHandler+0x5a8>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d053      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a9a      	ldr	r2, [pc, #616]	@ (800e614 <HAL_UART_IRQHandler+0x5ac>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d04c      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a97      	ldr	r2, [pc, #604]	@ (800e618 <HAL_UART_IRQHandler+0x5b0>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d045      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a95      	ldr	r2, [pc, #596]	@ (800e61c <HAL_UART_IRQHandler+0x5b4>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d03e      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a92      	ldr	r2, [pc, #584]	@ (800e620 <HAL_UART_IRQHandler+0x5b8>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d037      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a90      	ldr	r2, [pc, #576]	@ (800e624 <HAL_UART_IRQHandler+0x5bc>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d030      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a8d      	ldr	r2, [pc, #564]	@ (800e628 <HAL_UART_IRQHandler+0x5c0>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d029      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a8b      	ldr	r2, [pc, #556]	@ (800e62c <HAL_UART_IRQHandler+0x5c4>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d022      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a88      	ldr	r2, [pc, #544]	@ (800e630 <HAL_UART_IRQHandler+0x5c8>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d01b      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a86      	ldr	r2, [pc, #536]	@ (800e634 <HAL_UART_IRQHandler+0x5cc>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d014      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a83      	ldr	r2, [pc, #524]	@ (800e638 <HAL_UART_IRQHandler+0x5d0>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d00d      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a81      	ldr	r2, [pc, #516]	@ (800e63c <HAL_UART_IRQHandler+0x5d4>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d006      	beq.n	800e44a <HAL_UART_IRQHandler+0x3e2>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a7e      	ldr	r2, [pc, #504]	@ (800e640 <HAL_UART_IRQHandler+0x5d8>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d106      	bne.n	800e458 <HAL_UART_IRQHandler+0x3f0>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	b29b      	uxth	r3, r3
 800e456:	e005      	b.n	800e464 <HAL_UART_IRQHandler+0x3fc>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	b29b      	uxth	r3, r3
 800e464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 80ad 	beq.w	800e5cc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e47c:	429a      	cmp	r2, r3
 800e47e:	f080 80a5 	bcs.w	800e5cc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e492:	69db      	ldr	r3, [r3, #28]
 800e494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e498:	f000 8087 	beq.w	800e5aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e4b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e4b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e4c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1da      	bne.n	800e49c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e4f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4f8:	f023 0301 	bic.w	r3, r3, #1
 800e4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3308      	adds	r3, #8
 800e506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e50a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e50e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e51c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e1      	bne.n	800e4e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e54c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1e3      	bne.n	800e522 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2220      	movs	r2, #32
 800e55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e570:	e853 3f00 	ldrex	r3, [r3]
 800e574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e578:	f023 0310 	bic.w	r3, r3, #16
 800e57c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	461a      	mov	r2, r3
 800e586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e58a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e58c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e592:	e841 2300 	strex	r3, r2, [r1]
 800e596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1e4      	bne.n	800e568 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7f6 ff87 	bl	80054b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f939 	bl	800e83c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e5ca:	e119      	b.n	800e800 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	f040 8112 	bne.w	800e800 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5e8:	f040 810a 	bne.w	800e800 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2202      	movs	r2, #2
 800e5f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f91e 	bl	800e83c <HAL_UARTEx_RxEventCallback>
      return;
 800e600:	e0fe      	b.n	800e800 <HAL_UART_IRQHandler+0x798>
 800e602:	bf00      	nop
 800e604:	40020010 	.word	0x40020010
 800e608:	40020028 	.word	0x40020028
 800e60c:	40020040 	.word	0x40020040
 800e610:	40020058 	.word	0x40020058
 800e614:	40020070 	.word	0x40020070
 800e618:	40020088 	.word	0x40020088
 800e61c:	400200a0 	.word	0x400200a0
 800e620:	400200b8 	.word	0x400200b8
 800e624:	40020410 	.word	0x40020410
 800e628:	40020428 	.word	0x40020428
 800e62c:	40020440 	.word	0x40020440
 800e630:	40020458 	.word	0x40020458
 800e634:	40020470 	.word	0x40020470
 800e638:	40020488 	.word	0x40020488
 800e63c:	400204a0 	.word	0x400204a0
 800e640:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e650:	b29b      	uxth	r3, r3
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 80cf 	beq.w	800e804 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 80ca 	beq.w	800e804 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	e853 3f00 	ldrex	r3, [r3]
 800e67c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	461a      	mov	r2, r3
 800e68e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e692:	647b      	str	r3, [r7, #68]	@ 0x44
 800e694:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e69a:	e841 2300 	strex	r3, r2, [r1]
 800e69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1e4      	bne.n	800e670 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b0:	e853 3f00 	ldrex	r3, [r3]
 800e6b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e6b6:	6a3a      	ldr	r2, [r7, #32]
 800e6b8:	4b55      	ldr	r3, [pc, #340]	@ (800e810 <HAL_UART_IRQHandler+0x7a8>)
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3308      	adds	r3, #8
 800e6c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e6ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6d2:	e841 2300 	strex	r3, r2, [r1]
 800e6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1e3      	bne.n	800e6a6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f023 0310 	bic.w	r3, r3, #16
 800e706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	461a      	mov	r2, r3
 800e710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e714:	61fb      	str	r3, [r7, #28]
 800e716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e718:	69b9      	ldr	r1, [r7, #24]
 800e71a:	69fa      	ldr	r2, [r7, #28]
 800e71c:	e841 2300 	strex	r3, r2, [r1]
 800e720:	617b      	str	r3, [r7, #20]
   return(result);
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e4      	bne.n	800e6f2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2202      	movs	r2, #2
 800e72c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e72e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f881 	bl	800e83c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e73a:	e063      	b.n	800e804 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00e      	beq.n	800e766 <HAL_UART_IRQHandler+0x6fe>
 800e748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e74c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d008      	beq.n	800e766 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e75c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f001 f941 	bl	800f9e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e764:	e051      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d014      	beq.n	800e79c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d105      	bne.n	800e78a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e77e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d008      	beq.n	800e79c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d03a      	beq.n	800e808 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	4798      	blx	r3
    }
    return;
 800e79a:	e035      	b.n	800e808 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d009      	beq.n	800e7bc <HAL_UART_IRQHandler+0x754>
 800e7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d003      	beq.n	800e7bc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 f8eb 	bl	800f990 <UART_EndTransmit_IT>
    return;
 800e7ba:	e026      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d009      	beq.n	800e7dc <HAL_UART_IRQHandler+0x774>
 800e7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f001 f91a 	bl	800fa0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7da:	e016      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d010      	beq.n	800e80a <HAL_UART_IRQHandler+0x7a2>
 800e7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	da0c      	bge.n	800e80a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f001 f902 	bl	800f9fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7f6:	e008      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e7f8:	bf00      	nop
 800e7fa:	e006      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
    return;
 800e7fc:	bf00      	nop
 800e7fe:	e004      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e800:	bf00      	nop
 800e802:	e002      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
      return;
 800e804:	bf00      	nop
 800e806:	e000      	b.n	800e80a <HAL_UART_IRQHandler+0x7a2>
    return;
 800e808:	bf00      	nop
  }
}
 800e80a:	37e8      	adds	r7, #232	@ 0xe8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	effffffe 	.word	0xeffffffe

0800e814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e830:	bf00      	nop
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e858:	b092      	sub	sp, #72	@ 0x48
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e85e:	2300      	movs	r3, #0
 800e860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	689a      	ldr	r2, [r3, #8]
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	431a      	orrs	r2, r3
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	431a      	orrs	r2, r3
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	4313      	orrs	r3, r2
 800e87a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	4bbe      	ldr	r3, [pc, #760]	@ (800eb7c <UART_SetConfig+0x328>)
 800e884:	4013      	ands	r3, r2
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	6812      	ldr	r2, [r2, #0]
 800e88a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e88c:	430b      	orrs	r3, r1
 800e88e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	68da      	ldr	r2, [r3, #12]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4ab3      	ldr	r2, [pc, #716]	@ (800eb80 <UART_SetConfig+0x32c>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d004      	beq.n	800e8c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	6a1b      	ldr	r3, [r3, #32]
 800e8ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689a      	ldr	r2, [r3, #8]
 800e8c6:	4baf      	ldr	r3, [pc, #700]	@ (800eb84 <UART_SetConfig+0x330>)
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	697a      	ldr	r2, [r7, #20]
 800e8cc:	6812      	ldr	r2, [r2, #0]
 800e8ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8d0:	430b      	orrs	r3, r1
 800e8d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8da:	f023 010f 	bic.w	r1, r3, #15
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	430a      	orrs	r2, r1
 800e8e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4aa6      	ldr	r2, [pc, #664]	@ (800eb88 <UART_SetConfig+0x334>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d177      	bne.n	800e9e4 <UART_SetConfig+0x190>
 800e8f4:	4ba5      	ldr	r3, [pc, #660]	@ (800eb8c <UART_SetConfig+0x338>)
 800e8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e8fc:	2b28      	cmp	r3, #40	@ 0x28
 800e8fe:	d86d      	bhi.n	800e9dc <UART_SetConfig+0x188>
 800e900:	a201      	add	r2, pc, #4	@ (adr r2, 800e908 <UART_SetConfig+0xb4>)
 800e902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e906:	bf00      	nop
 800e908:	0800e9ad 	.word	0x0800e9ad
 800e90c:	0800e9dd 	.word	0x0800e9dd
 800e910:	0800e9dd 	.word	0x0800e9dd
 800e914:	0800e9dd 	.word	0x0800e9dd
 800e918:	0800e9dd 	.word	0x0800e9dd
 800e91c:	0800e9dd 	.word	0x0800e9dd
 800e920:	0800e9dd 	.word	0x0800e9dd
 800e924:	0800e9dd 	.word	0x0800e9dd
 800e928:	0800e9b5 	.word	0x0800e9b5
 800e92c:	0800e9dd 	.word	0x0800e9dd
 800e930:	0800e9dd 	.word	0x0800e9dd
 800e934:	0800e9dd 	.word	0x0800e9dd
 800e938:	0800e9dd 	.word	0x0800e9dd
 800e93c:	0800e9dd 	.word	0x0800e9dd
 800e940:	0800e9dd 	.word	0x0800e9dd
 800e944:	0800e9dd 	.word	0x0800e9dd
 800e948:	0800e9bd 	.word	0x0800e9bd
 800e94c:	0800e9dd 	.word	0x0800e9dd
 800e950:	0800e9dd 	.word	0x0800e9dd
 800e954:	0800e9dd 	.word	0x0800e9dd
 800e958:	0800e9dd 	.word	0x0800e9dd
 800e95c:	0800e9dd 	.word	0x0800e9dd
 800e960:	0800e9dd 	.word	0x0800e9dd
 800e964:	0800e9dd 	.word	0x0800e9dd
 800e968:	0800e9c5 	.word	0x0800e9c5
 800e96c:	0800e9dd 	.word	0x0800e9dd
 800e970:	0800e9dd 	.word	0x0800e9dd
 800e974:	0800e9dd 	.word	0x0800e9dd
 800e978:	0800e9dd 	.word	0x0800e9dd
 800e97c:	0800e9dd 	.word	0x0800e9dd
 800e980:	0800e9dd 	.word	0x0800e9dd
 800e984:	0800e9dd 	.word	0x0800e9dd
 800e988:	0800e9cd 	.word	0x0800e9cd
 800e98c:	0800e9dd 	.word	0x0800e9dd
 800e990:	0800e9dd 	.word	0x0800e9dd
 800e994:	0800e9dd 	.word	0x0800e9dd
 800e998:	0800e9dd 	.word	0x0800e9dd
 800e99c:	0800e9dd 	.word	0x0800e9dd
 800e9a0:	0800e9dd 	.word	0x0800e9dd
 800e9a4:	0800e9dd 	.word	0x0800e9dd
 800e9a8:	0800e9d5 	.word	0x0800e9d5
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b2:	e326      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ba:	e322      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9bc:	2308      	movs	r3, #8
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c2:	e31e      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ca:	e31a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9cc:	2320      	movs	r3, #32
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d2:	e316      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9d4:	2340      	movs	r3, #64	@ 0x40
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9da:	e312      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9dc:	2380      	movs	r3, #128	@ 0x80
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e2:	e30e      	b.n	800f002 <UART_SetConfig+0x7ae>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a69      	ldr	r2, [pc, #420]	@ (800eb90 <UART_SetConfig+0x33c>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d130      	bne.n	800ea50 <UART_SetConfig+0x1fc>
 800e9ee:	4b67      	ldr	r3, [pc, #412]	@ (800eb8c <UART_SetConfig+0x338>)
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f2:	f003 0307 	and.w	r3, r3, #7
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	d826      	bhi.n	800ea48 <UART_SetConfig+0x1f4>
 800e9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800ea00 <UART_SetConfig+0x1ac>)
 800e9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea00:	0800ea19 	.word	0x0800ea19
 800ea04:	0800ea21 	.word	0x0800ea21
 800ea08:	0800ea29 	.word	0x0800ea29
 800ea0c:	0800ea31 	.word	0x0800ea31
 800ea10:	0800ea39 	.word	0x0800ea39
 800ea14:	0800ea41 	.word	0x0800ea41
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e2f0      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea20:	2304      	movs	r3, #4
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e2ec      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea28:	2308      	movs	r3, #8
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e2e8      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea30:	2310      	movs	r3, #16
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea36:	e2e4      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea38:	2320      	movs	r3, #32
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3e:	e2e0      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea40:	2340      	movs	r3, #64	@ 0x40
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea46:	e2dc      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea48:	2380      	movs	r3, #128	@ 0x80
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4e:	e2d8      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a4f      	ldr	r2, [pc, #316]	@ (800eb94 <UART_SetConfig+0x340>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d130      	bne.n	800eabc <UART_SetConfig+0x268>
 800ea5a:	4b4c      	ldr	r3, [pc, #304]	@ (800eb8c <UART_SetConfig+0x338>)
 800ea5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea5e:	f003 0307 	and.w	r3, r3, #7
 800ea62:	2b05      	cmp	r3, #5
 800ea64:	d826      	bhi.n	800eab4 <UART_SetConfig+0x260>
 800ea66:	a201      	add	r2, pc, #4	@ (adr r2, 800ea6c <UART_SetConfig+0x218>)
 800ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6c:	0800ea85 	.word	0x0800ea85
 800ea70:	0800ea8d 	.word	0x0800ea8d
 800ea74:	0800ea95 	.word	0x0800ea95
 800ea78:	0800ea9d 	.word	0x0800ea9d
 800ea7c:	0800eaa5 	.word	0x0800eaa5
 800ea80:	0800eaad 	.word	0x0800eaad
 800ea84:	2300      	movs	r3, #0
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8a:	e2ba      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea92:	e2b6      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea94:	2308      	movs	r3, #8
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9a:	e2b2      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaa2:	e2ae      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaaa:	e2aa      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eaac:	2340      	movs	r3, #64	@ 0x40
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab2:	e2a6      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eab4:	2380      	movs	r3, #128	@ 0x80
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaba:	e2a2      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a35      	ldr	r2, [pc, #212]	@ (800eb98 <UART_SetConfig+0x344>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d130      	bne.n	800eb28 <UART_SetConfig+0x2d4>
 800eac6:	4b31      	ldr	r3, [pc, #196]	@ (800eb8c <UART_SetConfig+0x338>)
 800eac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaca:	f003 0307 	and.w	r3, r3, #7
 800eace:	2b05      	cmp	r3, #5
 800ead0:	d826      	bhi.n	800eb20 <UART_SetConfig+0x2cc>
 800ead2:	a201      	add	r2, pc, #4	@ (adr r2, 800ead8 <UART_SetConfig+0x284>)
 800ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead8:	0800eaf1 	.word	0x0800eaf1
 800eadc:	0800eaf9 	.word	0x0800eaf9
 800eae0:	0800eb01 	.word	0x0800eb01
 800eae4:	0800eb09 	.word	0x0800eb09
 800eae8:	0800eb11 	.word	0x0800eb11
 800eaec:	0800eb19 	.word	0x0800eb19
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e284      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eaf8:	2304      	movs	r3, #4
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafe:	e280      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb00:	2308      	movs	r3, #8
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb06:	e27c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb08:	2310      	movs	r3, #16
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0e:	e278      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb10:	2320      	movs	r3, #32
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb16:	e274      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb18:	2340      	movs	r3, #64	@ 0x40
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1e:	e270      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb20:	2380      	movs	r3, #128	@ 0x80
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb26:	e26c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800eb9c <UART_SetConfig+0x348>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d142      	bne.n	800ebb8 <UART_SetConfig+0x364>
 800eb32:	4b16      	ldr	r3, [pc, #88]	@ (800eb8c <UART_SetConfig+0x338>)
 800eb34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb36:	f003 0307 	and.w	r3, r3, #7
 800eb3a:	2b05      	cmp	r3, #5
 800eb3c:	d838      	bhi.n	800ebb0 <UART_SetConfig+0x35c>
 800eb3e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb44 <UART_SetConfig+0x2f0>)
 800eb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb44:	0800eb5d 	.word	0x0800eb5d
 800eb48:	0800eb65 	.word	0x0800eb65
 800eb4c:	0800eb6d 	.word	0x0800eb6d
 800eb50:	0800eb75 	.word	0x0800eb75
 800eb54:	0800eba1 	.word	0x0800eba1
 800eb58:	0800eba9 	.word	0x0800eba9
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e24e      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb64:	2304      	movs	r3, #4
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6a:	e24a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb6c:	2308      	movs	r3, #8
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb72:	e246      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb74:	2310      	movs	r3, #16
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7a:	e242      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eb7c:	cfff69f3 	.word	0xcfff69f3
 800eb80:	58000c00 	.word	0x58000c00
 800eb84:	11fff4ff 	.word	0x11fff4ff
 800eb88:	40011000 	.word	0x40011000
 800eb8c:	58024400 	.word	0x58024400
 800eb90:	40004400 	.word	0x40004400
 800eb94:	40004800 	.word	0x40004800
 800eb98:	40004c00 	.word	0x40004c00
 800eb9c:	40005000 	.word	0x40005000
 800eba0:	2320      	movs	r3, #32
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba6:	e22c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eba8:	2340      	movs	r3, #64	@ 0x40
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e228      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ebb0:	2380      	movs	r3, #128	@ 0x80
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e224      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4ab1      	ldr	r2, [pc, #708]	@ (800ee84 <UART_SetConfig+0x630>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d176      	bne.n	800ecb0 <UART_SetConfig+0x45c>
 800ebc2:	4bb1      	ldr	r3, [pc, #708]	@ (800ee88 <UART_SetConfig+0x634>)
 800ebc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ebca:	2b28      	cmp	r3, #40	@ 0x28
 800ebcc:	d86c      	bhi.n	800eca8 <UART_SetConfig+0x454>
 800ebce:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd4 <UART_SetConfig+0x380>)
 800ebd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd4:	0800ec79 	.word	0x0800ec79
 800ebd8:	0800eca9 	.word	0x0800eca9
 800ebdc:	0800eca9 	.word	0x0800eca9
 800ebe0:	0800eca9 	.word	0x0800eca9
 800ebe4:	0800eca9 	.word	0x0800eca9
 800ebe8:	0800eca9 	.word	0x0800eca9
 800ebec:	0800eca9 	.word	0x0800eca9
 800ebf0:	0800eca9 	.word	0x0800eca9
 800ebf4:	0800ec81 	.word	0x0800ec81
 800ebf8:	0800eca9 	.word	0x0800eca9
 800ebfc:	0800eca9 	.word	0x0800eca9
 800ec00:	0800eca9 	.word	0x0800eca9
 800ec04:	0800eca9 	.word	0x0800eca9
 800ec08:	0800eca9 	.word	0x0800eca9
 800ec0c:	0800eca9 	.word	0x0800eca9
 800ec10:	0800eca9 	.word	0x0800eca9
 800ec14:	0800ec89 	.word	0x0800ec89
 800ec18:	0800eca9 	.word	0x0800eca9
 800ec1c:	0800eca9 	.word	0x0800eca9
 800ec20:	0800eca9 	.word	0x0800eca9
 800ec24:	0800eca9 	.word	0x0800eca9
 800ec28:	0800eca9 	.word	0x0800eca9
 800ec2c:	0800eca9 	.word	0x0800eca9
 800ec30:	0800eca9 	.word	0x0800eca9
 800ec34:	0800ec91 	.word	0x0800ec91
 800ec38:	0800eca9 	.word	0x0800eca9
 800ec3c:	0800eca9 	.word	0x0800eca9
 800ec40:	0800eca9 	.word	0x0800eca9
 800ec44:	0800eca9 	.word	0x0800eca9
 800ec48:	0800eca9 	.word	0x0800eca9
 800ec4c:	0800eca9 	.word	0x0800eca9
 800ec50:	0800eca9 	.word	0x0800eca9
 800ec54:	0800ec99 	.word	0x0800ec99
 800ec58:	0800eca9 	.word	0x0800eca9
 800ec5c:	0800eca9 	.word	0x0800eca9
 800ec60:	0800eca9 	.word	0x0800eca9
 800ec64:	0800eca9 	.word	0x0800eca9
 800ec68:	0800eca9 	.word	0x0800eca9
 800ec6c:	0800eca9 	.word	0x0800eca9
 800ec70:	0800eca9 	.word	0x0800eca9
 800ec74:	0800eca1 	.word	0x0800eca1
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e1c0      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ec80:	2304      	movs	r3, #4
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e1bc      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ec88:	2308      	movs	r3, #8
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e1b8      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ec90:	2310      	movs	r3, #16
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec96:	e1b4      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ec98:	2320      	movs	r3, #32
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9e:	e1b0      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eca0:	2340      	movs	r3, #64	@ 0x40
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca6:	e1ac      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eca8:	2380      	movs	r3, #128	@ 0x80
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecae:	e1a8      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a75      	ldr	r2, [pc, #468]	@ (800ee8c <UART_SetConfig+0x638>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d130      	bne.n	800ed1c <UART_SetConfig+0x4c8>
 800ecba:	4b73      	ldr	r3, [pc, #460]	@ (800ee88 <UART_SetConfig+0x634>)
 800ecbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	2b05      	cmp	r3, #5
 800ecc4:	d826      	bhi.n	800ed14 <UART_SetConfig+0x4c0>
 800ecc6:	a201      	add	r2, pc, #4	@ (adr r2, 800eccc <UART_SetConfig+0x478>)
 800ecc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eccc:	0800ece5 	.word	0x0800ece5
 800ecd0:	0800eced 	.word	0x0800eced
 800ecd4:	0800ecf5 	.word	0x0800ecf5
 800ecd8:	0800ecfd 	.word	0x0800ecfd
 800ecdc:	0800ed05 	.word	0x0800ed05
 800ece0:	0800ed0d 	.word	0x0800ed0d
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e18a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ecec:	2304      	movs	r3, #4
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e186      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ecf4:	2308      	movs	r3, #8
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e182      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ecfc:	2310      	movs	r3, #16
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e17e      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed04:	2320      	movs	r3, #32
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0a:	e17a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed0c:	2340      	movs	r3, #64	@ 0x40
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed12:	e176      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed14:	2380      	movs	r3, #128	@ 0x80
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1a:	e172      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a5b      	ldr	r2, [pc, #364]	@ (800ee90 <UART_SetConfig+0x63c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d130      	bne.n	800ed88 <UART_SetConfig+0x534>
 800ed26:	4b58      	ldr	r3, [pc, #352]	@ (800ee88 <UART_SetConfig+0x634>)
 800ed28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b05      	cmp	r3, #5
 800ed30:	d826      	bhi.n	800ed80 <UART_SetConfig+0x52c>
 800ed32:	a201      	add	r2, pc, #4	@ (adr r2, 800ed38 <UART_SetConfig+0x4e4>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed51 	.word	0x0800ed51
 800ed3c:	0800ed59 	.word	0x0800ed59
 800ed40:	0800ed61 	.word	0x0800ed61
 800ed44:	0800ed69 	.word	0x0800ed69
 800ed48:	0800ed71 	.word	0x0800ed71
 800ed4c:	0800ed79 	.word	0x0800ed79
 800ed50:	2300      	movs	r3, #0
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e154      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed58:	2304      	movs	r3, #4
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e150      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed60:	2308      	movs	r3, #8
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e14c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed6e:	e148      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed70:	2320      	movs	r3, #32
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed76:	e144      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed78:	2340      	movs	r3, #64	@ 0x40
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7e:	e140      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed80:	2380      	movs	r3, #128	@ 0x80
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed86:	e13c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a41      	ldr	r2, [pc, #260]	@ (800ee94 <UART_SetConfig+0x640>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	f040 8082 	bne.w	800ee98 <UART_SetConfig+0x644>
 800ed94:	4b3c      	ldr	r3, [pc, #240]	@ (800ee88 <UART_SetConfig+0x634>)
 800ed96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed9c:	2b28      	cmp	r3, #40	@ 0x28
 800ed9e:	d86d      	bhi.n	800ee7c <UART_SetConfig+0x628>
 800eda0:	a201      	add	r2, pc, #4	@ (adr r2, 800eda8 <UART_SetConfig+0x554>)
 800eda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda6:	bf00      	nop
 800eda8:	0800ee4d 	.word	0x0800ee4d
 800edac:	0800ee7d 	.word	0x0800ee7d
 800edb0:	0800ee7d 	.word	0x0800ee7d
 800edb4:	0800ee7d 	.word	0x0800ee7d
 800edb8:	0800ee7d 	.word	0x0800ee7d
 800edbc:	0800ee7d 	.word	0x0800ee7d
 800edc0:	0800ee7d 	.word	0x0800ee7d
 800edc4:	0800ee7d 	.word	0x0800ee7d
 800edc8:	0800ee55 	.word	0x0800ee55
 800edcc:	0800ee7d 	.word	0x0800ee7d
 800edd0:	0800ee7d 	.word	0x0800ee7d
 800edd4:	0800ee7d 	.word	0x0800ee7d
 800edd8:	0800ee7d 	.word	0x0800ee7d
 800eddc:	0800ee7d 	.word	0x0800ee7d
 800ede0:	0800ee7d 	.word	0x0800ee7d
 800ede4:	0800ee7d 	.word	0x0800ee7d
 800ede8:	0800ee5d 	.word	0x0800ee5d
 800edec:	0800ee7d 	.word	0x0800ee7d
 800edf0:	0800ee7d 	.word	0x0800ee7d
 800edf4:	0800ee7d 	.word	0x0800ee7d
 800edf8:	0800ee7d 	.word	0x0800ee7d
 800edfc:	0800ee7d 	.word	0x0800ee7d
 800ee00:	0800ee7d 	.word	0x0800ee7d
 800ee04:	0800ee7d 	.word	0x0800ee7d
 800ee08:	0800ee65 	.word	0x0800ee65
 800ee0c:	0800ee7d 	.word	0x0800ee7d
 800ee10:	0800ee7d 	.word	0x0800ee7d
 800ee14:	0800ee7d 	.word	0x0800ee7d
 800ee18:	0800ee7d 	.word	0x0800ee7d
 800ee1c:	0800ee7d 	.word	0x0800ee7d
 800ee20:	0800ee7d 	.word	0x0800ee7d
 800ee24:	0800ee7d 	.word	0x0800ee7d
 800ee28:	0800ee6d 	.word	0x0800ee6d
 800ee2c:	0800ee7d 	.word	0x0800ee7d
 800ee30:	0800ee7d 	.word	0x0800ee7d
 800ee34:	0800ee7d 	.word	0x0800ee7d
 800ee38:	0800ee7d 	.word	0x0800ee7d
 800ee3c:	0800ee7d 	.word	0x0800ee7d
 800ee40:	0800ee7d 	.word	0x0800ee7d
 800ee44:	0800ee7d 	.word	0x0800ee7d
 800ee48:	0800ee75 	.word	0x0800ee75
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e0d6      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee54:	2304      	movs	r3, #4
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e0d2      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee5c:	2308      	movs	r3, #8
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e0ce      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee64:	2310      	movs	r3, #16
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e0ca      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee6c:	2320      	movs	r3, #32
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e0c6      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee74:	2340      	movs	r3, #64	@ 0x40
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e0c2      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee7c:	2380      	movs	r3, #128	@ 0x80
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e0be      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ee84:	40011400 	.word	0x40011400
 800ee88:	58024400 	.word	0x58024400
 800ee8c:	40007800 	.word	0x40007800
 800ee90:	40007c00 	.word	0x40007c00
 800ee94:	40011800 	.word	0x40011800
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4aad      	ldr	r2, [pc, #692]	@ (800f154 <UART_SetConfig+0x900>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d176      	bne.n	800ef90 <UART_SetConfig+0x73c>
 800eea2:	4bad      	ldr	r3, [pc, #692]	@ (800f158 <UART_SetConfig+0x904>)
 800eea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eeaa:	2b28      	cmp	r3, #40	@ 0x28
 800eeac:	d86c      	bhi.n	800ef88 <UART_SetConfig+0x734>
 800eeae:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb4 <UART_SetConfig+0x660>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800ef59 	.word	0x0800ef59
 800eeb8:	0800ef89 	.word	0x0800ef89
 800eebc:	0800ef89 	.word	0x0800ef89
 800eec0:	0800ef89 	.word	0x0800ef89
 800eec4:	0800ef89 	.word	0x0800ef89
 800eec8:	0800ef89 	.word	0x0800ef89
 800eecc:	0800ef89 	.word	0x0800ef89
 800eed0:	0800ef89 	.word	0x0800ef89
 800eed4:	0800ef61 	.word	0x0800ef61
 800eed8:	0800ef89 	.word	0x0800ef89
 800eedc:	0800ef89 	.word	0x0800ef89
 800eee0:	0800ef89 	.word	0x0800ef89
 800eee4:	0800ef89 	.word	0x0800ef89
 800eee8:	0800ef89 	.word	0x0800ef89
 800eeec:	0800ef89 	.word	0x0800ef89
 800eef0:	0800ef89 	.word	0x0800ef89
 800eef4:	0800ef69 	.word	0x0800ef69
 800eef8:	0800ef89 	.word	0x0800ef89
 800eefc:	0800ef89 	.word	0x0800ef89
 800ef00:	0800ef89 	.word	0x0800ef89
 800ef04:	0800ef89 	.word	0x0800ef89
 800ef08:	0800ef89 	.word	0x0800ef89
 800ef0c:	0800ef89 	.word	0x0800ef89
 800ef10:	0800ef89 	.word	0x0800ef89
 800ef14:	0800ef71 	.word	0x0800ef71
 800ef18:	0800ef89 	.word	0x0800ef89
 800ef1c:	0800ef89 	.word	0x0800ef89
 800ef20:	0800ef89 	.word	0x0800ef89
 800ef24:	0800ef89 	.word	0x0800ef89
 800ef28:	0800ef89 	.word	0x0800ef89
 800ef2c:	0800ef89 	.word	0x0800ef89
 800ef30:	0800ef89 	.word	0x0800ef89
 800ef34:	0800ef79 	.word	0x0800ef79
 800ef38:	0800ef89 	.word	0x0800ef89
 800ef3c:	0800ef89 	.word	0x0800ef89
 800ef40:	0800ef89 	.word	0x0800ef89
 800ef44:	0800ef89 	.word	0x0800ef89
 800ef48:	0800ef89 	.word	0x0800ef89
 800ef4c:	0800ef89 	.word	0x0800ef89
 800ef50:	0800ef89 	.word	0x0800ef89
 800ef54:	0800ef81 	.word	0x0800ef81
 800ef58:	2301      	movs	r3, #1
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e050      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef60:	2304      	movs	r3, #4
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e04c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef68:	2308      	movs	r3, #8
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e048      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef70:	2310      	movs	r3, #16
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e044      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef78:	2320      	movs	r3, #32
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e040      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef80:	2340      	movs	r3, #64	@ 0x40
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e03c      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef88:	2380      	movs	r3, #128	@ 0x80
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e038      	b.n	800f002 <UART_SetConfig+0x7ae>
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a71      	ldr	r2, [pc, #452]	@ (800f15c <UART_SetConfig+0x908>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d130      	bne.n	800effc <UART_SetConfig+0x7a8>
 800ef9a:	4b6f      	ldr	r3, [pc, #444]	@ (800f158 <UART_SetConfig+0x904>)
 800ef9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef9e:	f003 0307 	and.w	r3, r3, #7
 800efa2:	2b05      	cmp	r3, #5
 800efa4:	d826      	bhi.n	800eff4 <UART_SetConfig+0x7a0>
 800efa6:	a201      	add	r2, pc, #4	@ (adr r2, 800efac <UART_SetConfig+0x758>)
 800efa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efac:	0800efc5 	.word	0x0800efc5
 800efb0:	0800efcd 	.word	0x0800efcd
 800efb4:	0800efd5 	.word	0x0800efd5
 800efb8:	0800efdd 	.word	0x0800efdd
 800efbc:	0800efe5 	.word	0x0800efe5
 800efc0:	0800efed 	.word	0x0800efed
 800efc4:	2302      	movs	r3, #2
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e01a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800efcc:	2304      	movs	r3, #4
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e016      	b.n	800f002 <UART_SetConfig+0x7ae>
 800efd4:	2308      	movs	r3, #8
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e012      	b.n	800f002 <UART_SetConfig+0x7ae>
 800efdc:	2310      	movs	r3, #16
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e00e      	b.n	800f002 <UART_SetConfig+0x7ae>
 800efe4:	2320      	movs	r3, #32
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e00a      	b.n	800f002 <UART_SetConfig+0x7ae>
 800efec:	2340      	movs	r3, #64	@ 0x40
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff2:	e006      	b.n	800f002 <UART_SetConfig+0x7ae>
 800eff4:	2380      	movs	r3, #128	@ 0x80
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effa:	e002      	b.n	800f002 <UART_SetConfig+0x7ae>
 800effc:	2380      	movs	r3, #128	@ 0x80
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a55      	ldr	r2, [pc, #340]	@ (800f15c <UART_SetConfig+0x908>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	f040 80f8 	bne.w	800f1fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f00e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f012:	2b20      	cmp	r3, #32
 800f014:	dc46      	bgt.n	800f0a4 <UART_SetConfig+0x850>
 800f016:	2b02      	cmp	r3, #2
 800f018:	db75      	blt.n	800f106 <UART_SetConfig+0x8b2>
 800f01a:	3b02      	subs	r3, #2
 800f01c:	2b1e      	cmp	r3, #30
 800f01e:	d872      	bhi.n	800f106 <UART_SetConfig+0x8b2>
 800f020:	a201      	add	r2, pc, #4	@ (adr r2, 800f028 <UART_SetConfig+0x7d4>)
 800f022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f026:	bf00      	nop
 800f028:	0800f0ab 	.word	0x0800f0ab
 800f02c:	0800f107 	.word	0x0800f107
 800f030:	0800f0b3 	.word	0x0800f0b3
 800f034:	0800f107 	.word	0x0800f107
 800f038:	0800f107 	.word	0x0800f107
 800f03c:	0800f107 	.word	0x0800f107
 800f040:	0800f0c3 	.word	0x0800f0c3
 800f044:	0800f107 	.word	0x0800f107
 800f048:	0800f107 	.word	0x0800f107
 800f04c:	0800f107 	.word	0x0800f107
 800f050:	0800f107 	.word	0x0800f107
 800f054:	0800f107 	.word	0x0800f107
 800f058:	0800f107 	.word	0x0800f107
 800f05c:	0800f107 	.word	0x0800f107
 800f060:	0800f0d3 	.word	0x0800f0d3
 800f064:	0800f107 	.word	0x0800f107
 800f068:	0800f107 	.word	0x0800f107
 800f06c:	0800f107 	.word	0x0800f107
 800f070:	0800f107 	.word	0x0800f107
 800f074:	0800f107 	.word	0x0800f107
 800f078:	0800f107 	.word	0x0800f107
 800f07c:	0800f107 	.word	0x0800f107
 800f080:	0800f107 	.word	0x0800f107
 800f084:	0800f107 	.word	0x0800f107
 800f088:	0800f107 	.word	0x0800f107
 800f08c:	0800f107 	.word	0x0800f107
 800f090:	0800f107 	.word	0x0800f107
 800f094:	0800f107 	.word	0x0800f107
 800f098:	0800f107 	.word	0x0800f107
 800f09c:	0800f107 	.word	0x0800f107
 800f0a0:	0800f0f9 	.word	0x0800f0f9
 800f0a4:	2b40      	cmp	r3, #64	@ 0x40
 800f0a6:	d02a      	beq.n	800f0fe <UART_SetConfig+0x8aa>
 800f0a8:	e02d      	b.n	800f106 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f0aa:	f7fc fcbd 	bl	800ba28 <HAL_RCCEx_GetD3PCLK1Freq>
 800f0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f0b0:	e02f      	b.n	800f112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fc fccc 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0c0:	e027      	b.n	800f112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0c2:	f107 0318 	add.w	r3, r7, #24
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fc fe18 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d0:	e01f      	b.n	800f112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0d2:	4b21      	ldr	r3, [pc, #132]	@ (800f158 <UART_SetConfig+0x904>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0320 	and.w	r3, r3, #32
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d009      	beq.n	800f0f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0de:	4b1e      	ldr	r3, [pc, #120]	@ (800f158 <UART_SetConfig+0x904>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	08db      	lsrs	r3, r3, #3
 800f0e4:	f003 0303 	and.w	r3, r3, #3
 800f0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f160 <UART_SetConfig+0x90c>)
 800f0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0f0:	e00f      	b.n	800f112 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f160 <UART_SetConfig+0x90c>)
 800f0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f6:	e00c      	b.n	800f112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f164 <UART_SetConfig+0x910>)
 800f0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0fc:	e009      	b.n	800f112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f104:	e005      	b.n	800f112 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f114:	2b00      	cmp	r3, #0
 800f116:	f000 81ee 	beq.w	800f4f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11e:	4a12      	ldr	r2, [pc, #72]	@ (800f168 <UART_SetConfig+0x914>)
 800f120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f124:	461a      	mov	r2, r3
 800f126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f128:	fbb3 f3f2 	udiv	r3, r3, r2
 800f12c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	4613      	mov	r3, r2
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	4413      	add	r3, r2
 800f138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d305      	bcc.n	800f14a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f146:	429a      	cmp	r2, r3
 800f148:	d910      	bls.n	800f16c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f150:	e1d1      	b.n	800f4f6 <UART_SetConfig+0xca2>
 800f152:	bf00      	nop
 800f154:	40011c00 	.word	0x40011c00
 800f158:	58024400 	.word	0x58024400
 800f15c:	58000c00 	.word	0x58000c00
 800f160:	03d09000 	.word	0x03d09000
 800f164:	003d0900 	.word	0x003d0900
 800f168:	0801482c 	.word	0x0801482c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f16e:	2200      	movs	r2, #0
 800f170:	60bb      	str	r3, [r7, #8]
 800f172:	60fa      	str	r2, [r7, #12]
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f178:	4ac0      	ldr	r2, [pc, #768]	@ (800f47c <UART_SetConfig+0xc28>)
 800f17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f17e:	b29b      	uxth	r3, r3
 800f180:	2200      	movs	r2, #0
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	607a      	str	r2, [r7, #4]
 800f186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f18a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f18e:	f7f1 f917 	bl	80003c0 <__aeabi_uldivmod>
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	4610      	mov	r0, r2
 800f198:	4619      	mov	r1, r3
 800f19a:	f04f 0200 	mov.w	r2, #0
 800f19e:	f04f 0300 	mov.w	r3, #0
 800f1a2:	020b      	lsls	r3, r1, #8
 800f1a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f1a8:	0202      	lsls	r2, r0, #8
 800f1aa:	6979      	ldr	r1, [r7, #20]
 800f1ac:	6849      	ldr	r1, [r1, #4]
 800f1ae:	0849      	lsrs	r1, r1, #1
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	eb12 0804 	adds.w	r8, r2, r4
 800f1ba:	eb43 0905 	adc.w	r9, r3, r5
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	469a      	mov	sl, r3
 800f1c6:	4693      	mov	fp, r2
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 f8f6 	bl	80003c0 <__aeabi_uldivmod>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4613      	mov	r3, r2
 800f1da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1e2:	d308      	bcc.n	800f1f6 <UART_SetConfig+0x9a2>
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1ea:	d204      	bcs.n	800f1f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1f2:	60da      	str	r2, [r3, #12]
 800f1f4:	e17f      	b.n	800f4f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1fc:	e17b      	b.n	800f4f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	69db      	ldr	r3, [r3, #28]
 800f202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f206:	f040 80bd 	bne.w	800f384 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f20a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f20e:	2b20      	cmp	r3, #32
 800f210:	dc48      	bgt.n	800f2a4 <UART_SetConfig+0xa50>
 800f212:	2b00      	cmp	r3, #0
 800f214:	db7b      	blt.n	800f30e <UART_SetConfig+0xaba>
 800f216:	2b20      	cmp	r3, #32
 800f218:	d879      	bhi.n	800f30e <UART_SetConfig+0xaba>
 800f21a:	a201      	add	r2, pc, #4	@ (adr r2, 800f220 <UART_SetConfig+0x9cc>)
 800f21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f220:	0800f2ab 	.word	0x0800f2ab
 800f224:	0800f2b3 	.word	0x0800f2b3
 800f228:	0800f30f 	.word	0x0800f30f
 800f22c:	0800f30f 	.word	0x0800f30f
 800f230:	0800f2bb 	.word	0x0800f2bb
 800f234:	0800f30f 	.word	0x0800f30f
 800f238:	0800f30f 	.word	0x0800f30f
 800f23c:	0800f30f 	.word	0x0800f30f
 800f240:	0800f2cb 	.word	0x0800f2cb
 800f244:	0800f30f 	.word	0x0800f30f
 800f248:	0800f30f 	.word	0x0800f30f
 800f24c:	0800f30f 	.word	0x0800f30f
 800f250:	0800f30f 	.word	0x0800f30f
 800f254:	0800f30f 	.word	0x0800f30f
 800f258:	0800f30f 	.word	0x0800f30f
 800f25c:	0800f30f 	.word	0x0800f30f
 800f260:	0800f2db 	.word	0x0800f2db
 800f264:	0800f30f 	.word	0x0800f30f
 800f268:	0800f30f 	.word	0x0800f30f
 800f26c:	0800f30f 	.word	0x0800f30f
 800f270:	0800f30f 	.word	0x0800f30f
 800f274:	0800f30f 	.word	0x0800f30f
 800f278:	0800f30f 	.word	0x0800f30f
 800f27c:	0800f30f 	.word	0x0800f30f
 800f280:	0800f30f 	.word	0x0800f30f
 800f284:	0800f30f 	.word	0x0800f30f
 800f288:	0800f30f 	.word	0x0800f30f
 800f28c:	0800f30f 	.word	0x0800f30f
 800f290:	0800f30f 	.word	0x0800f30f
 800f294:	0800f30f 	.word	0x0800f30f
 800f298:	0800f30f 	.word	0x0800f30f
 800f29c:	0800f30f 	.word	0x0800f30f
 800f2a0:	0800f301 	.word	0x0800f301
 800f2a4:	2b40      	cmp	r3, #64	@ 0x40
 800f2a6:	d02e      	beq.n	800f306 <UART_SetConfig+0xab2>
 800f2a8:	e031      	b.n	800f30e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2aa:	f7fa fd1f 	bl	8009cec <HAL_RCC_GetPCLK1Freq>
 800f2ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2b0:	e033      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2b2:	f7fa fd31 	bl	8009d18 <HAL_RCC_GetPCLK2Freq>
 800f2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2b8:	e02f      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fc fbc8 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2c8:	e027      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2ca:	f107 0318 	add.w	r3, r7, #24
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fd14 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d8:	e01f      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2da:	4b69      	ldr	r3, [pc, #420]	@ (800f480 <UART_SetConfig+0xc2c>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f003 0320 	and.w	r3, r3, #32
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d009      	beq.n	800f2fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2e6:	4b66      	ldr	r3, [pc, #408]	@ (800f480 <UART_SetConfig+0xc2c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	08db      	lsrs	r3, r3, #3
 800f2ec:	f003 0303 	and.w	r3, r3, #3
 800f2f0:	4a64      	ldr	r2, [pc, #400]	@ (800f484 <UART_SetConfig+0xc30>)
 800f2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2f8:	e00f      	b.n	800f31a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f2fa:	4b62      	ldr	r3, [pc, #392]	@ (800f484 <UART_SetConfig+0xc30>)
 800f2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2fe:	e00c      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f300:	4b61      	ldr	r3, [pc, #388]	@ (800f488 <UART_SetConfig+0xc34>)
 800f302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f304:	e009      	b.n	800f31a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f30c:	e005      	b.n	800f31a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f30e:	2300      	movs	r3, #0
 800f310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 80ea 	beq.w	800f4f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f326:	4a55      	ldr	r2, [pc, #340]	@ (800f47c <UART_SetConfig+0xc28>)
 800f328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f32c:	461a      	mov	r2, r3
 800f32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f330:	fbb3 f3f2 	udiv	r3, r3, r2
 800f334:	005a      	lsls	r2, r3, #1
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	085b      	lsrs	r3, r3, #1
 800f33c:	441a      	add	r2, r3
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	fbb2 f3f3 	udiv	r3, r2, r3
 800f346:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34a:	2b0f      	cmp	r3, #15
 800f34c:	d916      	bls.n	800f37c <UART_SetConfig+0xb28>
 800f34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f354:	d212      	bcs.n	800f37c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	b29b      	uxth	r3, r3
 800f35a:	f023 030f 	bic.w	r3, r3, #15
 800f35e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f362:	085b      	lsrs	r3, r3, #1
 800f364:	b29b      	uxth	r3, r3
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f36e:	4313      	orrs	r3, r2
 800f370:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f378:	60da      	str	r2, [r3, #12]
 800f37a:	e0bc      	b.n	800f4f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f382:	e0b8      	b.n	800f4f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f384:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f388:	2b20      	cmp	r3, #32
 800f38a:	dc4b      	bgt.n	800f424 <UART_SetConfig+0xbd0>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f2c0 8087 	blt.w	800f4a0 <UART_SetConfig+0xc4c>
 800f392:	2b20      	cmp	r3, #32
 800f394:	f200 8084 	bhi.w	800f4a0 <UART_SetConfig+0xc4c>
 800f398:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a0 <UART_SetConfig+0xb4c>)
 800f39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39e:	bf00      	nop
 800f3a0:	0800f42b 	.word	0x0800f42b
 800f3a4:	0800f433 	.word	0x0800f433
 800f3a8:	0800f4a1 	.word	0x0800f4a1
 800f3ac:	0800f4a1 	.word	0x0800f4a1
 800f3b0:	0800f43b 	.word	0x0800f43b
 800f3b4:	0800f4a1 	.word	0x0800f4a1
 800f3b8:	0800f4a1 	.word	0x0800f4a1
 800f3bc:	0800f4a1 	.word	0x0800f4a1
 800f3c0:	0800f44b 	.word	0x0800f44b
 800f3c4:	0800f4a1 	.word	0x0800f4a1
 800f3c8:	0800f4a1 	.word	0x0800f4a1
 800f3cc:	0800f4a1 	.word	0x0800f4a1
 800f3d0:	0800f4a1 	.word	0x0800f4a1
 800f3d4:	0800f4a1 	.word	0x0800f4a1
 800f3d8:	0800f4a1 	.word	0x0800f4a1
 800f3dc:	0800f4a1 	.word	0x0800f4a1
 800f3e0:	0800f45b 	.word	0x0800f45b
 800f3e4:	0800f4a1 	.word	0x0800f4a1
 800f3e8:	0800f4a1 	.word	0x0800f4a1
 800f3ec:	0800f4a1 	.word	0x0800f4a1
 800f3f0:	0800f4a1 	.word	0x0800f4a1
 800f3f4:	0800f4a1 	.word	0x0800f4a1
 800f3f8:	0800f4a1 	.word	0x0800f4a1
 800f3fc:	0800f4a1 	.word	0x0800f4a1
 800f400:	0800f4a1 	.word	0x0800f4a1
 800f404:	0800f4a1 	.word	0x0800f4a1
 800f408:	0800f4a1 	.word	0x0800f4a1
 800f40c:	0800f4a1 	.word	0x0800f4a1
 800f410:	0800f4a1 	.word	0x0800f4a1
 800f414:	0800f4a1 	.word	0x0800f4a1
 800f418:	0800f4a1 	.word	0x0800f4a1
 800f41c:	0800f4a1 	.word	0x0800f4a1
 800f420:	0800f493 	.word	0x0800f493
 800f424:	2b40      	cmp	r3, #64	@ 0x40
 800f426:	d037      	beq.n	800f498 <UART_SetConfig+0xc44>
 800f428:	e03a      	b.n	800f4a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f42a:	f7fa fc5f 	bl	8009cec <HAL_RCC_GetPCLK1Freq>
 800f42e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f430:	e03c      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f432:	f7fa fc71 	bl	8009d18 <HAL_RCC_GetPCLK2Freq>
 800f436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f438:	e038      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f43a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fc fb08 	bl	800ba54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f448:	e030      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f44a:	f107 0318 	add.w	r3, r7, #24
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fc fc54 	bl	800bcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f458:	e028      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f45a:	4b09      	ldr	r3, [pc, #36]	@ (800f480 <UART_SetConfig+0xc2c>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0320 	and.w	r3, r3, #32
 800f462:	2b00      	cmp	r3, #0
 800f464:	d012      	beq.n	800f48c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f466:	4b06      	ldr	r3, [pc, #24]	@ (800f480 <UART_SetConfig+0xc2c>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	08db      	lsrs	r3, r3, #3
 800f46c:	f003 0303 	and.w	r3, r3, #3
 800f470:	4a04      	ldr	r2, [pc, #16]	@ (800f484 <UART_SetConfig+0xc30>)
 800f472:	fa22 f303 	lsr.w	r3, r2, r3
 800f476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f478:	e018      	b.n	800f4ac <UART_SetConfig+0xc58>
 800f47a:	bf00      	nop
 800f47c:	0801482c 	.word	0x0801482c
 800f480:	58024400 	.word	0x58024400
 800f484:	03d09000 	.word	0x03d09000
 800f488:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f48c:	4b24      	ldr	r3, [pc, #144]	@ (800f520 <UART_SetConfig+0xccc>)
 800f48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f490:	e00c      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f492:	4b24      	ldr	r3, [pc, #144]	@ (800f524 <UART_SetConfig+0xcd0>)
 800f494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f496:	e009      	b.n	800f4ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f498:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f49e:	e005      	b.n	800f4ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4aa:	bf00      	nop
    }

    if (pclk != 0U)
 800f4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d021      	beq.n	800f4f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b6:	4a1c      	ldr	r2, [pc, #112]	@ (800f528 <UART_SetConfig+0xcd4>)
 800f4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	085b      	lsrs	r3, r3, #1
 800f4ca:	441a      	add	r2, r3
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d8:	2b0f      	cmp	r3, #15
 800f4da:	d909      	bls.n	800f4f0 <UART_SetConfig+0xc9c>
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4e2:	d205      	bcs.n	800f4f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	60da      	str	r2, [r3, #12]
 800f4ee:	e002      	b.n	800f4f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2201      	movs	r2, #1
 800f502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2200      	movs	r2, #0
 800f50a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	2200      	movs	r2, #0
 800f510:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f512:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f516:	4618      	mov	r0, r3
 800f518:	3748      	adds	r7, #72	@ 0x48
 800f51a:	46bd      	mov	sp, r7
 800f51c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f520:	03d09000 	.word	0x03d09000
 800f524:	003d0900 	.word	0x003d0900
 800f528:	0801482c 	.word	0x0801482c

0800f52c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f538:	f003 0308 	and.w	r3, r3, #8
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00a      	beq.n	800f556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	430a      	orrs	r2, r1
 800f554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00a      	beq.n	800f578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	430a      	orrs	r2, r1
 800f576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	430a      	orrs	r2, r1
 800f598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f59e:	f003 0304 	and.w	r3, r3, #4
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00a      	beq.n	800f5bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00a      	beq.n	800f5de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	430a      	orrs	r2, r1
 800f5dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00a      	beq.n	800f600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	430a      	orrs	r2, r1
 800f5fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01a      	beq.n	800f642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	430a      	orrs	r2, r1
 800f620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f62a:	d10a      	bne.n	800f642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	430a      	orrs	r2, r1
 800f640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00a      	beq.n	800f664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	430a      	orrs	r2, r1
 800f662:	605a      	str	r2, [r3, #4]
  }
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b098      	sub	sp, #96	@ 0x60
 800f674:	af02      	add	r7, sp, #8
 800f676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f680:	f7f3 f9ae 	bl	80029e0 <HAL_GetTick>
 800f684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 0308 	and.w	r3, r3, #8
 800f690:	2b08      	cmp	r3, #8
 800f692:	d12f      	bne.n	800f6f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f69c:	2200      	movs	r2, #0
 800f69e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f88e 	bl	800f7c4 <UART_WaitOnFlagUntilTimeout>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d022      	beq.n	800f6f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	e853 3f00 	ldrex	r3, [r3]
 800f6ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6d4:	e841 2300 	strex	r3, r2, [r1]
 800f6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1e6      	bne.n	800f6ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2220      	movs	r2, #32
 800f6e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	e063      	b.n	800f7bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f003 0304 	and.w	r3, r3, #4
 800f6fe:	2b04      	cmp	r3, #4
 800f700:	d149      	bne.n	800f796 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f702:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f70a:	2200      	movs	r2, #0
 800f70c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 f857 	bl	800f7c4 <UART_WaitOnFlagUntilTimeout>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d03c      	beq.n	800f796 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f724:	e853 3f00 	ldrex	r3, [r3]
 800f728:	623b      	str	r3, [r7, #32]
   return(result);
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f73a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f73c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f742:	e841 2300 	strex	r3, r2, [r1]
 800f746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1e6      	bne.n	800f71c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3308      	adds	r3, #8
 800f754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	e853 3f00 	ldrex	r3, [r3]
 800f75c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f023 0301 	bic.w	r3, r3, #1
 800f764:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3308      	adds	r3, #8
 800f76c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f76e:	61fa      	str	r2, [r7, #28]
 800f770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	69b9      	ldr	r1, [r7, #24]
 800f774:	69fa      	ldr	r2, [r7, #28]
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	617b      	str	r3, [r7, #20]
   return(result);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e5      	bne.n	800f74e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2220      	movs	r2, #32
 800f786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e012      	b.n	800f7bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2220      	movs	r2, #32
 800f79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2220      	movs	r2, #32
 800f7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3758      	adds	r7, #88	@ 0x58
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	603b      	str	r3, [r7, #0]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7d4:	e04f      	b.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7dc:	d04b      	beq.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7de:	f7f3 f8ff 	bl	80029e0 <HAL_GetTick>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	69ba      	ldr	r2, [r7, #24]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d302      	bcc.n	800f7f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d101      	bne.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e04e      	b.n	800f896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0304 	and.w	r3, r3, #4
 800f802:	2b00      	cmp	r3, #0
 800f804:	d037      	beq.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b80      	cmp	r3, #128	@ 0x80
 800f80a:	d034      	beq.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b40      	cmp	r3, #64	@ 0x40
 800f810:	d031      	beq.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	f003 0308 	and.w	r3, r3, #8
 800f81c:	2b08      	cmp	r3, #8
 800f81e:	d110      	bne.n	800f842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2208      	movs	r2, #8
 800f826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 f839 	bl	800f8a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2208      	movs	r2, #8
 800f832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f83e:	2301      	movs	r3, #1
 800f840:	e029      	b.n	800f896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	69db      	ldr	r3, [r3, #28]
 800f848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f84c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f850:	d111      	bne.n	800f876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f85a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 f81f 	bl	800f8a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2220      	movs	r2, #32
 800f866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f872:	2303      	movs	r3, #3
 800f874:	e00f      	b.n	800f896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	69da      	ldr	r2, [r3, #28]
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	4013      	ands	r3, r2
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	429a      	cmp	r2, r3
 800f884:	bf0c      	ite	eq
 800f886:	2301      	moveq	r3, #1
 800f888:	2300      	movne	r3, #0
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	461a      	mov	r2, r3
 800f88e:	79fb      	ldrb	r3, [r7, #7]
 800f890:	429a      	cmp	r2, r3
 800f892:	d0a0      	beq.n	800f7d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b095      	sub	sp, #84	@ 0x54
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b0:	e853 3f00 	ldrex	r3, [r3]
 800f8b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8ce:	e841 2300 	strex	r3, r2, [r1]
 800f8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1e6      	bne.n	800f8a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3308      	adds	r3, #8
 800f8e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	e853 3f00 	ldrex	r3, [r3]
 800f8e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8ea:	69fa      	ldr	r2, [r7, #28]
 800f8ec:	4b1e      	ldr	r3, [pc, #120]	@ (800f968 <UART_EndRxTransfer+0xc8>)
 800f8ee:	4013      	ands	r3, r2
 800f8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f902:	e841 2300 	strex	r3, r2, [r1]
 800f906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1e5      	bne.n	800f8da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f912:	2b01      	cmp	r3, #1
 800f914:	d118      	bne.n	800f948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	e853 3f00 	ldrex	r3, [r3]
 800f922:	60bb      	str	r3, [r7, #8]
   return(result);
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f023 0310 	bic.w	r3, r3, #16
 800f92a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f934:	61bb      	str	r3, [r7, #24]
 800f936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	6979      	ldr	r1, [r7, #20]
 800f93a:	69ba      	ldr	r2, [r7, #24]
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	613b      	str	r3, [r7, #16]
   return(result);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e6      	bne.n	800f916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2220      	movs	r2, #32
 800f94c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f95c:	bf00      	nop
 800f95e:	3754      	adds	r7, #84	@ 0x54
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr
 800f968:	effffffe 	.word	0xeffffffe

0800f96c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2200      	movs	r2, #0
 800f97e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f7fe ff50 	bl	800e828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f988:	bf00      	nop
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b088      	sub	sp, #32
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	e853 3f00 	ldrex	r3, [r3]
 800f9a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9ac:	61fb      	str	r3, [r7, #28]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	61bb      	str	r3, [r7, #24]
 800f9b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ba:	6979      	ldr	r1, [r7, #20]
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	e841 2300 	strex	r3, r2, [r1]
 800f9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1e6      	bne.n	800f998 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7fe ff1b 	bl	800e814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9de:	bf00      	nop
 800f9e0:	3720      	adds	r7, #32
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9e6:	b480      	push	{r7}
 800f9e8:	b083      	sub	sp, #12
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9ee:	bf00      	nop
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b083      	sub	sp, #12
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa02:	bf00      	nop
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa0e:	b480      	push	{r7}
 800fa10:	b083      	sub	sp, #12
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa16:	bf00      	nop
 800fa18:	370c      	adds	r7, #12
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr

0800fa22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa22:	b480      	push	{r7}
 800fa24:	b085      	sub	sp, #20
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d101      	bne.n	800fa38 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa34:	2302      	movs	r3, #2
 800fa36:	e027      	b.n	800fa88 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2224      	movs	r2, #36	@ 0x24
 800fa44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f022 0201 	bic.w	r2, r2, #1
 800fa5e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fa66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2220      	movs	r2, #32
 800fa7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d101      	bne.n	800faac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800faa8:	2302      	movs	r3, #2
 800faaa:	e02d      	b.n	800fb08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2224      	movs	r2, #36	@ 0x24
 800fab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f022 0201 	bic.w	r2, r2, #1
 800fad2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	683a      	ldr	r2, [r7, #0]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f84f 	bl	800fb8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2220      	movs	r2, #32
 800fafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d101      	bne.n	800fb28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb24:	2302      	movs	r3, #2
 800fb26:	e02d      	b.n	800fb84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2224      	movs	r2, #36	@ 0x24
 800fb34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f022 0201 	bic.w	r2, r2, #1
 800fb4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	430a      	orrs	r2, r1
 800fb62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f811 	bl	800fb8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d108      	bne.n	800fbae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fbac:	e031      	b.n	800fc12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fbae:	2310      	movs	r3, #16
 800fbb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fbb2:	2310      	movs	r3, #16
 800fbb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	0e5b      	lsrs	r3, r3, #25
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	f003 0307 	and.w	r3, r3, #7
 800fbc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	0f5b      	lsrs	r3, r3, #29
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	f003 0307 	and.w	r3, r3, #7
 800fbd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
 800fbd8:	7b3a      	ldrb	r2, [r7, #12]
 800fbda:	4911      	ldr	r1, [pc, #68]	@ (800fc20 <UARTEx_SetNbDataToProcess+0x94>)
 800fbdc:	5c8a      	ldrb	r2, [r1, r2]
 800fbde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fbe2:	7b3a      	ldrb	r2, [r7, #12]
 800fbe4:	490f      	ldr	r1, [pc, #60]	@ (800fc24 <UARTEx_SetNbDataToProcess+0x98>)
 800fbe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
 800fbf6:	7b7a      	ldrb	r2, [r7, #13]
 800fbf8:	4909      	ldr	r1, [pc, #36]	@ (800fc20 <UARTEx_SetNbDataToProcess+0x94>)
 800fbfa:	5c8a      	ldrb	r2, [r1, r2]
 800fbfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fc00:	7b7a      	ldrb	r2, [r7, #13]
 800fc02:	4908      	ldr	r1, [pc, #32]	@ (800fc24 <UARTEx_SetNbDataToProcess+0x98>)
 800fc04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc06:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fc12:	bf00      	nop
 800fc14:	3714      	adds	r7, #20
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	08014844 	.word	0x08014844
 800fc24:	0801484c 	.word	0x0801484c

0800fc28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc28:	b084      	sub	sp, #16
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	f107 001c 	add.w	r0, r7, #28
 800fc36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d121      	bne.n	800fc86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	68da      	ldr	r2, [r3, #12]
 800fc52:	4b2c      	ldr	r3, [pc, #176]	@ (800fd04 <USB_CoreInit+0xdc>)
 800fc54:	4013      	ands	r3, r2
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fc66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d105      	bne.n	800fc7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f001 fafa 	bl	8011274 <USB_CoreReset>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73fb      	strb	r3, [r7, #15]
 800fc84:	e01b      	b.n	800fcbe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f001 faee 	bl	8011274 <USB_CoreReset>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fc9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d106      	bne.n	800fcb2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	639a      	str	r2, [r3, #56]	@ 0x38
 800fcb0:	e005      	b.n	800fcbe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fcbe:	7fbb      	ldrb	r3, [r7, #30]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d116      	bne.n	800fcf2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fd08 <USB_CoreInit+0xe0>)
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	f043 0206 	orr.w	r2, r3, #6
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f043 0220 	orr.w	r2, r3, #32
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fcfe:	b004      	add	sp, #16
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	ffbdffbf 	.word	0xffbdffbf
 800fd08:	03ee0000 	.word	0x03ee0000

0800fd0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b087      	sub	sp, #28
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	4613      	mov	r3, r2
 800fd18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b02      	cmp	r3, #2
 800fd1e:	d165      	bne.n	800fdec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	4a41      	ldr	r2, [pc, #260]	@ (800fe28 <USB_SetTurnaroundTime+0x11c>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d906      	bls.n	800fd36 <USB_SetTurnaroundTime+0x2a>
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	4a40      	ldr	r2, [pc, #256]	@ (800fe2c <USB_SetTurnaroundTime+0x120>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d202      	bcs.n	800fd36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fd30:	230f      	movs	r3, #15
 800fd32:	617b      	str	r3, [r7, #20]
 800fd34:	e062      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	4a3c      	ldr	r2, [pc, #240]	@ (800fe2c <USB_SetTurnaroundTime+0x120>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d306      	bcc.n	800fd4c <USB_SetTurnaroundTime+0x40>
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	4a3b      	ldr	r2, [pc, #236]	@ (800fe30 <USB_SetTurnaroundTime+0x124>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d202      	bcs.n	800fd4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fd46:	230e      	movs	r3, #14
 800fd48:	617b      	str	r3, [r7, #20]
 800fd4a:	e057      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	4a38      	ldr	r2, [pc, #224]	@ (800fe30 <USB_SetTurnaroundTime+0x124>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d306      	bcc.n	800fd62 <USB_SetTurnaroundTime+0x56>
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	4a37      	ldr	r2, [pc, #220]	@ (800fe34 <USB_SetTurnaroundTime+0x128>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d202      	bcs.n	800fd62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fd5c:	230d      	movs	r3, #13
 800fd5e:	617b      	str	r3, [r7, #20]
 800fd60:	e04c      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	4a33      	ldr	r2, [pc, #204]	@ (800fe34 <USB_SetTurnaroundTime+0x128>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d306      	bcc.n	800fd78 <USB_SetTurnaroundTime+0x6c>
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	4a32      	ldr	r2, [pc, #200]	@ (800fe38 <USB_SetTurnaroundTime+0x12c>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d802      	bhi.n	800fd78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fd72:	230c      	movs	r3, #12
 800fd74:	617b      	str	r3, [r7, #20]
 800fd76:	e041      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	4a2f      	ldr	r2, [pc, #188]	@ (800fe38 <USB_SetTurnaroundTime+0x12c>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d906      	bls.n	800fd8e <USB_SetTurnaroundTime+0x82>
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	4a2e      	ldr	r2, [pc, #184]	@ (800fe3c <USB_SetTurnaroundTime+0x130>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d802      	bhi.n	800fd8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fd88:	230b      	movs	r3, #11
 800fd8a:	617b      	str	r3, [r7, #20]
 800fd8c:	e036      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	4a2a      	ldr	r2, [pc, #168]	@ (800fe3c <USB_SetTurnaroundTime+0x130>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d906      	bls.n	800fda4 <USB_SetTurnaroundTime+0x98>
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	4a29      	ldr	r2, [pc, #164]	@ (800fe40 <USB_SetTurnaroundTime+0x134>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d802      	bhi.n	800fda4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fd9e:	230a      	movs	r3, #10
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e02b      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	4a26      	ldr	r2, [pc, #152]	@ (800fe40 <USB_SetTurnaroundTime+0x134>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d906      	bls.n	800fdba <USB_SetTurnaroundTime+0xae>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4a25      	ldr	r2, [pc, #148]	@ (800fe44 <USB_SetTurnaroundTime+0x138>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d202      	bcs.n	800fdba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fdb4:	2309      	movs	r3, #9
 800fdb6:	617b      	str	r3, [r7, #20]
 800fdb8:	e020      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	4a21      	ldr	r2, [pc, #132]	@ (800fe44 <USB_SetTurnaroundTime+0x138>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d306      	bcc.n	800fdd0 <USB_SetTurnaroundTime+0xc4>
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	4a20      	ldr	r2, [pc, #128]	@ (800fe48 <USB_SetTurnaroundTime+0x13c>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d802      	bhi.n	800fdd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fdca:	2308      	movs	r3, #8
 800fdcc:	617b      	str	r3, [r7, #20]
 800fdce:	e015      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	4a1d      	ldr	r2, [pc, #116]	@ (800fe48 <USB_SetTurnaroundTime+0x13c>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d906      	bls.n	800fde6 <USB_SetTurnaroundTime+0xda>
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	4a1c      	ldr	r2, [pc, #112]	@ (800fe4c <USB_SetTurnaroundTime+0x140>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d202      	bcs.n	800fde6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fde0:	2307      	movs	r3, #7
 800fde2:	617b      	str	r3, [r7, #20]
 800fde4:	e00a      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fde6:	2306      	movs	r3, #6
 800fde8:	617b      	str	r3, [r7, #20]
 800fdea:	e007      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d102      	bne.n	800fdf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fdf2:	2309      	movs	r3, #9
 800fdf4:	617b      	str	r3, [r7, #20]
 800fdf6:	e001      	b.n	800fdfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fdf8:	2309      	movs	r3, #9
 800fdfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	68da      	ldr	r2, [r3, #12]
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	029b      	lsls	r3, r3, #10
 800fe10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800fe14:	431a      	orrs	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	371c      	adds	r7, #28
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	00d8acbf 	.word	0x00d8acbf
 800fe2c:	00e4e1c0 	.word	0x00e4e1c0
 800fe30:	00f42400 	.word	0x00f42400
 800fe34:	01067380 	.word	0x01067380
 800fe38:	011a499f 	.word	0x011a499f
 800fe3c:	01312cff 	.word	0x01312cff
 800fe40:	014ca43f 	.word	0x014ca43f
 800fe44:	016e3600 	.word	0x016e3600
 800fe48:	01a6ab1f 	.word	0x01a6ab1f
 800fe4c:	01e84800 	.word	0x01e84800

0800fe50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	f043 0201 	orr.w	r2, r3, #1
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fe72:	b480      	push	{r7}
 800fe74:	b083      	sub	sp, #12
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	689b      	ldr	r3, [r3, #8]
 800fe7e:	f023 0201 	bic.w	r2, r3, #1
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d115      	bne.n	800fee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fec2:	200a      	movs	r0, #10
 800fec4:	f7f2 fd98 	bl	80029f8 <HAL_Delay>
      ms += 10U;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	330a      	adds	r3, #10
 800fecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f001 f93f 	bl	8011152 <USB_GetMode>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d01e      	beq.n	800ff18 <USB_SetCurrentMode+0x84>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2bc7      	cmp	r3, #199	@ 0xc7
 800fede:	d9f0      	bls.n	800fec2 <USB_SetCurrentMode+0x2e>
 800fee0:	e01a      	b.n	800ff18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fee2:	78fb      	ldrb	r3, [r7, #3]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d115      	bne.n	800ff14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fef4:	200a      	movs	r0, #10
 800fef6:	f7f2 fd7f 	bl	80029f8 <HAL_Delay>
      ms += 10U;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	330a      	adds	r3, #10
 800fefe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f001 f926 	bl	8011152 <USB_GetMode>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d005      	beq.n	800ff18 <USB_SetCurrentMode+0x84>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ff10:	d9f0      	bls.n	800fef4 <USB_SetCurrentMode+0x60>
 800ff12:	e001      	b.n	800ff18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ff14:	2301      	movs	r3, #1
 800ff16:	e005      	b.n	800ff24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ff1c:	d101      	bne.n	800ff22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e000      	b.n	800ff24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ff22:	2300      	movs	r3, #0
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b086      	sub	sp, #24
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
 800ff36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ff3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ff46:	2300      	movs	r3, #0
 800ff48:	613b      	str	r3, [r7, #16]
 800ff4a:	e009      	b.n	800ff60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	3340      	adds	r3, #64	@ 0x40
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	2200      	movs	r2, #0
 800ff58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	613b      	str	r3, [r7, #16]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	2b0e      	cmp	r3, #14
 800ff64:	d9f2      	bls.n	800ff4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ff66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d11c      	bne.n	800ffa8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ff7c:	f043 0302 	orr.w	r3, r3, #2
 800ff80:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff86:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	601a      	str	r2, [r3, #0]
 800ffa6:	e005      	b.n	800ffb4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ffba:	461a      	mov	r2, r3
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ffc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d10d      	bne.n	800ffe4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ffc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d104      	bne.n	800ffda <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f968 	bl	80102a8 <USB_SetDevSpeed>
 800ffd8:	e008      	b.n	800ffec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ffda:	2101      	movs	r1, #1
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 f963 	bl	80102a8 <USB_SetDevSpeed>
 800ffe2:	e003      	b.n	800ffec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ffe4:	2103      	movs	r1, #3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f95e 	bl	80102a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ffec:	2110      	movs	r1, #16
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 f8fa 	bl	80101e8 <USB_FlushTxFifo>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d001      	beq.n	800fffe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 f924 	bl	801024c <USB_FlushRxFifo>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d001      	beq.n	801000e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010014:	461a      	mov	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010020:	461a      	mov	r2, r3
 8010022:	2300      	movs	r3, #0
 8010024:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801002c:	461a      	mov	r2, r3
 801002e:	2300      	movs	r3, #0
 8010030:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010032:	2300      	movs	r3, #0
 8010034:	613b      	str	r3, [r7, #16]
 8010036:	e043      	b.n	80100c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801004a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801004e:	d118      	bne.n	8010082 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10a      	bne.n	801006c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	4413      	add	r3, r2
 801005e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010062:	461a      	mov	r2, r3
 8010064:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010068:	6013      	str	r3, [r2, #0]
 801006a:	e013      	b.n	8010094 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010078:	461a      	mov	r2, r3
 801007a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	e008      	b.n	8010094 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	015a      	lsls	r2, r3, #5
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801008e:	461a      	mov	r2, r3
 8010090:	2300      	movs	r3, #0
 8010092:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	015a      	lsls	r2, r3, #5
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	4413      	add	r3, r2
 801009c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a0:	461a      	mov	r2, r3
 80100a2:	2300      	movs	r3, #0
 80100a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100b2:	461a      	mov	r2, r3
 80100b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80100b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	3301      	adds	r3, #1
 80100be:	613b      	str	r3, [r7, #16]
 80100c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80100c4:	461a      	mov	r2, r3
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d3b5      	bcc.n	8010038 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100cc:	2300      	movs	r3, #0
 80100ce:	613b      	str	r3, [r7, #16]
 80100d0:	e043      	b.n	801015a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	015a      	lsls	r2, r3, #5
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	4413      	add	r3, r2
 80100da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80100e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80100e8:	d118      	bne.n	801011c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10a      	bne.n	8010106 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	015a      	lsls	r2, r3, #5
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	4413      	add	r3, r2
 80100f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100fc:	461a      	mov	r2, r3
 80100fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	e013      	b.n	801012e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	015a      	lsls	r2, r3, #5
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	4413      	add	r3, r2
 801010e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010112:	461a      	mov	r2, r3
 8010114:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010118:	6013      	str	r3, [r2, #0]
 801011a:	e008      	b.n	801012e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010128:	461a      	mov	r2, r3
 801012a:	2300      	movs	r3, #0
 801012c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	015a      	lsls	r2, r3, #5
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	4413      	add	r3, r2
 8010136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801013a:	461a      	mov	r2, r3
 801013c:	2300      	movs	r3, #0
 801013e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	015a      	lsls	r2, r3, #5
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	4413      	add	r3, r2
 8010148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801014c:	461a      	mov	r2, r3
 801014e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	3301      	adds	r3, #1
 8010158:	613b      	str	r3, [r7, #16]
 801015a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801015e:	461a      	mov	r2, r3
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	4293      	cmp	r3, r2
 8010164:	d3b5      	bcc.n	80100d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801016c:	691b      	ldr	r3, [r3, #16]
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010178:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010186:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801018c:	2b00      	cmp	r3, #0
 801018e:	d105      	bne.n	801019c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	f043 0210 	orr.w	r2, r3, #16
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	699a      	ldr	r2, [r3, #24]
 80101a0:	4b0f      	ldr	r3, [pc, #60]	@ (80101e0 <USB_DevInit+0x2b4>)
 80101a2:	4313      	orrs	r3, r2
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80101a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d005      	beq.n	80101bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	699b      	ldr	r3, [r3, #24]
 80101b4:	f043 0208 	orr.w	r2, r3, #8
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80101bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d105      	bne.n	80101d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	699a      	ldr	r2, [r3, #24]
 80101c8:	4b06      	ldr	r3, [pc, #24]	@ (80101e4 <USB_DevInit+0x2b8>)
 80101ca:	4313      	orrs	r3, r2
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80101d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101dc:	b004      	add	sp, #16
 80101de:	4770      	bx	lr
 80101e0:	803c3800 	.word	0x803c3800
 80101e4:	40000004 	.word	0x40000004

080101e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	3301      	adds	r3, #1
 80101fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010202:	d901      	bls.n	8010208 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010204:	2303      	movs	r3, #3
 8010206:	e01b      	b.n	8010240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	daf2      	bge.n	80101f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010210:	2300      	movs	r3, #0
 8010212:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	019b      	lsls	r3, r3, #6
 8010218:	f043 0220 	orr.w	r2, r3, #32
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	3301      	adds	r3, #1
 8010224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801022c:	d901      	bls.n	8010232 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801022e:	2303      	movs	r3, #3
 8010230:	e006      	b.n	8010240 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	f003 0320 	and.w	r3, r3, #32
 801023a:	2b20      	cmp	r3, #32
 801023c:	d0f0      	beq.n	8010220 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010254:	2300      	movs	r3, #0
 8010256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3301      	adds	r3, #1
 801025c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010264:	d901      	bls.n	801026a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	e018      	b.n	801029c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	691b      	ldr	r3, [r3, #16]
 801026e:	2b00      	cmp	r3, #0
 8010270:	daf2      	bge.n	8010258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010272:	2300      	movs	r3, #0
 8010274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2210      	movs	r2, #16
 801027a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3301      	adds	r3, #1
 8010280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010288:	d901      	bls.n	801028e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e006      	b.n	801029c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	f003 0310 	and.w	r3, r3, #16
 8010296:	2b10      	cmp	r3, #16
 8010298:	d0f0      	beq.n	801027c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	460b      	mov	r3, r1
 80102b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	68f9      	ldr	r1, [r7, #12]
 80102c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80102c8:	4313      	orrs	r3, r2
 80102ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80102da:	b480      	push	{r7}
 80102dc:	b087      	sub	sp, #28
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f003 0306 	and.w	r3, r3, #6
 80102f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d102      	bne.n	8010300 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80102fa:	2300      	movs	r3, #0
 80102fc:	75fb      	strb	r3, [r7, #23]
 80102fe:	e00a      	b.n	8010316 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b02      	cmp	r3, #2
 8010304:	d002      	beq.n	801030c <USB_GetDevSpeed+0x32>
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b06      	cmp	r3, #6
 801030a:	d102      	bne.n	8010312 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801030c:	2302      	movs	r3, #2
 801030e:	75fb      	strb	r3, [r7, #23]
 8010310:	e001      	b.n	8010316 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010312:	230f      	movs	r3, #15
 8010314:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010316:	7dfb      	ldrb	r3, [r7, #23]
}
 8010318:	4618      	mov	r0, r3
 801031a:	371c      	adds	r7, #28
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	785b      	ldrb	r3, [r3, #1]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d139      	bne.n	80103b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010346:	69da      	ldr	r2, [r3, #28]
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f003 030f 	and.w	r3, r3, #15
 8010350:	2101      	movs	r1, #1
 8010352:	fa01 f303 	lsl.w	r3, r1, r3
 8010356:	b29b      	uxth	r3, r3
 8010358:	68f9      	ldr	r1, [r7, #12]
 801035a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801035e:	4313      	orrs	r3, r2
 8010360:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	015a      	lsls	r2, r3, #5
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	4413      	add	r3, r2
 801036a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010374:	2b00      	cmp	r3, #0
 8010376:	d153      	bne.n	8010420 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	015a      	lsls	r2, r3, #5
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4413      	add	r3, r2
 8010380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	791b      	ldrb	r3, [r3, #4]
 8010392:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010394:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	059b      	lsls	r3, r3, #22
 801039a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801039c:	431a      	orrs	r2, r3
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	0159      	lsls	r1, r3, #5
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	440b      	add	r3, r1
 80103a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103aa:	4619      	mov	r1, r3
 80103ac:	4b20      	ldr	r3, [pc, #128]	@ (8010430 <USB_ActivateEndpoint+0x10c>)
 80103ae:	4313      	orrs	r3, r2
 80103b0:	600b      	str	r3, [r1, #0]
 80103b2:	e035      	b.n	8010420 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103ba:	69da      	ldr	r2, [r3, #28]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	f003 030f 	and.w	r3, r3, #15
 80103c4:	2101      	movs	r1, #1
 80103c6:	fa01 f303 	lsl.w	r3, r1, r3
 80103ca:	041b      	lsls	r3, r3, #16
 80103cc:	68f9      	ldr	r1, [r7, #12]
 80103ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80103d2:	4313      	orrs	r3, r2
 80103d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d119      	bne.n	8010420 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	015a      	lsls	r2, r3, #5
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	4413      	add	r3, r2
 80103f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	791b      	ldrb	r3, [r3, #4]
 8010406:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010408:	430b      	orrs	r3, r1
 801040a:	431a      	orrs	r2, r3
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	0159      	lsls	r1, r3, #5
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	440b      	add	r3, r1
 8010414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010418:	4619      	mov	r1, r3
 801041a:	4b05      	ldr	r3, [pc, #20]	@ (8010430 <USB_ActivateEndpoint+0x10c>)
 801041c:	4313      	orrs	r3, r2
 801041e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3714      	adds	r7, #20
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop
 8010430:	10008000 	.word	0x10008000

08010434 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	785b      	ldrb	r3, [r3, #1]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d161      	bne.n	8010514 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010466:	d11f      	bne.n	80104a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	0151      	lsls	r1, r2, #5
 801047a:	68fa      	ldr	r2, [r7, #12]
 801047c:	440a      	add	r2, r1
 801047e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010482:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010486:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	68ba      	ldr	r2, [r7, #8]
 8010498:	0151      	lsls	r1, r2, #5
 801049a:	68fa      	ldr	r2, [r7, #12]
 801049c:	440a      	add	r2, r1
 801049e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80104a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	f003 030f 	and.w	r3, r3, #15
 80104b8:	2101      	movs	r1, #1
 80104ba:	fa01 f303 	lsl.w	r3, r1, r3
 80104be:	b29b      	uxth	r3, r3
 80104c0:	43db      	mvns	r3, r3
 80104c2:	68f9      	ldr	r1, [r7, #12]
 80104c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104c8:	4013      	ands	r3, r2
 80104ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104d2:	69da      	ldr	r2, [r3, #28]
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f003 030f 	and.w	r3, r3, #15
 80104dc:	2101      	movs	r1, #1
 80104de:	fa01 f303 	lsl.w	r3, r1, r3
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	43db      	mvns	r3, r3
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104ec:	4013      	ands	r3, r2
 80104ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	015a      	lsls	r2, r3, #5
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	4413      	add	r3, r2
 80104f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	0159      	lsls	r1, r3, #5
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	440b      	add	r3, r1
 8010506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801050a:	4619      	mov	r1, r3
 801050c:	4b35      	ldr	r3, [pc, #212]	@ (80105e4 <USB_DeactivateEndpoint+0x1b0>)
 801050e:	4013      	ands	r3, r2
 8010510:	600b      	str	r3, [r1, #0]
 8010512:	e060      	b.n	80105d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010526:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801052a:	d11f      	bne.n	801056c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	015a      	lsls	r2, r3, #5
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4413      	add	r3, r2
 8010534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	0151      	lsls	r1, r2, #5
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	440a      	add	r2, r1
 8010542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010546:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801054a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	015a      	lsls	r2, r3, #5
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4413      	add	r3, r2
 8010554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	0151      	lsls	r1, r2, #5
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	440a      	add	r2, r1
 8010562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010566:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801056a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	f003 030f 	and.w	r3, r3, #15
 801057c:	2101      	movs	r1, #1
 801057e:	fa01 f303 	lsl.w	r3, r1, r3
 8010582:	041b      	lsls	r3, r3, #16
 8010584:	43db      	mvns	r3, r3
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801058c:	4013      	ands	r3, r2
 801058e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010596:	69da      	ldr	r2, [r3, #28]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	f003 030f 	and.w	r3, r3, #15
 80105a0:	2101      	movs	r1, #1
 80105a2:	fa01 f303 	lsl.w	r3, r1, r3
 80105a6:	041b      	lsls	r3, r3, #16
 80105a8:	43db      	mvns	r3, r3
 80105aa:	68f9      	ldr	r1, [r7, #12]
 80105ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80105b0:	4013      	ands	r3, r2
 80105b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	015a      	lsls	r2, r3, #5
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	4413      	add	r3, r2
 80105bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	0159      	lsls	r1, r3, #5
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	440b      	add	r3, r1
 80105ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ce:	4619      	mov	r1, r3
 80105d0:	4b05      	ldr	r3, [pc, #20]	@ (80105e8 <USB_DeactivateEndpoint+0x1b4>)
 80105d2:	4013      	ands	r3, r2
 80105d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	ec337800 	.word	0xec337800
 80105e8:	eff37800 	.word	0xeff37800

080105ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08a      	sub	sp, #40	@ 0x28
 80105f0:	af02      	add	r7, sp, #8
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	4613      	mov	r3, r2
 80105f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	785b      	ldrb	r3, [r3, #1]
 8010608:	2b01      	cmp	r3, #1
 801060a:	f040 8185 	bne.w	8010918 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d132      	bne.n	801067c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	015a      	lsls	r2, r3, #5
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	4413      	add	r3, r2
 801061e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010622:	691a      	ldr	r2, [r3, #16]
 8010624:	69bb      	ldr	r3, [r7, #24]
 8010626:	0159      	lsls	r1, r3, #5
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	440b      	add	r3, r1
 801062c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010630:	4619      	mov	r1, r3
 8010632:	4ba7      	ldr	r3, [pc, #668]	@ (80108d0 <USB_EPStartXfer+0x2e4>)
 8010634:	4013      	ands	r3, r2
 8010636:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	69ba      	ldr	r2, [r7, #24]
 8010648:	0151      	lsls	r1, r2, #5
 801064a:	69fa      	ldr	r2, [r7, #28]
 801064c:	440a      	add	r2, r1
 801064e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	015a      	lsls	r2, r3, #5
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	4413      	add	r3, r2
 8010660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010664:	691a      	ldr	r2, [r3, #16]
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	0159      	lsls	r1, r3, #5
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	440b      	add	r3, r1
 801066e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010672:	4619      	mov	r1, r3
 8010674:	4b97      	ldr	r3, [pc, #604]	@ (80108d4 <USB_EPStartXfer+0x2e8>)
 8010676:	4013      	ands	r3, r2
 8010678:	610b      	str	r3, [r1, #16]
 801067a:	e097      	b.n	80107ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	015a      	lsls	r2, r3, #5
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	4413      	add	r3, r2
 8010684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010688:	691a      	ldr	r2, [r3, #16]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	0159      	lsls	r1, r3, #5
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	440b      	add	r3, r1
 8010692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010696:	4619      	mov	r1, r3
 8010698:	4b8e      	ldr	r3, [pc, #568]	@ (80108d4 <USB_EPStartXfer+0x2e8>)
 801069a:	4013      	ands	r3, r2
 801069c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	015a      	lsls	r2, r3, #5
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	4413      	add	r3, r2
 80106a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106aa:	691a      	ldr	r2, [r3, #16]
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	0159      	lsls	r1, r3, #5
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	440b      	add	r3, r1
 80106b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106b8:	4619      	mov	r1, r3
 80106ba:	4b85      	ldr	r3, [pc, #532]	@ (80108d0 <USB_EPStartXfer+0x2e4>)
 80106bc:	4013      	ands	r3, r2
 80106be:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d11a      	bne.n	80106fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	691a      	ldr	r2, [r3, #16]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d903      	bls.n	80106da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	689a      	ldr	r2, [r3, #8]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	015a      	lsls	r2, r3, #5
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	4413      	add	r3, r2
 80106e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	69ba      	ldr	r2, [r7, #24]
 80106ea:	0151      	lsls	r1, r2, #5
 80106ec:	69fa      	ldr	r2, [r7, #28]
 80106ee:	440a      	add	r2, r1
 80106f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80106f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80106f8:	6113      	str	r3, [r2, #16]
 80106fa:	e044      	b.n	8010786 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	691a      	ldr	r2, [r3, #16]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	4413      	add	r3, r2
 8010706:	1e5a      	subs	r2, r3, #1
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010710:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	015a      	lsls	r2, r3, #5
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	4413      	add	r3, r2
 801071a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801071e:	691a      	ldr	r2, [r3, #16]
 8010720:	8afb      	ldrh	r3, [r7, #22]
 8010722:	04d9      	lsls	r1, r3, #19
 8010724:	4b6c      	ldr	r3, [pc, #432]	@ (80108d8 <USB_EPStartXfer+0x2ec>)
 8010726:	400b      	ands	r3, r1
 8010728:	69b9      	ldr	r1, [r7, #24]
 801072a:	0148      	lsls	r0, r1, #5
 801072c:	69f9      	ldr	r1, [r7, #28]
 801072e:	4401      	add	r1, r0
 8010730:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010734:	4313      	orrs	r3, r2
 8010736:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	791b      	ldrb	r3, [r3, #4]
 801073c:	2b01      	cmp	r3, #1
 801073e:	d122      	bne.n	8010786 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	4413      	add	r3, r2
 8010748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	69ba      	ldr	r2, [r7, #24]
 8010750:	0151      	lsls	r1, r2, #5
 8010752:	69fa      	ldr	r2, [r7, #28]
 8010754:	440a      	add	r2, r1
 8010756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801075a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801075e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	015a      	lsls	r2, r3, #5
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	4413      	add	r3, r2
 8010768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801076c:	691a      	ldr	r2, [r3, #16]
 801076e:	8afb      	ldrh	r3, [r7, #22]
 8010770:	075b      	lsls	r3, r3, #29
 8010772:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010776:	69b9      	ldr	r1, [r7, #24]
 8010778:	0148      	lsls	r0, r1, #5
 801077a:	69f9      	ldr	r1, [r7, #28]
 801077c:	4401      	add	r1, r0
 801077e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010782:	4313      	orrs	r3, r2
 8010784:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	015a      	lsls	r2, r3, #5
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	4413      	add	r3, r2
 801078e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010792:	691a      	ldr	r2, [r3, #16]
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801079c:	69b9      	ldr	r1, [r7, #24]
 801079e:	0148      	lsls	r0, r1, #5
 80107a0:	69f9      	ldr	r1, [r7, #28]
 80107a2:	4401      	add	r1, r0
 80107a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80107a8:	4313      	orrs	r3, r2
 80107aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80107ac:	79fb      	ldrb	r3, [r7, #7]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d14b      	bne.n	801084a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d009      	beq.n	80107ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	015a      	lsls	r2, r3, #5
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	4413      	add	r3, r2
 80107c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107c6:	461a      	mov	r2, r3
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	69db      	ldr	r3, [r3, #28]
 80107cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	791b      	ldrb	r3, [r3, #4]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d128      	bne.n	8010828 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d110      	bne.n	8010808 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	015a      	lsls	r2, r3, #5
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	4413      	add	r3, r2
 80107ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	69ba      	ldr	r2, [r7, #24]
 80107f6:	0151      	lsls	r1, r2, #5
 80107f8:	69fa      	ldr	r2, [r7, #28]
 80107fa:	440a      	add	r2, r1
 80107fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010800:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010804:	6013      	str	r3, [r2, #0]
 8010806:	e00f      	b.n	8010828 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	015a      	lsls	r2, r3, #5
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	4413      	add	r3, r2
 8010810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	69ba      	ldr	r2, [r7, #24]
 8010818:	0151      	lsls	r1, r2, #5
 801081a:	69fa      	ldr	r2, [r7, #28]
 801081c:	440a      	add	r2, r1
 801081e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010826:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	015a      	lsls	r2, r3, #5
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	4413      	add	r3, r2
 8010830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	69ba      	ldr	r2, [r7, #24]
 8010838:	0151      	lsls	r1, r2, #5
 801083a:	69fa      	ldr	r2, [r7, #28]
 801083c:	440a      	add	r2, r1
 801083e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010842:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	e169      	b.n	8010b1e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	015a      	lsls	r2, r3, #5
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	4413      	add	r3, r2
 8010852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	69ba      	ldr	r2, [r7, #24]
 801085a:	0151      	lsls	r1, r2, #5
 801085c:	69fa      	ldr	r2, [r7, #28]
 801085e:	440a      	add	r2, r1
 8010860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010864:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010868:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	791b      	ldrb	r3, [r3, #4]
 801086e:	2b01      	cmp	r3, #1
 8010870:	d015      	beq.n	801089e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	f000 8151 	beq.w	8010b1e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	f003 030f 	and.w	r3, r3, #15
 801088c:	2101      	movs	r1, #1
 801088e:	fa01 f303 	lsl.w	r3, r1, r3
 8010892:	69f9      	ldr	r1, [r7, #28]
 8010894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010898:	4313      	orrs	r3, r2
 801089a:	634b      	str	r3, [r1, #52]	@ 0x34
 801089c:	e13f      	b.n	8010b1e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d116      	bne.n	80108dc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	015a      	lsls	r2, r3, #5
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	4413      	add	r3, r2
 80108b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	69ba      	ldr	r2, [r7, #24]
 80108be:	0151      	lsls	r1, r2, #5
 80108c0:	69fa      	ldr	r2, [r7, #28]
 80108c2:	440a      	add	r2, r1
 80108c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80108cc:	6013      	str	r3, [r2, #0]
 80108ce:	e015      	b.n	80108fc <USB_EPStartXfer+0x310>
 80108d0:	e007ffff 	.word	0xe007ffff
 80108d4:	fff80000 	.word	0xfff80000
 80108d8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	015a      	lsls	r2, r3, #5
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	4413      	add	r3, r2
 80108e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	0151      	lsls	r1, r2, #5
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	440a      	add	r2, r1
 80108f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80108fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	68d9      	ldr	r1, [r3, #12]
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	781a      	ldrb	r2, [r3, #0]
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	691b      	ldr	r3, [r3, #16]
 8010908:	b298      	uxth	r0, r3
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	4603      	mov	r3, r0
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f000 f9b9 	bl	8010c88 <USB_WritePacket>
 8010916:	e102      	b.n	8010b1e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010924:	691a      	ldr	r2, [r3, #16]
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	0159      	lsls	r1, r3, #5
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	440b      	add	r3, r1
 801092e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010932:	4619      	mov	r1, r3
 8010934:	4b7c      	ldr	r3, [pc, #496]	@ (8010b28 <USB_EPStartXfer+0x53c>)
 8010936:	4013      	ands	r3, r2
 8010938:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	015a      	lsls	r2, r3, #5
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	4413      	add	r3, r2
 8010942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010946:	691a      	ldr	r2, [r3, #16]
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	0159      	lsls	r1, r3, #5
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	440b      	add	r3, r1
 8010950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010954:	4619      	mov	r1, r3
 8010956:	4b75      	ldr	r3, [pc, #468]	@ (8010b2c <USB_EPStartXfer+0x540>)
 8010958:	4013      	ands	r3, r2
 801095a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d12f      	bne.n	80109c2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	689a      	ldr	r2, [r3, #8]
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	689a      	ldr	r2, [r3, #8]
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	015a      	lsls	r2, r3, #5
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	4413      	add	r3, r2
 8010982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010986:	691a      	ldr	r2, [r3, #16]
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	6a1b      	ldr	r3, [r3, #32]
 801098c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010990:	69b9      	ldr	r1, [r7, #24]
 8010992:	0148      	lsls	r0, r1, #5
 8010994:	69f9      	ldr	r1, [r7, #28]
 8010996:	4401      	add	r1, r0
 8010998:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801099c:	4313      	orrs	r3, r2
 801099e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	015a      	lsls	r2, r3, #5
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	4413      	add	r3, r2
 80109a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	0151      	lsls	r1, r2, #5
 80109b2:	69fa      	ldr	r2, [r7, #28]
 80109b4:	440a      	add	r2, r1
 80109b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80109ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80109be:	6113      	str	r3, [r2, #16]
 80109c0:	e05f      	b.n	8010a82 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d123      	bne.n	8010a12 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	015a      	lsls	r2, r3, #5
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	4413      	add	r3, r2
 80109d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109d6:	691a      	ldr	r2, [r3, #16]
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109e0:	69b9      	ldr	r1, [r7, #24]
 80109e2:	0148      	lsls	r0, r1, #5
 80109e4:	69f9      	ldr	r1, [r7, #28]
 80109e6:	4401      	add	r1, r0
 80109e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80109ec:	4313      	orrs	r3, r2
 80109ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	015a      	lsls	r2, r3, #5
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	4413      	add	r3, r2
 80109f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	69ba      	ldr	r2, [r7, #24]
 8010a00:	0151      	lsls	r1, r2, #5
 8010a02:	69fa      	ldr	r2, [r7, #28]
 8010a04:	440a      	add	r2, r1
 8010a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010a0e:	6113      	str	r3, [r2, #16]
 8010a10:	e037      	b.n	8010a82 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	691a      	ldr	r2, [r3, #16]
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	1e5a      	subs	r2, r3, #1
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a26:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	8afa      	ldrh	r2, [r7, #22]
 8010a2e:	fb03 f202 	mul.w	r2, r3, r2
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	015a      	lsls	r2, r3, #5
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a42:	691a      	ldr	r2, [r3, #16]
 8010a44:	8afb      	ldrh	r3, [r7, #22]
 8010a46:	04d9      	lsls	r1, r3, #19
 8010a48:	4b39      	ldr	r3, [pc, #228]	@ (8010b30 <USB_EPStartXfer+0x544>)
 8010a4a:	400b      	ands	r3, r1
 8010a4c:	69b9      	ldr	r1, [r7, #24]
 8010a4e:	0148      	lsls	r0, r1, #5
 8010a50:	69f9      	ldr	r1, [r7, #28]
 8010a52:	4401      	add	r1, r0
 8010a54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	015a      	lsls	r2, r3, #5
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	4413      	add	r3, r2
 8010a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a68:	691a      	ldr	r2, [r3, #16]
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a72:	69b9      	ldr	r1, [r7, #24]
 8010a74:	0148      	lsls	r0, r1, #5
 8010a76:	69f9      	ldr	r1, [r7, #28]
 8010a78:	4401      	add	r1, r0
 8010a7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010a82:	79fb      	ldrb	r3, [r7, #7]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d10d      	bne.n	8010aa4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d009      	beq.n	8010aa4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	68d9      	ldr	r1, [r3, #12]
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	015a      	lsls	r2, r3, #5
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aa0:	460a      	mov	r2, r1
 8010aa2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	791b      	ldrb	r3, [r3, #4]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d128      	bne.n	8010afe <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d110      	bne.n	8010ade <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	015a      	lsls	r2, r3, #5
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	69ba      	ldr	r2, [r7, #24]
 8010acc:	0151      	lsls	r1, r2, #5
 8010ace:	69fa      	ldr	r2, [r7, #28]
 8010ad0:	440a      	add	r2, r1
 8010ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ad6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010ada:	6013      	str	r3, [r2, #0]
 8010adc:	e00f      	b.n	8010afe <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	015a      	lsls	r2, r3, #5
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	69ba      	ldr	r2, [r7, #24]
 8010aee:	0151      	lsls	r1, r2, #5
 8010af0:	69fa      	ldr	r2, [r7, #28]
 8010af2:	440a      	add	r2, r1
 8010af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010afc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	015a      	lsls	r2, r3, #5
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	4413      	add	r3, r2
 8010b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	69ba      	ldr	r2, [r7, #24]
 8010b0e:	0151      	lsls	r1, r2, #5
 8010b10:	69fa      	ldr	r2, [r7, #28]
 8010b12:	440a      	add	r2, r1
 8010b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010b1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3720      	adds	r7, #32
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	fff80000 	.word	0xfff80000
 8010b2c:	e007ffff 	.word	0xe007ffff
 8010b30:	1ff80000 	.word	0x1ff80000

08010b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b087      	sub	sp, #28
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	785b      	ldrb	r3, [r3, #1]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d14a      	bne.n	8010be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	015a      	lsls	r2, r3, #5
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b6a:	f040 8086 	bne.w	8010c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	015a      	lsls	r2, r3, #5
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	4413      	add	r3, r2
 8010b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	7812      	ldrb	r2, [r2, #0]
 8010b82:	0151      	lsls	r1, r2, #5
 8010b84:	693a      	ldr	r2, [r7, #16]
 8010b86:	440a      	add	r2, r1
 8010b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	015a      	lsls	r2, r3, #5
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	7812      	ldrb	r2, [r2, #0]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d902      	bls.n	8010bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8010bca:	e056      	b.n	8010c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	015a      	lsls	r2, r3, #5
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010be4:	d0e7      	beq.n	8010bb6 <USB_EPStopXfer+0x82>
 8010be6:	e048      	b.n	8010c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	015a      	lsls	r2, r3, #5
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c00:	d13b      	bne.n	8010c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	015a      	lsls	r2, r3, #5
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	7812      	ldrb	r2, [r2, #0]
 8010c16:	0151      	lsls	r1, r2, #5
 8010c18:	693a      	ldr	r2, [r7, #16]
 8010c1a:	440a      	add	r2, r1
 8010c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	015a      	lsls	r2, r3, #5
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	7812      	ldrb	r2, [r2, #0]
 8010c3a:	0151      	lsls	r1, r2, #5
 8010c3c:	693a      	ldr	r2, [r7, #16]
 8010c3e:	440a      	add	r2, r1
 8010c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d902      	bls.n	8010c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8010c5e:	e00c      	b.n	8010c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	015a      	lsls	r2, r3, #5
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	4413      	add	r3, r2
 8010c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c78:	d0e7      	beq.n	8010c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	371c      	adds	r7, #28
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b089      	sub	sp, #36	@ 0x24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	4611      	mov	r1, r2
 8010c94:	461a      	mov	r2, r3
 8010c96:	460b      	mov	r3, r1
 8010c98:	71fb      	strb	r3, [r7, #7]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d123      	bne.n	8010cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010cae:	88bb      	ldrh	r3, [r7, #4]
 8010cb0:	3303      	adds	r3, #3
 8010cb2:	089b      	lsrs	r3, r3, #2
 8010cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	61bb      	str	r3, [r7, #24]
 8010cba:	e018      	b.n	8010cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010cbc:	79fb      	ldrb	r3, [r7, #7]
 8010cbe:	031a      	lsls	r2, r3, #12
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010cc8:	461a      	mov	r2, r3
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	3301      	adds	r3, #1
 8010cec:	61bb      	str	r3, [r7, #24]
 8010cee:	69ba      	ldr	r2, [r7, #24]
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d3e2      	bcc.n	8010cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3724      	adds	r7, #36	@ 0x24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b08b      	sub	sp, #44	@ 0x2c
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	4613      	mov	r3, r2
 8010d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010d1a:	88fb      	ldrh	r3, [r7, #6]
 8010d1c:	089b      	lsrs	r3, r3, #2
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010d22:	88fb      	ldrh	r3, [r7, #6]
 8010d24:	f003 0303 	and.w	r3, r3, #3
 8010d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	623b      	str	r3, [r7, #32]
 8010d2e:	e014      	b.n	8010d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3e:	3301      	adds	r3, #1
 8010d40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d44:	3301      	adds	r3, #1
 8010d46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d50:	3301      	adds	r3, #1
 8010d52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	3301      	adds	r3, #1
 8010d58:	623b      	str	r3, [r7, #32]
 8010d5a:	6a3a      	ldr	r2, [r7, #32]
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d3e6      	bcc.n	8010d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010d62:	8bfb      	ldrh	r3, [r7, #30]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d01e      	beq.n	8010da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010d72:	461a      	mov	r2, r3
 8010d74:	f107 0310 	add.w	r3, r7, #16
 8010d78:	6812      	ldr	r2, [r2, #0]
 8010d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	6a3b      	ldr	r3, [r7, #32]
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	fa22 f303 	lsr.w	r3, r2, r3
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	3301      	adds	r3, #1
 8010d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d96:	3301      	adds	r3, #1
 8010d98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010d9a:	8bfb      	ldrh	r3, [r7, #30]
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010da0:	8bfb      	ldrh	r3, [r7, #30]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d1ea      	bne.n	8010d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	372c      	adds	r7, #44	@ 0x2c
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	785b      	ldrb	r3, [r3, #1]
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d12c      	bne.n	8010e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	015a      	lsls	r2, r3, #5
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	db12      	blt.n	8010e08 <USB_EPSetStall+0x54>
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00f      	beq.n	8010e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	015a      	lsls	r2, r3, #5
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	4413      	add	r3, r2
 8010df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	0151      	lsls	r1, r2, #5
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	440a      	add	r2, r1
 8010dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	015a      	lsls	r2, r3, #5
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	4413      	add	r3, r2
 8010e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	0151      	lsls	r1, r2, #5
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	440a      	add	r2, r1
 8010e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010e26:	6013      	str	r3, [r2, #0]
 8010e28:	e02b      	b.n	8010e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	015a      	lsls	r2, r3, #5
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	4413      	add	r3, r2
 8010e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	db12      	blt.n	8010e62 <USB_EPSetStall+0xae>
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00f      	beq.n	8010e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	015a      	lsls	r2, r3, #5
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	4413      	add	r3, r2
 8010e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	0151      	lsls	r1, r2, #5
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	440a      	add	r2, r1
 8010e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	015a      	lsls	r2, r3, #5
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	4413      	add	r3, r2
 8010e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68ba      	ldr	r2, [r7, #8]
 8010e72:	0151      	lsls	r1, r2, #5
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	440a      	add	r2, r1
 8010e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3714      	adds	r7, #20
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b085      	sub	sp, #20
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d128      	bne.n	8010efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	015a      	lsls	r2, r3, #5
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	0151      	lsls	r1, r2, #5
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	440a      	add	r2, r1
 8010ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	791b      	ldrb	r3, [r3, #4]
 8010ed0:	2b03      	cmp	r3, #3
 8010ed2:	d003      	beq.n	8010edc <USB_EPClearStall+0x4c>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	791b      	ldrb	r3, [r3, #4]
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d138      	bne.n	8010f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	015a      	lsls	r2, r3, #5
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68ba      	ldr	r2, [r7, #8]
 8010eec:	0151      	lsls	r1, r2, #5
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	440a      	add	r2, r1
 8010ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010efa:	6013      	str	r3, [r2, #0]
 8010efc:	e027      	b.n	8010f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	015a      	lsls	r2, r3, #5
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	4413      	add	r3, r2
 8010f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68ba      	ldr	r2, [r7, #8]
 8010f0e:	0151      	lsls	r1, r2, #5
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	440a      	add	r2, r1
 8010f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	791b      	ldrb	r3, [r3, #4]
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	d003      	beq.n	8010f2e <USB_EPClearStall+0x9e>
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	791b      	ldrb	r3, [r3, #4]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d10f      	bne.n	8010f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	015a      	lsls	r2, r3, #5
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	4413      	add	r3, r2
 8010f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	0151      	lsls	r1, r2, #5
 8010f40:	68fa      	ldr	r2, [r7, #12]
 8010f42:	440a      	add	r2, r1
 8010f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	460b      	mov	r3, r1
 8010f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	78fb      	ldrb	r3, [r7, #3]
 8010f8a:	011b      	lsls	r3, r3, #4
 8010f8c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010f90:	68f9      	ldr	r1, [r7, #12]
 8010f92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f96:	4313      	orrs	r3, r2
 8010f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3714      	adds	r7, #20
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr

08010fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b085      	sub	sp, #20
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010fc2:	f023 0303 	bic.w	r3, r3, #3
 8010fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010fd6:	f023 0302 	bic.w	r3, r3, #2
 8010fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3714      	adds	r7, #20
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010fea:	b480      	push	{r7}
 8010fec:	b085      	sub	sp, #20
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011004:	f023 0303 	bic.w	r3, r3, #3
 8011008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011018:	f043 0302 	orr.w	r3, r3, #2
 801101c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801101e:	2300      	movs	r3, #0
}
 8011020:	4618      	mov	r0, r3
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	699b      	ldr	r3, [r3, #24]
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	4013      	ands	r3, r2
 8011042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011044:	68fb      	ldr	r3, [r7, #12]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3714      	adds	r7, #20
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr

08011052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011052:	b480      	push	{r7}
 8011054:	b085      	sub	sp, #20
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011064:	699b      	ldr	r3, [r3, #24]
 8011066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801106e:	69db      	ldr	r3, [r3, #28]
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	4013      	ands	r3, r2
 8011074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	0c1b      	lsrs	r3, r3, #16
}
 801107a:	4618      	mov	r0, r3
 801107c:	3714      	adds	r7, #20
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011086:	b480      	push	{r7}
 8011088:	b085      	sub	sp, #20
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110a2:	69db      	ldr	r3, [r3, #28]
 80110a4:	68ba      	ldr	r2, [r7, #8]
 80110a6:	4013      	ands	r3, r2
 80110a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	b29b      	uxth	r3, r3
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3714      	adds	r7, #20
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr

080110ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80110ba:	b480      	push	{r7}
 80110bc:	b085      	sub	sp, #20
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	460b      	mov	r3, r1
 80110c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80110ca:	78fb      	ldrb	r3, [r7, #3]
 80110cc:	015a      	lsls	r2, r3, #5
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	4413      	add	r3, r2
 80110d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110e0:	695b      	ldr	r3, [r3, #20]
 80110e2:	68ba      	ldr	r2, [r7, #8]
 80110e4:	4013      	ands	r3, r2
 80110e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80110e8:	68bb      	ldr	r3, [r7, #8]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3714      	adds	r7, #20
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80110f6:	b480      	push	{r7}
 80110f8:	b087      	sub	sp, #28
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
 80110fe:	460b      	mov	r3, r1
 8011100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801111a:	78fb      	ldrb	r3, [r7, #3]
 801111c:	f003 030f 	and.w	r3, r3, #15
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	fa22 f303 	lsr.w	r3, r2, r3
 8011126:	01db      	lsls	r3, r3, #7
 8011128:	b2db      	uxtb	r3, r3
 801112a:	693a      	ldr	r2, [r7, #16]
 801112c:	4313      	orrs	r3, r2
 801112e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011130:	78fb      	ldrb	r3, [r7, #3]
 8011132:	015a      	lsls	r2, r3, #5
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	4413      	add	r3, r2
 8011138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801113c:	689b      	ldr	r3, [r3, #8]
 801113e:	693a      	ldr	r2, [r7, #16]
 8011140:	4013      	ands	r3, r2
 8011142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011144:	68bb      	ldr	r3, [r7, #8]
}
 8011146:	4618      	mov	r0, r3
 8011148:	371c      	adds	r7, #28
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011152:	b480      	push	{r7}
 8011154:	b083      	sub	sp, #12
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	f003 0301 	and.w	r3, r3, #1
}
 8011162:	4618      	mov	r0, r3
 8011164:	370c      	adds	r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
	...

08011170 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801118a:	4619      	mov	r1, r3
 801118c:	4b09      	ldr	r3, [pc, #36]	@ (80111b4 <USB_ActivateSetup+0x44>)
 801118e:	4013      	ands	r3, r2
 8011190:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80111a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80111a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3714      	adds	r7, #20
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr
 80111b4:	fffff800 	.word	0xfffff800

080111b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b087      	sub	sp, #28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	460b      	mov	r3, r1
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	333c      	adds	r3, #60	@ 0x3c
 80111ce:	3304      	adds	r3, #4
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	4a26      	ldr	r2, [pc, #152]	@ (8011270 <USB_EP0_OutStart+0xb8>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d90a      	bls.n	80111f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111ec:	d101      	bne.n	80111f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80111ee:	2300      	movs	r3, #0
 80111f0:	e037      	b.n	8011262 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111f8:	461a      	mov	r2, r3
 80111fa:	2300      	movs	r3, #0
 80111fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	697a      	ldr	r2, [r7, #20]
 8011208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801120c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011218:	691b      	ldr	r3, [r3, #16]
 801121a:	697a      	ldr	r2, [r7, #20]
 801121c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011220:	f043 0318 	orr.w	r3, r3, #24
 8011224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801122c:	691b      	ldr	r3, [r3, #16]
 801122e:	697a      	ldr	r2, [r7, #20]
 8011230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011234:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011238:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801123a:	7afb      	ldrb	r3, [r7, #11]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d10f      	bne.n	8011260 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011246:	461a      	mov	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801125a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801125e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	371c      	adds	r7, #28
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	4f54300a 	.word	0x4f54300a

08011274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801127c:	2300      	movs	r3, #0
 801127e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	3301      	adds	r3, #1
 8011284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801128c:	d901      	bls.n	8011292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801128e:	2303      	movs	r3, #3
 8011290:	e01b      	b.n	80112ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	691b      	ldr	r3, [r3, #16]
 8011296:	2b00      	cmp	r3, #0
 8011298:	daf2      	bge.n	8011280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801129a:	2300      	movs	r3, #0
 801129c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	691b      	ldr	r3, [r3, #16]
 80112a2:	f043 0201 	orr.w	r2, r3, #1
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	3301      	adds	r3, #1
 80112ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80112b6:	d901      	bls.n	80112bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80112b8:	2303      	movs	r3, #3
 80112ba:	e006      	b.n	80112ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	f003 0301 	and.w	r3, r3, #1
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d0f0      	beq.n	80112aa <USB_CoreReset+0x36>

  return HAL_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3714      	adds	r7, #20
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
	...

080112d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80112e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80112e8:	f002 fd12 	bl	8013d10 <USBD_static_malloc>
 80112ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d109      	bne.n	8011308 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	32b0      	adds	r2, #176	@ 0xb0
 80112fe:	2100      	movs	r1, #0
 8011300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011304:	2302      	movs	r3, #2
 8011306:	e0d4      	b.n	80114b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011308:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801130c:	2100      	movs	r1, #0
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f002 fdd6 	bl	8013ec0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	32b0      	adds	r2, #176	@ 0xb0
 801131e:	68f9      	ldr	r1, [r7, #12]
 8011320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	32b0      	adds	r2, #176	@ 0xb0
 801132e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7c1b      	ldrb	r3, [r3, #16]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d138      	bne.n	80113b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011340:	4b5e      	ldr	r3, [pc, #376]	@ (80114bc <USBD_CDC_Init+0x1e4>)
 8011342:	7819      	ldrb	r1, [r3, #0]
 8011344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011348:	2202      	movs	r2, #2
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f002 fbbd 	bl	8013aca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011350:	4b5a      	ldr	r3, [pc, #360]	@ (80114bc <USBD_CDC_Init+0x1e4>)
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	f003 020f 	and.w	r2, r3, #15
 8011358:	6879      	ldr	r1, [r7, #4]
 801135a:	4613      	mov	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4413      	add	r3, r2
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	440b      	add	r3, r1
 8011364:	3324      	adds	r3, #36	@ 0x24
 8011366:	2201      	movs	r2, #1
 8011368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801136a:	4b55      	ldr	r3, [pc, #340]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 801136c:	7819      	ldrb	r1, [r3, #0]
 801136e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011372:	2202      	movs	r2, #2
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f002 fba8 	bl	8013aca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801137a:	4b51      	ldr	r3, [pc, #324]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f003 020f 	and.w	r2, r3, #15
 8011382:	6879      	ldr	r1, [r7, #4]
 8011384:	4613      	mov	r3, r2
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	4413      	add	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	440b      	add	r3, r1
 801138e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011392:	2201      	movs	r2, #1
 8011394:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011396:	4b4b      	ldr	r3, [pc, #300]	@ (80114c4 <USBD_CDC_Init+0x1ec>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	f003 020f 	and.w	r2, r3, #15
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	4613      	mov	r3, r2
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	440b      	add	r3, r1
 80113aa:	3326      	adds	r3, #38	@ 0x26
 80113ac:	2210      	movs	r2, #16
 80113ae:	801a      	strh	r2, [r3, #0]
 80113b0:	e035      	b.n	801141e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80113b2:	4b42      	ldr	r3, [pc, #264]	@ (80114bc <USBD_CDC_Init+0x1e4>)
 80113b4:	7819      	ldrb	r1, [r3, #0]
 80113b6:	2340      	movs	r3, #64	@ 0x40
 80113b8:	2202      	movs	r2, #2
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f002 fb85 	bl	8013aca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80113c0:	4b3e      	ldr	r3, [pc, #248]	@ (80114bc <USBD_CDC_Init+0x1e4>)
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f003 020f 	and.w	r2, r3, #15
 80113c8:	6879      	ldr	r1, [r7, #4]
 80113ca:	4613      	mov	r3, r2
 80113cc:	009b      	lsls	r3, r3, #2
 80113ce:	4413      	add	r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	440b      	add	r3, r1
 80113d4:	3324      	adds	r3, #36	@ 0x24
 80113d6:	2201      	movs	r2, #1
 80113d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80113da:	4b39      	ldr	r3, [pc, #228]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 80113dc:	7819      	ldrb	r1, [r3, #0]
 80113de:	2340      	movs	r3, #64	@ 0x40
 80113e0:	2202      	movs	r2, #2
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f002 fb71 	bl	8013aca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80113e8:	4b35      	ldr	r3, [pc, #212]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	f003 020f 	and.w	r2, r3, #15
 80113f0:	6879      	ldr	r1, [r7, #4]
 80113f2:	4613      	mov	r3, r2
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	4413      	add	r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	440b      	add	r3, r1
 80113fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011400:	2201      	movs	r2, #1
 8011402:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011404:	4b2f      	ldr	r3, [pc, #188]	@ (80114c4 <USBD_CDC_Init+0x1ec>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f003 020f 	and.w	r2, r3, #15
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	4613      	mov	r3, r2
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	4413      	add	r3, r2
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	440b      	add	r3, r1
 8011418:	3326      	adds	r3, #38	@ 0x26
 801141a:	2210      	movs	r2, #16
 801141c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801141e:	4b29      	ldr	r3, [pc, #164]	@ (80114c4 <USBD_CDC_Init+0x1ec>)
 8011420:	7819      	ldrb	r1, [r3, #0]
 8011422:	2308      	movs	r3, #8
 8011424:	2203      	movs	r2, #3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f002 fb4f 	bl	8013aca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801142c:	4b25      	ldr	r3, [pc, #148]	@ (80114c4 <USBD_CDC_Init+0x1ec>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 020f 	and.w	r2, r3, #15
 8011434:	6879      	ldr	r1, [r7, #4]
 8011436:	4613      	mov	r3, r2
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	440b      	add	r3, r1
 8011440:	3324      	adds	r3, #36	@ 0x24
 8011442:	2201      	movs	r2, #1
 8011444:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2200      	movs	r2, #0
 801144a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	33b0      	adds	r3, #176	@ 0xb0
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2200      	movs	r2, #0
 8011466:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2200      	movs	r2, #0
 801146e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011478:	2b00      	cmp	r3, #0
 801147a:	d101      	bne.n	8011480 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801147c:	2302      	movs	r3, #2
 801147e:	e018      	b.n	80114b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7c1b      	ldrb	r3, [r3, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d10a      	bne.n	801149e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011488:	4b0d      	ldr	r3, [pc, #52]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 801148a:	7819      	ldrb	r1, [r3, #0]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f002 fc06 	bl	8013ca8 <USBD_LL_PrepareReceive>
 801149c:	e008      	b.n	80114b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801149e:	4b08      	ldr	r3, [pc, #32]	@ (80114c0 <USBD_CDC_Init+0x1e8>)
 80114a0:	7819      	ldrb	r1, [r3, #0]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80114a8:	2340      	movs	r3, #64	@ 0x40
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f002 fbfc 	bl	8013ca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	24000097 	.word	0x24000097
 80114c0:	24000098 	.word	0x24000098
 80114c4:	24000099 	.word	0x24000099

080114c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	460b      	mov	r3, r1
 80114d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80114d4:	4b3a      	ldr	r3, [pc, #232]	@ (80115c0 <USBD_CDC_DeInit+0xf8>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f002 fb1b 	bl	8013b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80114e0:	4b37      	ldr	r3, [pc, #220]	@ (80115c0 <USBD_CDC_DeInit+0xf8>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	f003 020f 	and.w	r2, r3, #15
 80114e8:	6879      	ldr	r1, [r7, #4]
 80114ea:	4613      	mov	r3, r2
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	4413      	add	r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	440b      	add	r3, r1
 80114f4:	3324      	adds	r3, #36	@ 0x24
 80114f6:	2200      	movs	r2, #0
 80114f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80114fa:	4b32      	ldr	r3, [pc, #200]	@ (80115c4 <USBD_CDC_DeInit+0xfc>)
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	4619      	mov	r1, r3
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f002 fb08 	bl	8013b16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011506:	4b2f      	ldr	r3, [pc, #188]	@ (80115c4 <USBD_CDC_DeInit+0xfc>)
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	f003 020f 	and.w	r2, r3, #15
 801150e:	6879      	ldr	r1, [r7, #4]
 8011510:	4613      	mov	r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4413      	add	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	440b      	add	r3, r1
 801151a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801151e:	2200      	movs	r2, #0
 8011520:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011522:	4b29      	ldr	r3, [pc, #164]	@ (80115c8 <USBD_CDC_DeInit+0x100>)
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	4619      	mov	r1, r3
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f002 faf4 	bl	8013b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801152e:	4b26      	ldr	r3, [pc, #152]	@ (80115c8 <USBD_CDC_DeInit+0x100>)
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	f003 020f 	and.w	r2, r3, #15
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	440b      	add	r3, r1
 8011542:	3324      	adds	r3, #36	@ 0x24
 8011544:	2200      	movs	r2, #0
 8011546:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011548:	4b1f      	ldr	r3, [pc, #124]	@ (80115c8 <USBD_CDC_DeInit+0x100>)
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	f003 020f 	and.w	r2, r3, #15
 8011550:	6879      	ldr	r1, [r7, #4]
 8011552:	4613      	mov	r3, r2
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	4413      	add	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	440b      	add	r3, r1
 801155c:	3326      	adds	r3, #38	@ 0x26
 801155e:	2200      	movs	r2, #0
 8011560:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	32b0      	adds	r2, #176	@ 0xb0
 801156c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d01f      	beq.n	80115b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	33b0      	adds	r3, #176	@ 0xb0
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	32b0      	adds	r2, #176	@ 0xb0
 8011592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011596:	4618      	mov	r0, r3
 8011598:	f002 fbc8 	bl	8013d2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	32b0      	adds	r2, #176	@ 0xb0
 80115a6:	2100      	movs	r1, #0
 80115a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	24000097 	.word	0x24000097
 80115c4:	24000098 	.word	0x24000098
 80115c8:	24000099 	.word	0x24000099

080115cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	32b0      	adds	r2, #176	@ 0xb0
 80115e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80115e6:	2300      	movs	r3, #0
 80115e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80115ea:	2300      	movs	r3, #0
 80115ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80115ee:	2300      	movs	r3, #0
 80115f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80115f8:	2303      	movs	r3, #3
 80115fa:	e0bf      	b.n	801177c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011604:	2b00      	cmp	r3, #0
 8011606:	d050      	beq.n	80116aa <USBD_CDC_Setup+0xde>
 8011608:	2b20      	cmp	r3, #32
 801160a:	f040 80af 	bne.w	801176c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	88db      	ldrh	r3, [r3, #6]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d03a      	beq.n	801168c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	b25b      	sxtb	r3, r3
 801161c:	2b00      	cmp	r3, #0
 801161e:	da1b      	bge.n	8011658 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	33b0      	adds	r3, #176	@ 0xb0
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	683a      	ldr	r2, [r7, #0]
 8011634:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011636:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011638:	683a      	ldr	r2, [r7, #0]
 801163a:	88d2      	ldrh	r2, [r2, #6]
 801163c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	88db      	ldrh	r3, [r3, #6]
 8011642:	2b07      	cmp	r3, #7
 8011644:	bf28      	it	cs
 8011646:	2307      	movcs	r3, #7
 8011648:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	89fa      	ldrh	r2, [r7, #14]
 801164e:	4619      	mov	r1, r3
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f001 fdbd 	bl	80131d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011656:	e090      	b.n	801177a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	785a      	ldrb	r2, [r3, #1]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	88db      	ldrh	r3, [r3, #6]
 8011666:	2b3f      	cmp	r3, #63	@ 0x3f
 8011668:	d803      	bhi.n	8011672 <USBD_CDC_Setup+0xa6>
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	88db      	ldrh	r3, [r3, #6]
 801166e:	b2da      	uxtb	r2, r3
 8011670:	e000      	b.n	8011674 <USBD_CDC_Setup+0xa8>
 8011672:	2240      	movs	r2, #64	@ 0x40
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801167a:	6939      	ldr	r1, [r7, #16]
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011682:	461a      	mov	r2, r3
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 fdcf 	bl	8013228 <USBD_CtlPrepareRx>
      break;
 801168a:	e076      	b.n	801177a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	33b0      	adds	r3, #176	@ 0xb0
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4413      	add	r3, r2
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	7850      	ldrb	r0, [r2, #1]
 80116a2:	2200      	movs	r2, #0
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	4798      	blx	r3
      break;
 80116a8:	e067      	b.n	801177a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	785b      	ldrb	r3, [r3, #1]
 80116ae:	2b0b      	cmp	r3, #11
 80116b0:	d851      	bhi.n	8011756 <USBD_CDC_Setup+0x18a>
 80116b2:	a201      	add	r2, pc, #4	@ (adr r2, 80116b8 <USBD_CDC_Setup+0xec>)
 80116b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b8:	080116e9 	.word	0x080116e9
 80116bc:	08011765 	.word	0x08011765
 80116c0:	08011757 	.word	0x08011757
 80116c4:	08011757 	.word	0x08011757
 80116c8:	08011757 	.word	0x08011757
 80116cc:	08011757 	.word	0x08011757
 80116d0:	08011757 	.word	0x08011757
 80116d4:	08011757 	.word	0x08011757
 80116d8:	08011757 	.word	0x08011757
 80116dc:	08011757 	.word	0x08011757
 80116e0:	08011713 	.word	0x08011713
 80116e4:	0801173d 	.word	0x0801173d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	d107      	bne.n	8011704 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80116f4:	f107 030a 	add.w	r3, r7, #10
 80116f8:	2202      	movs	r2, #2
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f001 fd67 	bl	80131d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011702:	e032      	b.n	801176a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011704:	6839      	ldr	r1, [r7, #0]
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f001 fce5 	bl	80130d6 <USBD_CtlError>
            ret = USBD_FAIL;
 801170c:	2303      	movs	r3, #3
 801170e:	75fb      	strb	r3, [r7, #23]
          break;
 8011710:	e02b      	b.n	801176a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011718:	b2db      	uxtb	r3, r3
 801171a:	2b03      	cmp	r3, #3
 801171c:	d107      	bne.n	801172e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801171e:	f107 030d 	add.w	r3, r7, #13
 8011722:	2201      	movs	r2, #1
 8011724:	4619      	mov	r1, r3
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f001 fd52 	bl	80131d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801172c:	e01d      	b.n	801176a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f001 fcd0 	bl	80130d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8011736:	2303      	movs	r3, #3
 8011738:	75fb      	strb	r3, [r7, #23]
          break;
 801173a:	e016      	b.n	801176a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b03      	cmp	r3, #3
 8011746:	d00f      	beq.n	8011768 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011748:	6839      	ldr	r1, [r7, #0]
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f001 fcc3 	bl	80130d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8011750:	2303      	movs	r3, #3
 8011752:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011754:	e008      	b.n	8011768 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011756:	6839      	ldr	r1, [r7, #0]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f001 fcbc 	bl	80130d6 <USBD_CtlError>
          ret = USBD_FAIL;
 801175e:	2303      	movs	r3, #3
 8011760:	75fb      	strb	r3, [r7, #23]
          break;
 8011762:	e002      	b.n	801176a <USBD_CDC_Setup+0x19e>
          break;
 8011764:	bf00      	nop
 8011766:	e008      	b.n	801177a <USBD_CDC_Setup+0x1ae>
          break;
 8011768:	bf00      	nop
      }
      break;
 801176a:	e006      	b.n	801177a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801176c:	6839      	ldr	r1, [r7, #0]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f001 fcb1 	bl	80130d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8011774:	2303      	movs	r3, #3
 8011776:	75fb      	strb	r3, [r7, #23]
      break;
 8011778:	bf00      	nop
  }

  return (uint8_t)ret;
 801177a:	7dfb      	ldrb	r3, [r7, #23]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3718      	adds	r7, #24
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011796:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	32b0      	adds	r2, #176	@ 0xb0
 80117a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e065      	b.n	801187a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	32b0      	adds	r2, #176	@ 0xb0
 80117b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80117be:	78fb      	ldrb	r3, [r7, #3]
 80117c0:	f003 020f 	and.w	r2, r3, #15
 80117c4:	6879      	ldr	r1, [r7, #4]
 80117c6:	4613      	mov	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	440b      	add	r3, r1
 80117d0:	3318      	adds	r3, #24
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d02f      	beq.n	8011838 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	f003 020f 	and.w	r2, r3, #15
 80117de:	6879      	ldr	r1, [r7, #4]
 80117e0:	4613      	mov	r3, r2
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	4413      	add	r3, r2
 80117e6:	009b      	lsls	r3, r3, #2
 80117e8:	440b      	add	r3, r1
 80117ea:	3318      	adds	r3, #24
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	78fb      	ldrb	r3, [r7, #3]
 80117f0:	f003 010f 	and.w	r1, r3, #15
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	460b      	mov	r3, r1
 80117f8:	00db      	lsls	r3, r3, #3
 80117fa:	440b      	add	r3, r1
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4403      	add	r3, r0
 8011800:	331c      	adds	r3, #28
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	fbb2 f1f3 	udiv	r1, r2, r3
 8011808:	fb01 f303 	mul.w	r3, r1, r3
 801180c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801180e:	2b00      	cmp	r3, #0
 8011810:	d112      	bne.n	8011838 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011812:	78fb      	ldrb	r3, [r7, #3]
 8011814:	f003 020f 	and.w	r2, r3, #15
 8011818:	6879      	ldr	r1, [r7, #4]
 801181a:	4613      	mov	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4413      	add	r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	440b      	add	r3, r1
 8011824:	3318      	adds	r3, #24
 8011826:	2200      	movs	r2, #0
 8011828:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801182a:	78f9      	ldrb	r1, [r7, #3]
 801182c:	2300      	movs	r3, #0
 801182e:	2200      	movs	r2, #0
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f002 fa18 	bl	8013c66 <USBD_LL_Transmit>
 8011836:	e01f      	b.n	8011878 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	2200      	movs	r2, #0
 801183c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	33b0      	adds	r3, #176	@ 0xb0
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	4413      	add	r3, r2
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	691b      	ldr	r3, [r3, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d010      	beq.n	8011878 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	33b0      	adds	r3, #176	@ 0xb0
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	4413      	add	r3, r2
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	691b      	ldr	r3, [r3, #16]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011874:	78fa      	ldrb	r2, [r7, #3]
 8011876:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b084      	sub	sp, #16
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	32b0      	adds	r2, #176	@ 0xb0
 8011898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801189c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	32b0      	adds	r2, #176	@ 0xb0
 80118a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80118b0:	2303      	movs	r3, #3
 80118b2:	e01a      	b.n	80118ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80118b4:	78fb      	ldrb	r3, [r7, #3]
 80118b6:	4619      	mov	r1, r3
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f002 fa16 	bl	8013cea <USBD_LL_GetRxDataSize>
 80118be:	4602      	mov	r2, r0
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	33b0      	adds	r3, #176	@ 0xb0
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4413      	add	r3, r2
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	68fa      	ldr	r2, [r7, #12]
 80118da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80118e4:	4611      	mov	r1, r2
 80118e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80118e8:	2300      	movs	r3, #0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b084      	sub	sp, #16
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	32b0      	adds	r2, #176	@ 0xb0
 8011904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011910:	2303      	movs	r3, #3
 8011912:	e024      	b.n	801195e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	33b0      	adds	r3, #176	@ 0xb0
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	4413      	add	r3, r2
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d019      	beq.n	801195c <USBD_CDC_EP0_RxReady+0x6a>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801192e:	2bff      	cmp	r3, #255	@ 0xff
 8011930:	d014      	beq.n	801195c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	33b0      	adds	r3, #176	@ 0xb0
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801194a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801194c:	68fa      	ldr	r2, [r7, #12]
 801194e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011952:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	22ff      	movs	r2, #255	@ 0xff
 8011958:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801195c:	2300      	movs	r3, #0
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
	...

08011968 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011970:	2182      	movs	r1, #130	@ 0x82
 8011972:	4818      	ldr	r0, [pc, #96]	@ (80119d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011974:	f000 fd4f 	bl	8012416 <USBD_GetEpDesc>
 8011978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801197a:	2101      	movs	r1, #1
 801197c:	4815      	ldr	r0, [pc, #84]	@ (80119d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801197e:	f000 fd4a 	bl	8012416 <USBD_GetEpDesc>
 8011982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011984:	2181      	movs	r1, #129	@ 0x81
 8011986:	4813      	ldr	r0, [pc, #76]	@ (80119d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011988:	f000 fd45 	bl	8012416 <USBD_GetEpDesc>
 801198c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	2210      	movs	r2, #16
 8011998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d006      	beq.n	80119ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119a8:	711a      	strb	r2, [r3, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d006      	beq.n	80119c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119bc:	711a      	strb	r2, [r3, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2243      	movs	r2, #67	@ 0x43
 80119c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80119c8:	4b02      	ldr	r3, [pc, #8]	@ (80119d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3718      	adds	r7, #24
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	24000054 	.word	0x24000054

080119d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b086      	sub	sp, #24
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80119e0:	2182      	movs	r1, #130	@ 0x82
 80119e2:	4818      	ldr	r0, [pc, #96]	@ (8011a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80119e4:	f000 fd17 	bl	8012416 <USBD_GetEpDesc>
 80119e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80119ea:	2101      	movs	r1, #1
 80119ec:	4815      	ldr	r0, [pc, #84]	@ (8011a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80119ee:	f000 fd12 	bl	8012416 <USBD_GetEpDesc>
 80119f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80119f4:	2181      	movs	r1, #129	@ 0x81
 80119f6:	4813      	ldr	r0, [pc, #76]	@ (8011a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80119f8:	f000 fd0d 	bl	8012416 <USBD_GetEpDesc>
 80119fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	2210      	movs	r2, #16
 8011a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d006      	beq.n	8011a1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	2200      	movs	r2, #0
 8011a14:	711a      	strb	r2, [r3, #4]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f042 0202 	orr.w	r2, r2, #2
 8011a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d006      	beq.n	8011a32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2200      	movs	r2, #0
 8011a28:	711a      	strb	r2, [r3, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f042 0202 	orr.w	r2, r2, #2
 8011a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2243      	movs	r2, #67	@ 0x43
 8011a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011a38:	4b02      	ldr	r3, [pc, #8]	@ (8011a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3718      	adds	r7, #24
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	24000054 	.word	0x24000054

08011a48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011a50:	2182      	movs	r1, #130	@ 0x82
 8011a52:	4818      	ldr	r0, [pc, #96]	@ (8011ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011a54:	f000 fcdf 	bl	8012416 <USBD_GetEpDesc>
 8011a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011a5a:	2101      	movs	r1, #1
 8011a5c:	4815      	ldr	r0, [pc, #84]	@ (8011ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011a5e:	f000 fcda 	bl	8012416 <USBD_GetEpDesc>
 8011a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011a64:	2181      	movs	r1, #129	@ 0x81
 8011a66:	4813      	ldr	r0, [pc, #76]	@ (8011ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011a68:	f000 fcd5 	bl	8012416 <USBD_GetEpDesc>
 8011a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	2210      	movs	r2, #16
 8011a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d006      	beq.n	8011a8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	2200      	movs	r2, #0
 8011a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a88:	711a      	strb	r2, [r3, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d006      	beq.n	8011aa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2200      	movs	r2, #0
 8011a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a9c:	711a      	strb	r2, [r3, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2243      	movs	r2, #67	@ 0x43
 8011aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011aa8:	4b02      	ldr	r3, [pc, #8]	@ (8011ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3718      	adds	r7, #24
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	24000054 	.word	0x24000054

08011ab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	220a      	movs	r2, #10
 8011ac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011ac6:	4b03      	ldr	r3, [pc, #12]	@ (8011ad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr
 8011ad4:	24000010 	.word	0x24000010

08011ad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ae8:	2303      	movs	r3, #3
 8011aea:	e009      	b.n	8011b00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	33b0      	adds	r3, #176	@ 0xb0
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	4413      	add	r3, r2
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b087      	sub	sp, #28
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	32b0      	adds	r2, #176	@ 0xb0
 8011b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d101      	bne.n	8011b32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011b2e:	2303      	movs	r3, #3
 8011b30:	e008      	b.n	8011b44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	687a      	ldr	r2, [r7, #4]
 8011b3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	371c      	adds	r7, #28
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b085      	sub	sp, #20
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	32b0      	adds	r2, #176	@ 0xb0
 8011b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011b70:	2303      	movs	r3, #3
 8011b72:	e004      	b.n	8011b7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	683a      	ldr	r2, [r7, #0]
 8011b78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3714      	adds	r7, #20
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
	...

08011b8c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	32b0      	adds	r2, #176	@ 0xb0
 8011b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ba2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d101      	bne.n	8011bb2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	e025      	b.n	8011bfe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d11f      	bne.n	8011bfc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011bc4:	4b10      	ldr	r3, [pc, #64]	@ (8011c08 <USBD_CDC_TransmitPacket+0x7c>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	f003 020f 	and.w	r2, r3, #15
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	4403      	add	r3, r0
 8011bde:	3318      	adds	r3, #24
 8011be0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011be2:	4b09      	ldr	r3, [pc, #36]	@ (8011c08 <USBD_CDC_TransmitPacket+0x7c>)
 8011be4:	7819      	ldrb	r1, [r3, #0]
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f002 f837 	bl	8013c66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	24000097 	.word	0x24000097

08011c0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	32b0      	adds	r2, #176	@ 0xb0
 8011c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	32b0      	adds	r2, #176	@ 0xb0
 8011c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d101      	bne.n	8011c3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011c36:	2303      	movs	r3, #3
 8011c38:	e018      	b.n	8011c6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	7c1b      	ldrb	r3, [r3, #16]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10a      	bne.n	8011c58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c42:	4b0c      	ldr	r3, [pc, #48]	@ (8011c74 <USBD_CDC_ReceivePacket+0x68>)
 8011c44:	7819      	ldrb	r1, [r3, #0]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f002 f829 	bl	8013ca8 <USBD_LL_PrepareReceive>
 8011c56:	e008      	b.n	8011c6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c58:	4b06      	ldr	r3, [pc, #24]	@ (8011c74 <USBD_CDC_ReceivePacket+0x68>)
 8011c5a:	7819      	ldrb	r1, [r3, #0]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c62:	2340      	movs	r3, #64	@ 0x40
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f002 f81f 	bl	8013ca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	24000098 	.word	0x24000098

08011c78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b086      	sub	sp, #24
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	4613      	mov	r3, r2
 8011c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d101      	bne.n	8011c90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011c8c:	2303      	movs	r3, #3
 8011c8e:	e01f      	b.n	8011cd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2200      	movs	r2, #0
 8011c94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d003      	beq.n	8011cb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	79fa      	ldrb	r2, [r7, #7]
 8011cc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f001 fe93 	bl	80139f0 <USBD_LL_Init>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011cec:	2303      	movs	r3, #3
 8011cee:	e025      	b.n	8011d3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	683a      	ldr	r2, [r7, #0]
 8011cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	32ae      	adds	r2, #174	@ 0xae
 8011d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00f      	beq.n	8011d2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	32ae      	adds	r2, #174	@ 0xae
 8011d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d1c:	f107 020e 	add.w	r2, r7, #14
 8011d20:	4610      	mov	r0, r2
 8011d22:	4798      	blx	r3
 8011d24:	4602      	mov	r2, r0
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011d3a:	2300      	movs	r3, #0
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f001 fea1 	bl	8013a94 <USBD_LL_Start>
 8011d52:	4603      	mov	r3, r0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	370c      	adds	r7, #12
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr

08011d72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b084      	sub	sp, #16
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d009      	beq.n	8011da0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	78fa      	ldrb	r2, [r7, #3]
 8011d96:	4611      	mov	r1, r2
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	4798      	blx	r3
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b084      	sub	sp, #16
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	460b      	mov	r3, r1
 8011db4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	78fa      	ldrb	r2, [r7, #3]
 8011dc4:	4611      	mov	r1, r2
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	4798      	blx	r3
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011dd0:	2303      	movs	r3, #3
 8011dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011dde:	b580      	push	{r7, lr}
 8011de0:	b084      	sub	sp, #16
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f001 f936 	bl	8013062 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011e04:	461a      	mov	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011e12:	f003 031f 	and.w	r3, r3, #31
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d01a      	beq.n	8011e50 <USBD_LL_SetupStage+0x72>
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	d822      	bhi.n	8011e64 <USBD_LL_SetupStage+0x86>
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d002      	beq.n	8011e28 <USBD_LL_SetupStage+0x4a>
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d00a      	beq.n	8011e3c <USBD_LL_SetupStage+0x5e>
 8011e26:	e01d      	b.n	8011e64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011e2e:	4619      	mov	r1, r3
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fb63 	bl	80124fc <USBD_StdDevReq>
 8011e36:	4603      	mov	r3, r0
 8011e38:	73fb      	strb	r3, [r7, #15]
      break;
 8011e3a:	e020      	b.n	8011e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011e42:	4619      	mov	r1, r3
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f000 fbcb 	bl	80125e0 <USBD_StdItfReq>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8011e4e:	e016      	b.n	8011e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011e56:	4619      	mov	r1, r3
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f000 fc2d 	bl	80126b8 <USBD_StdEPReq>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	73fb      	strb	r3, [r7, #15]
      break;
 8011e62:	e00c      	b.n	8011e7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011e6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	4619      	mov	r1, r3
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f001 fe6e 	bl	8013b54 <USBD_LL_StallEP>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8011e7c:	bf00      	nop
  }

  return ret;
 8011e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3710      	adds	r7, #16
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	460b      	mov	r3, r1
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011e9a:	7afb      	ldrb	r3, [r7, #11]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d16e      	bne.n	8011f7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011ea6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011eae:	2b03      	cmp	r3, #3
 8011eb0:	f040 8098 	bne.w	8011fe4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	689a      	ldr	r2, [r3, #8]
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d913      	bls.n	8011ee8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	689a      	ldr	r2, [r3, #8]
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	1ad2      	subs	r2, r2, r3
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	68da      	ldr	r2, [r3, #12]
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	bf28      	it	cs
 8011eda:	4613      	movcs	r3, r2
 8011edc:	461a      	mov	r2, r3
 8011ede:	6879      	ldr	r1, [r7, #4]
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f001 f9be 	bl	8013262 <USBD_CtlContinueRx>
 8011ee6:	e07d      	b.n	8011fe4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011eee:	f003 031f 	and.w	r3, r3, #31
 8011ef2:	2b02      	cmp	r3, #2
 8011ef4:	d014      	beq.n	8011f20 <USBD_LL_DataOutStage+0x98>
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d81d      	bhi.n	8011f36 <USBD_LL_DataOutStage+0xae>
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d002      	beq.n	8011f04 <USBD_LL_DataOutStage+0x7c>
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d003      	beq.n	8011f0a <USBD_LL_DataOutStage+0x82>
 8011f02:	e018      	b.n	8011f36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	75bb      	strb	r3, [r7, #22]
            break;
 8011f08:	e018      	b.n	8011f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	4619      	mov	r1, r3
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f000 fa64 	bl	80123e2 <USBD_CoreFindIF>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	75bb      	strb	r3, [r7, #22]
            break;
 8011f1e:	e00d      	b.n	8011f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	4619      	mov	r1, r3
 8011f2a:	68f8      	ldr	r0, [r7, #12]
 8011f2c:	f000 fa66 	bl	80123fc <USBD_CoreFindEP>
 8011f30:	4603      	mov	r3, r0
 8011f32:	75bb      	strb	r3, [r7, #22]
            break;
 8011f34:	e002      	b.n	8011f3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011f36:	2300      	movs	r3, #0
 8011f38:	75bb      	strb	r3, [r7, #22]
            break;
 8011f3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011f3c:	7dbb      	ldrb	r3, [r7, #22]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d119      	bne.n	8011f76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f48:	b2db      	uxtb	r3, r3
 8011f4a:	2b03      	cmp	r3, #3
 8011f4c:	d113      	bne.n	8011f76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011f4e:	7dba      	ldrb	r2, [r7, #22]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	32ae      	adds	r2, #174	@ 0xae
 8011f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f58:	691b      	ldr	r3, [r3, #16]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00b      	beq.n	8011f76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011f5e:	7dba      	ldrb	r2, [r7, #22]
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011f66:	7dba      	ldrb	r2, [r7, #22]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	32ae      	adds	r2, #174	@ 0xae
 8011f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f70:	691b      	ldr	r3, [r3, #16]
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f001 f984 	bl	8013284 <USBD_CtlSendStatus>
 8011f7c:	e032      	b.n	8011fe4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011f7e:	7afb      	ldrb	r3, [r7, #11]
 8011f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	4619      	mov	r1, r3
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f000 fa37 	bl	80123fc <USBD_CoreFindEP>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f92:	7dbb      	ldrb	r3, [r7, #22]
 8011f94:	2bff      	cmp	r3, #255	@ 0xff
 8011f96:	d025      	beq.n	8011fe4 <USBD_LL_DataOutStage+0x15c>
 8011f98:	7dbb      	ldrb	r3, [r7, #22]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d122      	bne.n	8011fe4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	d117      	bne.n	8011fda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011faa:	7dba      	ldrb	r2, [r7, #22]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	32ae      	adds	r2, #174	@ 0xae
 8011fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fb4:	699b      	ldr	r3, [r3, #24]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00f      	beq.n	8011fda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011fba:	7dba      	ldrb	r2, [r7, #22]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011fc2:	7dba      	ldrb	r2, [r7, #22]
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	32ae      	adds	r2, #174	@ 0xae
 8011fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fcc:	699b      	ldr	r3, [r3, #24]
 8011fce:	7afa      	ldrb	r2, [r7, #11]
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	68f8      	ldr	r0, [r7, #12]
 8011fd4:	4798      	blx	r3
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011fda:	7dfb      	ldrb	r3, [r7, #23]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d001      	beq.n	8011fe4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	e000      	b.n	8011fe6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b086      	sub	sp, #24
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	60f8      	str	r0, [r7, #12]
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	607a      	str	r2, [r7, #4]
 8011ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011ffc:	7afb      	ldrb	r3, [r7, #11]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d16f      	bne.n	80120e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3314      	adds	r3, #20
 8012006:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801200e:	2b02      	cmp	r3, #2
 8012010:	d15a      	bne.n	80120c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	689a      	ldr	r2, [r3, #8]
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	429a      	cmp	r2, r3
 801201c:	d914      	bls.n	8012048 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	689a      	ldr	r2, [r3, #8]
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	1ad2      	subs	r2, r2, r3
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	461a      	mov	r2, r3
 8012032:	6879      	ldr	r1, [r7, #4]
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f001 f8e6 	bl	8013206 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801203a:	2300      	movs	r3, #0
 801203c:	2200      	movs	r2, #0
 801203e:	2100      	movs	r1, #0
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f001 fe31 	bl	8013ca8 <USBD_LL_PrepareReceive>
 8012046:	e03f      	b.n	80120c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	68da      	ldr	r2, [r3, #12]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	429a      	cmp	r2, r3
 8012052:	d11c      	bne.n	801208e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	685a      	ldr	r2, [r3, #4]
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801205c:	429a      	cmp	r2, r3
 801205e:	d316      	bcc.n	801208e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801206a:	429a      	cmp	r2, r3
 801206c:	d20f      	bcs.n	801208e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801206e:	2200      	movs	r2, #0
 8012070:	2100      	movs	r1, #0
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f001 f8c7 	bl	8013206 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2200      	movs	r2, #0
 801207c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012080:	2300      	movs	r3, #0
 8012082:	2200      	movs	r2, #0
 8012084:	2100      	movs	r1, #0
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f001 fe0e 	bl	8013ca8 <USBD_LL_PrepareReceive>
 801208c:	e01c      	b.n	80120c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012094:	b2db      	uxtb	r3, r3
 8012096:	2b03      	cmp	r3, #3
 8012098:	d10f      	bne.n	80120ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d009      	beq.n	80120ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80120ba:	2180      	movs	r1, #128	@ 0x80
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f001 fd49 	bl	8013b54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f001 f8f1 	bl	80132aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d03a      	beq.n	8012148 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f7ff fe42 	bl	8011d5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80120e0:	e032      	b.n	8012148 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80120e2:	7afb      	ldrb	r3, [r7, #11]
 80120e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	4619      	mov	r1, r3
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 f985 	bl	80123fc <USBD_CoreFindEP>
 80120f2:	4603      	mov	r3, r0
 80120f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80120f6:	7dfb      	ldrb	r3, [r7, #23]
 80120f8:	2bff      	cmp	r3, #255	@ 0xff
 80120fa:	d025      	beq.n	8012148 <USBD_LL_DataInStage+0x15a>
 80120fc:	7dfb      	ldrb	r3, [r7, #23]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d122      	bne.n	8012148 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b03      	cmp	r3, #3
 801210c:	d11c      	bne.n	8012148 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801210e:	7dfa      	ldrb	r2, [r7, #23]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	32ae      	adds	r2, #174	@ 0xae
 8012114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012118:	695b      	ldr	r3, [r3, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d014      	beq.n	8012148 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801211e:	7dfa      	ldrb	r2, [r7, #23]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012126:	7dfa      	ldrb	r2, [r7, #23]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	32ae      	adds	r2, #174	@ 0xae
 801212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012130:	695b      	ldr	r3, [r3, #20]
 8012132:	7afa      	ldrb	r2, [r7, #11]
 8012134:	4611      	mov	r1, r2
 8012136:	68f8      	ldr	r0, [r7, #12]
 8012138:	4798      	blx	r3
 801213a:	4603      	mov	r3, r0
 801213c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801213e:	7dbb      	ldrb	r3, [r7, #22]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012144:	7dbb      	ldrb	r3, [r7, #22]
 8012146:	e000      	b.n	801214a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3718      	adds	r7, #24
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b084      	sub	sp, #16
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801215a:	2300      	movs	r3, #0
 801215c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2201      	movs	r2, #1
 8012162:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801218a:	2b00      	cmp	r3, #0
 801218c:	d014      	beq.n	80121b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00e      	beq.n	80121b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	6852      	ldr	r2, [r2, #4]
 80121a6:	b2d2      	uxtb	r2, r2
 80121a8:	4611      	mov	r1, r2
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	4798      	blx	r3
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80121b4:	2303      	movs	r3, #3
 80121b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80121b8:	2340      	movs	r3, #64	@ 0x40
 80121ba:	2200      	movs	r2, #0
 80121bc:	2100      	movs	r1, #0
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f001 fc83 	bl	8013aca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2201      	movs	r2, #1
 80121c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2240      	movs	r2, #64	@ 0x40
 80121d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80121d4:	2340      	movs	r3, #64	@ 0x40
 80121d6:	2200      	movs	r2, #0
 80121d8:	2180      	movs	r1, #128	@ 0x80
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f001 fc75 	bl	8013aca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2201      	movs	r2, #1
 80121e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2240      	movs	r2, #64	@ 0x40
 80121ea:	621a      	str	r2, [r3, #32]

  return ret;
 80121ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80121f6:	b480      	push	{r7}
 80121f8:	b083      	sub	sp, #12
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
 80121fe:	460b      	mov	r3, r1
 8012200:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	78fa      	ldrb	r2, [r7, #3]
 8012206:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012208:	2300      	movs	r3, #0
}
 801220a:	4618      	mov	r0, r3
 801220c:	370c      	adds	r7, #12
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr

08012216 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012216:	b480      	push	{r7}
 8012218:	b083      	sub	sp, #12
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b04      	cmp	r3, #4
 8012228:	d006      	beq.n	8012238 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012230:	b2da      	uxtb	r2, r3
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2204      	movs	r2, #4
 801223c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	370c      	adds	r7, #12
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr

0801224e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801224e:	b480      	push	{r7}
 8012250:	b083      	sub	sp, #12
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801225c:	b2db      	uxtb	r3, r3
 801225e:	2b04      	cmp	r3, #4
 8012260:	d106      	bne.n	8012270 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012268:	b2da      	uxtb	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	370c      	adds	r7, #12
 8012276:	46bd      	mov	sp, r7
 8012278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227c:	4770      	bx	lr

0801227e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b082      	sub	sp, #8
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801228c:	b2db      	uxtb	r3, r3
 801228e:	2b03      	cmp	r3, #3
 8012290:	d110      	bne.n	80122b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00b      	beq.n	80122b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122a2:	69db      	ldr	r3, [r3, #28]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d005      	beq.n	80122b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80122b4:	2300      	movs	r3, #0
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b082      	sub	sp, #8
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	460b      	mov	r3, r1
 80122c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	32ae      	adds	r2, #174	@ 0xae
 80122d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d101      	bne.n	80122e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80122dc:	2303      	movs	r3, #3
 80122de:	e01c      	b.n	801231a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	d115      	bne.n	8012318 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	32ae      	adds	r2, #174	@ 0xae
 80122f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122fa:	6a1b      	ldr	r3, [r3, #32]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00b      	beq.n	8012318 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	32ae      	adds	r2, #174	@ 0xae
 801230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801230e:	6a1b      	ldr	r3, [r3, #32]
 8012310:	78fa      	ldrb	r2, [r7, #3]
 8012312:	4611      	mov	r1, r2
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}

08012322 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012322:	b580      	push	{r7, lr}
 8012324:	b082      	sub	sp, #8
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	460b      	mov	r3, r1
 801232c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	32ae      	adds	r2, #174	@ 0xae
 8012338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d101      	bne.n	8012344 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012340:	2303      	movs	r3, #3
 8012342:	e01c      	b.n	801237e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801234a:	b2db      	uxtb	r3, r3
 801234c:	2b03      	cmp	r3, #3
 801234e:	d115      	bne.n	801237c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	32ae      	adds	r2, #174	@ 0xae
 801235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00b      	beq.n	801237c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	32ae      	adds	r2, #174	@ 0xae
 801236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012374:	78fa      	ldrb	r2, [r7, #3]
 8012376:	4611      	mov	r1, r2
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801237c:	2300      	movs	r3, #0
}
 801237e:	4618      	mov	r0, r3
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012386:	b480      	push	{r7}
 8012388:	b083      	sub	sp, #12
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80123a4:	2300      	movs	r3, #0
 80123a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00e      	beq.n	80123d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	6852      	ldr	r2, [r2, #4]
 80123c6:	b2d2      	uxtb	r2, r2
 80123c8:	4611      	mov	r1, r2
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	4798      	blx	r3
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80123d4:	2303      	movs	r3, #3
 80123d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80123e2:	b480      	push	{r7}
 80123e4:	b083      	sub	sp, #12
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	460b      	mov	r3, r1
 80123ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80123ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	370c      	adds	r7, #12
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr

080123fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	460b      	mov	r3, r1
 8012406:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012408:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801240a:	4618      	mov	r0, r3
 801240c:	370c      	adds	r7, #12
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr

08012416 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b086      	sub	sp, #24
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
 801241e:	460b      	mov	r3, r1
 8012420:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801242a:	2300      	movs	r3, #0
 801242c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	885b      	ldrh	r3, [r3, #2]
 8012432:	b29b      	uxth	r3, r3
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	7812      	ldrb	r2, [r2, #0]
 8012438:	4293      	cmp	r3, r2
 801243a:	d91f      	bls.n	801247c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012442:	e013      	b.n	801246c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012444:	f107 030a 	add.w	r3, r7, #10
 8012448:	4619      	mov	r1, r3
 801244a:	6978      	ldr	r0, [r7, #20]
 801244c:	f000 f81b 	bl	8012486 <USBD_GetNextDesc>
 8012450:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	785b      	ldrb	r3, [r3, #1]
 8012456:	2b05      	cmp	r3, #5
 8012458:	d108      	bne.n	801246c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	789b      	ldrb	r3, [r3, #2]
 8012462:	78fa      	ldrb	r2, [r7, #3]
 8012464:	429a      	cmp	r2, r3
 8012466:	d008      	beq.n	801247a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012468:	2300      	movs	r3, #0
 801246a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	885b      	ldrh	r3, [r3, #2]
 8012470:	b29a      	uxth	r2, r3
 8012472:	897b      	ldrh	r3, [r7, #10]
 8012474:	429a      	cmp	r2, r3
 8012476:	d8e5      	bhi.n	8012444 <USBD_GetEpDesc+0x2e>
 8012478:	e000      	b.n	801247c <USBD_GetEpDesc+0x66>
          break;
 801247a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801247c:	693b      	ldr	r3, [r7, #16]
}
 801247e:	4618      	mov	r0, r3
 8012480:	3718      	adds	r7, #24
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}

08012486 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012486:	b480      	push	{r7}
 8012488:	b085      	sub	sp, #20
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
 801248e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	7812      	ldrb	r2, [r2, #0]
 801249c:	4413      	add	r3, r2
 801249e:	b29a      	uxth	r2, r3
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	461a      	mov	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4413      	add	r3, r2
 80124ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80124b0:	68fb      	ldr	r3, [r7, #12]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3714      	adds	r7, #20
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80124be:	b480      	push	{r7}
 80124c0:	b087      	sub	sp, #28
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	3301      	adds	r3, #1
 80124d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80124dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80124e0:	021b      	lsls	r3, r3, #8
 80124e2:	b21a      	sxth	r2, r3
 80124e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	b21b      	sxth	r3, r3
 80124ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80124ee:	89fb      	ldrh	r3, [r7, #14]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	371c      	adds	r7, #28
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012512:	2b40      	cmp	r3, #64	@ 0x40
 8012514:	d005      	beq.n	8012522 <USBD_StdDevReq+0x26>
 8012516:	2b40      	cmp	r3, #64	@ 0x40
 8012518:	d857      	bhi.n	80125ca <USBD_StdDevReq+0xce>
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00f      	beq.n	801253e <USBD_StdDevReq+0x42>
 801251e:	2b20      	cmp	r3, #32
 8012520:	d153      	bne.n	80125ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	32ae      	adds	r2, #174	@ 0xae
 801252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012530:	689b      	ldr	r3, [r3, #8]
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	4798      	blx	r3
 8012538:	4603      	mov	r3, r0
 801253a:	73fb      	strb	r3, [r7, #15]
      break;
 801253c:	e04a      	b.n	80125d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	785b      	ldrb	r3, [r3, #1]
 8012542:	2b09      	cmp	r3, #9
 8012544:	d83b      	bhi.n	80125be <USBD_StdDevReq+0xc2>
 8012546:	a201      	add	r2, pc, #4	@ (adr r2, 801254c <USBD_StdDevReq+0x50>)
 8012548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801254c:	080125a1 	.word	0x080125a1
 8012550:	080125b5 	.word	0x080125b5
 8012554:	080125bf 	.word	0x080125bf
 8012558:	080125ab 	.word	0x080125ab
 801255c:	080125bf 	.word	0x080125bf
 8012560:	0801257f 	.word	0x0801257f
 8012564:	08012575 	.word	0x08012575
 8012568:	080125bf 	.word	0x080125bf
 801256c:	08012597 	.word	0x08012597
 8012570:	08012589 	.word	0x08012589
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012574:	6839      	ldr	r1, [r7, #0]
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f000 fa3c 	bl	80129f4 <USBD_GetDescriptor>
          break;
 801257c:	e024      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801257e:	6839      	ldr	r1, [r7, #0]
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fbcb 	bl	8012d1c <USBD_SetAddress>
          break;
 8012586:	e01f      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fc0a 	bl	8012da4 <USBD_SetConfig>
 8012590:	4603      	mov	r3, r0
 8012592:	73fb      	strb	r3, [r7, #15]
          break;
 8012594:	e018      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012596:	6839      	ldr	r1, [r7, #0]
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f000 fcad 	bl	8012ef8 <USBD_GetConfig>
          break;
 801259e:	e013      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80125a0:	6839      	ldr	r1, [r7, #0]
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 fcde 	bl	8012f64 <USBD_GetStatus>
          break;
 80125a8:	e00e      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80125aa:	6839      	ldr	r1, [r7, #0]
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 fd0d 	bl	8012fcc <USBD_SetFeature>
          break;
 80125b2:	e009      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fd31 	bl	801301e <USBD_ClrFeature>
          break;
 80125bc:	e004      	b.n	80125c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80125be:	6839      	ldr	r1, [r7, #0]
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 fd88 	bl	80130d6 <USBD_CtlError>
          break;
 80125c6:	bf00      	nop
      }
      break;
 80125c8:	e004      	b.n	80125d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 fd82 	bl	80130d6 <USBD_CtlError>
      break;
 80125d2:	bf00      	nop
  }

  return ret;
 80125d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3710      	adds	r7, #16
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop

080125e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125ea:	2300      	movs	r3, #0
 80125ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80125f6:	2b40      	cmp	r3, #64	@ 0x40
 80125f8:	d005      	beq.n	8012606 <USBD_StdItfReq+0x26>
 80125fa:	2b40      	cmp	r3, #64	@ 0x40
 80125fc:	d852      	bhi.n	80126a4 <USBD_StdItfReq+0xc4>
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <USBD_StdItfReq+0x26>
 8012602:	2b20      	cmp	r3, #32
 8012604:	d14e      	bne.n	80126a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801260c:	b2db      	uxtb	r3, r3
 801260e:	3b01      	subs	r3, #1
 8012610:	2b02      	cmp	r3, #2
 8012612:	d840      	bhi.n	8012696 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	889b      	ldrh	r3, [r3, #4]
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b01      	cmp	r3, #1
 801261c:	d836      	bhi.n	801268c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	889b      	ldrh	r3, [r3, #4]
 8012622:	b2db      	uxtb	r3, r3
 8012624:	4619      	mov	r1, r3
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f7ff fedb 	bl	80123e2 <USBD_CoreFindIF>
 801262c:	4603      	mov	r3, r0
 801262e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012630:	7bbb      	ldrb	r3, [r7, #14]
 8012632:	2bff      	cmp	r3, #255	@ 0xff
 8012634:	d01d      	beq.n	8012672 <USBD_StdItfReq+0x92>
 8012636:	7bbb      	ldrb	r3, [r7, #14]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d11a      	bne.n	8012672 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801263c:	7bba      	ldrb	r2, [r7, #14]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	32ae      	adds	r2, #174	@ 0xae
 8012642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012646:	689b      	ldr	r3, [r3, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00f      	beq.n	801266c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801264c:	7bba      	ldrb	r2, [r7, #14]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012654:	7bba      	ldrb	r2, [r7, #14]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	32ae      	adds	r2, #174	@ 0xae
 801265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	4798      	blx	r3
 8012666:	4603      	mov	r3, r0
 8012668:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801266a:	e004      	b.n	8012676 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801266c:	2303      	movs	r3, #3
 801266e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012670:	e001      	b.n	8012676 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012672:	2303      	movs	r3, #3
 8012674:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	88db      	ldrh	r3, [r3, #6]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d110      	bne.n	80126a0 <USBD_StdItfReq+0xc0>
 801267e:	7bfb      	ldrb	r3, [r7, #15]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d10d      	bne.n	80126a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 fdfd 	bl	8013284 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801268a:	e009      	b.n	80126a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 fd21 	bl	80130d6 <USBD_CtlError>
          break;
 8012694:	e004      	b.n	80126a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012696:	6839      	ldr	r1, [r7, #0]
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f000 fd1c 	bl	80130d6 <USBD_CtlError>
          break;
 801269e:	e000      	b.n	80126a2 <USBD_StdItfReq+0xc2>
          break;
 80126a0:	bf00      	nop
      }
      break;
 80126a2:	e004      	b.n	80126ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fd15 	bl	80130d6 <USBD_CtlError>
      break;
 80126ac:	bf00      	nop
  }

  return ret;
 80126ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80126c2:	2300      	movs	r3, #0
 80126c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	889b      	ldrh	r3, [r3, #4]
 80126ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80126d4:	2b40      	cmp	r3, #64	@ 0x40
 80126d6:	d007      	beq.n	80126e8 <USBD_StdEPReq+0x30>
 80126d8:	2b40      	cmp	r3, #64	@ 0x40
 80126da:	f200 817f 	bhi.w	80129dc <USBD_StdEPReq+0x324>
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d02a      	beq.n	8012738 <USBD_StdEPReq+0x80>
 80126e2:	2b20      	cmp	r3, #32
 80126e4:	f040 817a 	bne.w	80129dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80126e8:	7bbb      	ldrb	r3, [r7, #14]
 80126ea:	4619      	mov	r1, r3
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f7ff fe85 	bl	80123fc <USBD_CoreFindEP>
 80126f2:	4603      	mov	r3, r0
 80126f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126f6:	7b7b      	ldrb	r3, [r7, #13]
 80126f8:	2bff      	cmp	r3, #255	@ 0xff
 80126fa:	f000 8174 	beq.w	80129e6 <USBD_StdEPReq+0x32e>
 80126fe:	7b7b      	ldrb	r3, [r7, #13]
 8012700:	2b00      	cmp	r3, #0
 8012702:	f040 8170 	bne.w	80129e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012706:	7b7a      	ldrb	r2, [r7, #13]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801270e:	7b7a      	ldrb	r2, [r7, #13]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	32ae      	adds	r2, #174	@ 0xae
 8012714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 8163 	beq.w	80129e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012720:	7b7a      	ldrb	r2, [r7, #13]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	32ae      	adds	r2, #174	@ 0xae
 8012726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801272a:	689b      	ldr	r3, [r3, #8]
 801272c:	6839      	ldr	r1, [r7, #0]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	4798      	blx	r3
 8012732:	4603      	mov	r3, r0
 8012734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012736:	e156      	b.n	80129e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	785b      	ldrb	r3, [r3, #1]
 801273c:	2b03      	cmp	r3, #3
 801273e:	d008      	beq.n	8012752 <USBD_StdEPReq+0x9a>
 8012740:	2b03      	cmp	r3, #3
 8012742:	f300 8145 	bgt.w	80129d0 <USBD_StdEPReq+0x318>
 8012746:	2b00      	cmp	r3, #0
 8012748:	f000 809b 	beq.w	8012882 <USBD_StdEPReq+0x1ca>
 801274c:	2b01      	cmp	r3, #1
 801274e:	d03c      	beq.n	80127ca <USBD_StdEPReq+0x112>
 8012750:	e13e      	b.n	80129d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012758:	b2db      	uxtb	r3, r3
 801275a:	2b02      	cmp	r3, #2
 801275c:	d002      	beq.n	8012764 <USBD_StdEPReq+0xac>
 801275e:	2b03      	cmp	r3, #3
 8012760:	d016      	beq.n	8012790 <USBD_StdEPReq+0xd8>
 8012762:	e02c      	b.n	80127be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012764:	7bbb      	ldrb	r3, [r7, #14]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00d      	beq.n	8012786 <USBD_StdEPReq+0xce>
 801276a:	7bbb      	ldrb	r3, [r7, #14]
 801276c:	2b80      	cmp	r3, #128	@ 0x80
 801276e:	d00a      	beq.n	8012786 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012770:	7bbb      	ldrb	r3, [r7, #14]
 8012772:	4619      	mov	r1, r3
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f001 f9ed 	bl	8013b54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801277a:	2180      	movs	r1, #128	@ 0x80
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f001 f9e9 	bl	8013b54 <USBD_LL_StallEP>
 8012782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012784:	e020      	b.n	80127c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012786:	6839      	ldr	r1, [r7, #0]
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fca4 	bl	80130d6 <USBD_CtlError>
              break;
 801278e:	e01b      	b.n	80127c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	885b      	ldrh	r3, [r3, #2]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d10e      	bne.n	80127b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012798:	7bbb      	ldrb	r3, [r7, #14]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00b      	beq.n	80127b6 <USBD_StdEPReq+0xfe>
 801279e:	7bbb      	ldrb	r3, [r7, #14]
 80127a0:	2b80      	cmp	r3, #128	@ 0x80
 80127a2:	d008      	beq.n	80127b6 <USBD_StdEPReq+0xfe>
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	88db      	ldrh	r3, [r3, #6]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d104      	bne.n	80127b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
 80127ae:	4619      	mov	r1, r3
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f001 f9cf 	bl	8013b54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fd64 	bl	8013284 <USBD_CtlSendStatus>

              break;
 80127bc:	e004      	b.n	80127c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80127be:	6839      	ldr	r1, [r7, #0]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 fc88 	bl	80130d6 <USBD_CtlError>
              break;
 80127c6:	bf00      	nop
          }
          break;
 80127c8:	e107      	b.n	80129da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	2b02      	cmp	r3, #2
 80127d4:	d002      	beq.n	80127dc <USBD_StdEPReq+0x124>
 80127d6:	2b03      	cmp	r3, #3
 80127d8:	d016      	beq.n	8012808 <USBD_StdEPReq+0x150>
 80127da:	e04b      	b.n	8012874 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127dc:	7bbb      	ldrb	r3, [r7, #14]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d00d      	beq.n	80127fe <USBD_StdEPReq+0x146>
 80127e2:	7bbb      	ldrb	r3, [r7, #14]
 80127e4:	2b80      	cmp	r3, #128	@ 0x80
 80127e6:	d00a      	beq.n	80127fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80127e8:	7bbb      	ldrb	r3, [r7, #14]
 80127ea:	4619      	mov	r1, r3
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f001 f9b1 	bl	8013b54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80127f2:	2180      	movs	r1, #128	@ 0x80
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f001 f9ad 	bl	8013b54 <USBD_LL_StallEP>
 80127fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80127fc:	e040      	b.n	8012880 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80127fe:	6839      	ldr	r1, [r7, #0]
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 fc68 	bl	80130d6 <USBD_CtlError>
              break;
 8012806:	e03b      	b.n	8012880 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	885b      	ldrh	r3, [r3, #2]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d136      	bne.n	801287e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012810:	7bbb      	ldrb	r3, [r7, #14]
 8012812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012816:	2b00      	cmp	r3, #0
 8012818:	d004      	beq.n	8012824 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801281a:	7bbb      	ldrb	r3, [r7, #14]
 801281c:	4619      	mov	r1, r3
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f001 f9b7 	bl	8013b92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 fd2d 	bl	8013284 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801282a:	7bbb      	ldrb	r3, [r7, #14]
 801282c:	4619      	mov	r1, r3
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ff fde4 	bl	80123fc <USBD_CoreFindEP>
 8012834:	4603      	mov	r3, r0
 8012836:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012838:	7b7b      	ldrb	r3, [r7, #13]
 801283a:	2bff      	cmp	r3, #255	@ 0xff
 801283c:	d01f      	beq.n	801287e <USBD_StdEPReq+0x1c6>
 801283e:	7b7b      	ldrb	r3, [r7, #13]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11c      	bne.n	801287e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012844:	7b7a      	ldrb	r2, [r7, #13]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801284c:	7b7a      	ldrb	r2, [r7, #13]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	32ae      	adds	r2, #174	@ 0xae
 8012852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d010      	beq.n	801287e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801285c:	7b7a      	ldrb	r2, [r7, #13]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	32ae      	adds	r2, #174	@ 0xae
 8012862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	6839      	ldr	r1, [r7, #0]
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	4798      	blx	r3
 801286e:	4603      	mov	r3, r0
 8012870:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012872:	e004      	b.n	801287e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012874:	6839      	ldr	r1, [r7, #0]
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fc2d 	bl	80130d6 <USBD_CtlError>
              break;
 801287c:	e000      	b.n	8012880 <USBD_StdEPReq+0x1c8>
              break;
 801287e:	bf00      	nop
          }
          break;
 8012880:	e0ab      	b.n	80129da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012888:	b2db      	uxtb	r3, r3
 801288a:	2b02      	cmp	r3, #2
 801288c:	d002      	beq.n	8012894 <USBD_StdEPReq+0x1dc>
 801288e:	2b03      	cmp	r3, #3
 8012890:	d032      	beq.n	80128f8 <USBD_StdEPReq+0x240>
 8012892:	e097      	b.n	80129c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012894:	7bbb      	ldrb	r3, [r7, #14]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d007      	beq.n	80128aa <USBD_StdEPReq+0x1f2>
 801289a:	7bbb      	ldrb	r3, [r7, #14]
 801289c:	2b80      	cmp	r3, #128	@ 0x80
 801289e:	d004      	beq.n	80128aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80128a0:	6839      	ldr	r1, [r7, #0]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fc17 	bl	80130d6 <USBD_CtlError>
                break;
 80128a8:	e091      	b.n	80129ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	da0b      	bge.n	80128ca <USBD_StdEPReq+0x212>
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
 80128b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80128b8:	4613      	mov	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	4413      	add	r3, r2
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	3310      	adds	r3, #16
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	4413      	add	r3, r2
 80128c6:	3304      	adds	r3, #4
 80128c8:	e00b      	b.n	80128e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80128ca:	7bbb      	ldrb	r3, [r7, #14]
 80128cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128d0:	4613      	mov	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	4413      	add	r3, r2
 80128e0:	3304      	adds	r3, #4
 80128e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	2200      	movs	r2, #0
 80128e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	2202      	movs	r2, #2
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 fc6d 	bl	80131d0 <USBD_CtlSendData>
              break;
 80128f6:	e06a      	b.n	80129ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80128f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	da11      	bge.n	8012924 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012900:	7bbb      	ldrb	r3, [r7, #14]
 8012902:	f003 020f 	and.w	r2, r3, #15
 8012906:	6879      	ldr	r1, [r7, #4]
 8012908:	4613      	mov	r3, r2
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	4413      	add	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	440b      	add	r3, r1
 8012912:	3324      	adds	r3, #36	@ 0x24
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d117      	bne.n	801294a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 fbda 	bl	80130d6 <USBD_CtlError>
                  break;
 8012922:	e054      	b.n	80129ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012924:	7bbb      	ldrb	r3, [r7, #14]
 8012926:	f003 020f 	and.w	r2, r3, #15
 801292a:	6879      	ldr	r1, [r7, #4]
 801292c:	4613      	mov	r3, r2
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	4413      	add	r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	440b      	add	r3, r1
 8012936:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d104      	bne.n	801294a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012940:	6839      	ldr	r1, [r7, #0]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 fbc7 	bl	80130d6 <USBD_CtlError>
                  break;
 8012948:	e041      	b.n	80129ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801294a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801294e:	2b00      	cmp	r3, #0
 8012950:	da0b      	bge.n	801296a <USBD_StdEPReq+0x2b2>
 8012952:	7bbb      	ldrb	r3, [r7, #14]
 8012954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012958:	4613      	mov	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4413      	add	r3, r2
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	3310      	adds	r3, #16
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	3304      	adds	r3, #4
 8012968:	e00b      	b.n	8012982 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801296a:	7bbb      	ldrb	r3, [r7, #14]
 801296c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012970:	4613      	mov	r3, r2
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4413      	add	r3, r2
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	4413      	add	r3, r2
 8012980:	3304      	adds	r3, #4
 8012982:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012984:	7bbb      	ldrb	r3, [r7, #14]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d002      	beq.n	8012990 <USBD_StdEPReq+0x2d8>
 801298a:	7bbb      	ldrb	r3, [r7, #14]
 801298c:	2b80      	cmp	r3, #128	@ 0x80
 801298e:	d103      	bne.n	8012998 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	2200      	movs	r2, #0
 8012994:	601a      	str	r2, [r3, #0]
 8012996:	e00e      	b.n	80129b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012998:	7bbb      	ldrb	r3, [r7, #14]
 801299a:	4619      	mov	r1, r3
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f001 f917 	bl	8013bd0 <USBD_LL_IsStallEP>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d003      	beq.n	80129b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2201      	movs	r2, #1
 80129ac:	601a      	str	r2, [r3, #0]
 80129ae:	e002      	b.n	80129b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	2202      	movs	r2, #2
 80129ba:	4619      	mov	r1, r3
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 fc07 	bl	80131d0 <USBD_CtlSendData>
              break;
 80129c2:	e004      	b.n	80129ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80129c4:	6839      	ldr	r1, [r7, #0]
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 fb85 	bl	80130d6 <USBD_CtlError>
              break;
 80129cc:	bf00      	nop
          }
          break;
 80129ce:	e004      	b.n	80129da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80129d0:	6839      	ldr	r1, [r7, #0]
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fb7f 	bl	80130d6 <USBD_CtlError>
          break;
 80129d8:	bf00      	nop
      }
      break;
 80129da:	e005      	b.n	80129e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80129dc:	6839      	ldr	r1, [r7, #0]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 fb79 	bl	80130d6 <USBD_CtlError>
      break;
 80129e4:	e000      	b.n	80129e8 <USBD_StdEPReq+0x330>
      break;
 80129e6:	bf00      	nop
  }

  return ret;
 80129e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80129fe:	2300      	movs	r3, #0
 8012a00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012a02:	2300      	movs	r3, #0
 8012a04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012a06:	2300      	movs	r3, #0
 8012a08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	885b      	ldrh	r3, [r3, #2]
 8012a0e:	0a1b      	lsrs	r3, r3, #8
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	3b01      	subs	r3, #1
 8012a14:	2b0e      	cmp	r3, #14
 8012a16:	f200 8152 	bhi.w	8012cbe <USBD_GetDescriptor+0x2ca>
 8012a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8012a20 <USBD_GetDescriptor+0x2c>)
 8012a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a20:	08012a91 	.word	0x08012a91
 8012a24:	08012aa9 	.word	0x08012aa9
 8012a28:	08012ae9 	.word	0x08012ae9
 8012a2c:	08012cbf 	.word	0x08012cbf
 8012a30:	08012cbf 	.word	0x08012cbf
 8012a34:	08012c5f 	.word	0x08012c5f
 8012a38:	08012c8b 	.word	0x08012c8b
 8012a3c:	08012cbf 	.word	0x08012cbf
 8012a40:	08012cbf 	.word	0x08012cbf
 8012a44:	08012cbf 	.word	0x08012cbf
 8012a48:	08012cbf 	.word	0x08012cbf
 8012a4c:	08012cbf 	.word	0x08012cbf
 8012a50:	08012cbf 	.word	0x08012cbf
 8012a54:	08012cbf 	.word	0x08012cbf
 8012a58:	08012a5d 	.word	0x08012a5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a62:	69db      	ldr	r3, [r3, #28]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00b      	beq.n	8012a80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a6e:	69db      	ldr	r3, [r3, #28]
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	7c12      	ldrb	r2, [r2, #16]
 8012a74:	f107 0108 	add.w	r1, r7, #8
 8012a78:	4610      	mov	r0, r2
 8012a7a:	4798      	blx	r3
 8012a7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012a7e:	e126      	b.n	8012cce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012a80:	6839      	ldr	r1, [r7, #0]
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fb27 	bl	80130d6 <USBD_CtlError>
        err++;
 8012a88:	7afb      	ldrb	r3, [r7, #11]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	72fb      	strb	r3, [r7, #11]
      break;
 8012a8e:	e11e      	b.n	8012cce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	7c12      	ldrb	r2, [r2, #16]
 8012a9c:	f107 0108 	add.w	r1, r7, #8
 8012aa0:	4610      	mov	r0, r2
 8012aa2:	4798      	blx	r3
 8012aa4:	60f8      	str	r0, [r7, #12]
      break;
 8012aa6:	e112      	b.n	8012cce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	7c1b      	ldrb	r3, [r3, #16]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d10d      	bne.n	8012acc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ab8:	f107 0208 	add.w	r2, r7, #8
 8012abc:	4610      	mov	r0, r2
 8012abe:	4798      	blx	r3
 8012ac0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	2202      	movs	r2, #2
 8012ac8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012aca:	e100      	b.n	8012cce <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ad4:	f107 0208 	add.w	r2, r7, #8
 8012ad8:	4610      	mov	r0, r2
 8012ada:	4798      	blx	r3
 8012adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	701a      	strb	r2, [r3, #0]
      break;
 8012ae6:	e0f2      	b.n	8012cce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	885b      	ldrh	r3, [r3, #2]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b05      	cmp	r3, #5
 8012af0:	f200 80ac 	bhi.w	8012c4c <USBD_GetDescriptor+0x258>
 8012af4:	a201      	add	r2, pc, #4	@ (adr r2, 8012afc <USBD_GetDescriptor+0x108>)
 8012af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012afa:	bf00      	nop
 8012afc:	08012b15 	.word	0x08012b15
 8012b00:	08012b49 	.word	0x08012b49
 8012b04:	08012b7d 	.word	0x08012b7d
 8012b08:	08012bb1 	.word	0x08012bb1
 8012b0c:	08012be5 	.word	0x08012be5
 8012b10:	08012c19 	.word	0x08012c19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d00b      	beq.n	8012b38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	7c12      	ldrb	r2, [r2, #16]
 8012b2c:	f107 0108 	add.w	r1, r7, #8
 8012b30:	4610      	mov	r0, r2
 8012b32:	4798      	blx	r3
 8012b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b36:	e091      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f000 facb 	bl	80130d6 <USBD_CtlError>
            err++;
 8012b40:	7afb      	ldrb	r3, [r7, #11]
 8012b42:	3301      	adds	r3, #1
 8012b44:	72fb      	strb	r3, [r7, #11]
          break;
 8012b46:	e089      	b.n	8012c5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d00b      	beq.n	8012b6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	7c12      	ldrb	r2, [r2, #16]
 8012b60:	f107 0108 	add.w	r1, r7, #8
 8012b64:	4610      	mov	r0, r2
 8012b66:	4798      	blx	r3
 8012b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b6a:	e077      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b6c:	6839      	ldr	r1, [r7, #0]
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 fab1 	bl	80130d6 <USBD_CtlError>
            err++;
 8012b74:	7afb      	ldrb	r3, [r7, #11]
 8012b76:	3301      	adds	r3, #1
 8012b78:	72fb      	strb	r3, [r7, #11]
          break;
 8012b7a:	e06f      	b.n	8012c5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00b      	beq.n	8012ba0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	7c12      	ldrb	r2, [r2, #16]
 8012b94:	f107 0108 	add.w	r1, r7, #8
 8012b98:	4610      	mov	r0, r2
 8012b9a:	4798      	blx	r3
 8012b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b9e:	e05d      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 fa97 	bl	80130d6 <USBD_CtlError>
            err++;
 8012ba8:	7afb      	ldrb	r3, [r7, #11]
 8012baa:	3301      	adds	r3, #1
 8012bac:	72fb      	strb	r3, [r7, #11]
          break;
 8012bae:	e055      	b.n	8012c5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012bb6:	691b      	ldr	r3, [r3, #16]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00b      	beq.n	8012bd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	7c12      	ldrb	r2, [r2, #16]
 8012bc8:	f107 0108 	add.w	r1, r7, #8
 8012bcc:	4610      	mov	r0, r2
 8012bce:	4798      	blx	r3
 8012bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bd2:	e043      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bd4:	6839      	ldr	r1, [r7, #0]
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f000 fa7d 	bl	80130d6 <USBD_CtlError>
            err++;
 8012bdc:	7afb      	ldrb	r3, [r7, #11]
 8012bde:	3301      	adds	r3, #1
 8012be0:	72fb      	strb	r3, [r7, #11]
          break;
 8012be2:	e03b      	b.n	8012c5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012bea:	695b      	ldr	r3, [r3, #20]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00b      	beq.n	8012c08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012bf6:	695b      	ldr	r3, [r3, #20]
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	7c12      	ldrb	r2, [r2, #16]
 8012bfc:	f107 0108 	add.w	r1, r7, #8
 8012c00:	4610      	mov	r0, r2
 8012c02:	4798      	blx	r3
 8012c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c06:	e029      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c08:	6839      	ldr	r1, [r7, #0]
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 fa63 	bl	80130d6 <USBD_CtlError>
            err++;
 8012c10:	7afb      	ldrb	r3, [r7, #11]
 8012c12:	3301      	adds	r3, #1
 8012c14:	72fb      	strb	r3, [r7, #11]
          break;
 8012c16:	e021      	b.n	8012c5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c1e:	699b      	ldr	r3, [r3, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00b      	beq.n	8012c3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c2a:	699b      	ldr	r3, [r3, #24]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	7c12      	ldrb	r2, [r2, #16]
 8012c30:	f107 0108 	add.w	r1, r7, #8
 8012c34:	4610      	mov	r0, r2
 8012c36:	4798      	blx	r3
 8012c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c3a:	e00f      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c3c:	6839      	ldr	r1, [r7, #0]
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fa49 	bl	80130d6 <USBD_CtlError>
            err++;
 8012c44:	7afb      	ldrb	r3, [r7, #11]
 8012c46:	3301      	adds	r3, #1
 8012c48:	72fb      	strb	r3, [r7, #11]
          break;
 8012c4a:	e007      	b.n	8012c5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012c4c:	6839      	ldr	r1, [r7, #0]
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 fa41 	bl	80130d6 <USBD_CtlError>
          err++;
 8012c54:	7afb      	ldrb	r3, [r7, #11]
 8012c56:	3301      	adds	r3, #1
 8012c58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012c5a:	bf00      	nop
      }
      break;
 8012c5c:	e037      	b.n	8012cce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	7c1b      	ldrb	r3, [r3, #16]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d109      	bne.n	8012c7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c6e:	f107 0208 	add.w	r2, r7, #8
 8012c72:	4610      	mov	r0, r2
 8012c74:	4798      	blx	r3
 8012c76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c78:	e029      	b.n	8012cce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 fa2a 	bl	80130d6 <USBD_CtlError>
        err++;
 8012c82:	7afb      	ldrb	r3, [r7, #11]
 8012c84:	3301      	adds	r3, #1
 8012c86:	72fb      	strb	r3, [r7, #11]
      break;
 8012c88:	e021      	b.n	8012cce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	7c1b      	ldrb	r3, [r3, #16]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d10d      	bne.n	8012cae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c9a:	f107 0208 	add.w	r2, r7, #8
 8012c9e:	4610      	mov	r0, r2
 8012ca0:	4798      	blx	r3
 8012ca2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	2207      	movs	r2, #7
 8012caa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012cac:	e00f      	b.n	8012cce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012cae:	6839      	ldr	r1, [r7, #0]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 fa10 	bl	80130d6 <USBD_CtlError>
        err++;
 8012cb6:	7afb      	ldrb	r3, [r7, #11]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	72fb      	strb	r3, [r7, #11]
      break;
 8012cbc:	e007      	b.n	8012cce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012cbe:	6839      	ldr	r1, [r7, #0]
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f000 fa08 	bl	80130d6 <USBD_CtlError>
      err++;
 8012cc6:	7afb      	ldrb	r3, [r7, #11]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	72fb      	strb	r3, [r7, #11]
      break;
 8012ccc:	bf00      	nop
  }

  if (err != 0U)
 8012cce:	7afb      	ldrb	r3, [r7, #11]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d11e      	bne.n	8012d12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	88db      	ldrh	r3, [r3, #6]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d016      	beq.n	8012d0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012cdc:	893b      	ldrh	r3, [r7, #8]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00e      	beq.n	8012d00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	88da      	ldrh	r2, [r3, #6]
 8012ce6:	893b      	ldrh	r3, [r7, #8]
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	bf28      	it	cs
 8012cec:	4613      	movcs	r3, r2
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012cf2:	893b      	ldrh	r3, [r7, #8]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	68f9      	ldr	r1, [r7, #12]
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f000 fa69 	bl	80131d0 <USBD_CtlSendData>
 8012cfe:	e009      	b.n	8012d14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 f9e7 	bl	80130d6 <USBD_CtlError>
 8012d08:	e004      	b.n	8012d14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 faba 	bl	8013284 <USBD_CtlSendStatus>
 8012d10:	e000      	b.n	8012d14 <USBD_GetDescriptor+0x320>
    return;
 8012d12:	bf00      	nop
  }
}
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop

08012d1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	889b      	ldrh	r3, [r3, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d131      	bne.n	8012d92 <USBD_SetAddress+0x76>
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	88db      	ldrh	r3, [r3, #6]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d12d      	bne.n	8012d92 <USBD_SetAddress+0x76>
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	885b      	ldrh	r3, [r3, #2]
 8012d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012d3c:	d829      	bhi.n	8012d92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	885b      	ldrh	r3, [r3, #2]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	2b03      	cmp	r3, #3
 8012d54:	d104      	bne.n	8012d60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012d56:	6839      	ldr	r1, [r7, #0]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 f9bc 	bl	80130d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d5e:	e01d      	b.n	8012d9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	7bfa      	ldrb	r2, [r7, #15]
 8012d64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012d68:	7bfb      	ldrb	r3, [r7, #15]
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 ff5b 	bl	8013c28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 fa86 	bl	8013284 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012d78:	7bfb      	ldrb	r3, [r7, #15]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d004      	beq.n	8012d88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2202      	movs	r2, #2
 8012d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d86:	e009      	b.n	8012d9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d90:	e004      	b.n	8012d9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 f99e 	bl	80130d6 <USBD_CtlError>
  }
}
 8012d9a:	bf00      	nop
 8012d9c:	bf00      	nop
 8012d9e:	3710      	adds	r7, #16
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dae:	2300      	movs	r3, #0
 8012db0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	885b      	ldrh	r3, [r3, #2]
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	4b4e      	ldr	r3, [pc, #312]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012dba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d905      	bls.n	8012dd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 f985 	bl	80130d6 <USBD_CtlError>
    return USBD_FAIL;
 8012dcc:	2303      	movs	r3, #3
 8012dce:	e08c      	b.n	8012eea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d002      	beq.n	8012de2 <USBD_SetConfig+0x3e>
 8012ddc:	2b03      	cmp	r3, #3
 8012dde:	d029      	beq.n	8012e34 <USBD_SetConfig+0x90>
 8012de0:	e075      	b.n	8012ece <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012de2:	4b44      	ldr	r3, [pc, #272]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d020      	beq.n	8012e2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012dea:	4b42      	ldr	r3, [pc, #264]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	461a      	mov	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012df4:	4b3f      	ldr	r3, [pc, #252]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7fe ffb9 	bl	8011d72 <USBD_SetClassConfig>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012e04:	7bfb      	ldrb	r3, [r7, #15]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d008      	beq.n	8012e1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012e0a:	6839      	ldr	r1, [r7, #0]
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f000 f962 	bl	80130d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2202      	movs	r2, #2
 8012e16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e1a:	e065      	b.n	8012ee8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 fa31 	bl	8013284 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2203      	movs	r2, #3
 8012e26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012e2a:	e05d      	b.n	8012ee8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f000 fa29 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012e32:	e059      	b.n	8012ee8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012e34:	4b2f      	ldr	r3, [pc, #188]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d112      	bne.n	8012e62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2202      	movs	r2, #2
 8012e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012e44:	4b2b      	ldr	r3, [pc, #172]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	461a      	mov	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012e4e:	4b29      	ldr	r3, [pc, #164]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7fe ffa8 	bl	8011daa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fa12 	bl	8013284 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e60:	e042      	b.n	8012ee8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012e62:	4b24      	ldr	r3, [pc, #144]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	461a      	mov	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d02a      	beq.n	8012ec6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	4619      	mov	r1, r3
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7fe ff96 	bl	8011daa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	461a      	mov	r2, r3
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e88:	4b1a      	ldr	r3, [pc, #104]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f7fe ff6f 	bl	8011d72 <USBD_SetClassConfig>
 8012e94:	4603      	mov	r3, r0
 8012e96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012e98:	7bfb      	ldrb	r3, [r7, #15]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00f      	beq.n	8012ebe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 f918 	bl	80130d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	4619      	mov	r1, r3
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7fe ff7b 	bl	8011daa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2202      	movs	r2, #2
 8012eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012ebc:	e014      	b.n	8012ee8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 f9e0 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012ec4:	e010      	b.n	8012ee8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 f9dc 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012ecc:	e00c      	b.n	8012ee8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012ece:	6839      	ldr	r1, [r7, #0]
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f000 f900 	bl	80130d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ed6:	4b07      	ldr	r3, [pc, #28]	@ (8012ef4 <USBD_SetConfig+0x150>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	4619      	mov	r1, r3
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7fe ff64 	bl	8011daa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012ee2:	2303      	movs	r3, #3
 8012ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8012ee6:	bf00      	nop
  }

  return ret;
 8012ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3710      	adds	r7, #16
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	24002d2c 	.word	0x24002d2c

08012ef8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	88db      	ldrh	r3, [r3, #6]
 8012f06:	2b01      	cmp	r3, #1
 8012f08:	d004      	beq.n	8012f14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012f0a:	6839      	ldr	r1, [r7, #0]
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 f8e2 	bl	80130d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012f12:	e023      	b.n	8012f5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b02      	cmp	r3, #2
 8012f1e:	dc02      	bgt.n	8012f26 <USBD_GetConfig+0x2e>
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	dc03      	bgt.n	8012f2c <USBD_GetConfig+0x34>
 8012f24:	e015      	b.n	8012f52 <USBD_GetConfig+0x5a>
 8012f26:	2b03      	cmp	r3, #3
 8012f28:	d00b      	beq.n	8012f42 <USBD_GetConfig+0x4a>
 8012f2a:	e012      	b.n	8012f52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3308      	adds	r3, #8
 8012f36:	2201      	movs	r2, #1
 8012f38:	4619      	mov	r1, r3
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f000 f948 	bl	80131d0 <USBD_CtlSendData>
        break;
 8012f40:	e00c      	b.n	8012f5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	3304      	adds	r3, #4
 8012f46:	2201      	movs	r2, #1
 8012f48:	4619      	mov	r1, r3
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f000 f940 	bl	80131d0 <USBD_CtlSendData>
        break;
 8012f50:	e004      	b.n	8012f5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012f52:	6839      	ldr	r1, [r7, #0]
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 f8be 	bl	80130d6 <USBD_CtlError>
        break;
 8012f5a:	bf00      	nop
}
 8012f5c:	bf00      	nop
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	3b01      	subs	r3, #1
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d81e      	bhi.n	8012fba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	88db      	ldrh	r3, [r3, #6]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d004      	beq.n	8012f8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 f8a5 	bl	80130d6 <USBD_CtlError>
        break;
 8012f8c:	e01a      	b.n	8012fc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2201      	movs	r2, #1
 8012f92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d005      	beq.n	8012faa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	f043 0202 	orr.w	r2, r3, #2
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	330c      	adds	r3, #12
 8012fae:	2202      	movs	r2, #2
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 f90c 	bl	80131d0 <USBD_CtlSendData>
      break;
 8012fb8:	e004      	b.n	8012fc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012fba:	6839      	ldr	r1, [r7, #0]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f88a 	bl	80130d6 <USBD_CtlError>
      break;
 8012fc2:	bf00      	nop
  }
}
 8012fc4:	bf00      	nop
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	885b      	ldrh	r3, [r3, #2]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d107      	bne.n	8012fee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f000 f94c 	bl	8013284 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012fec:	e013      	b.n	8013016 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	885b      	ldrh	r3, [r3, #2]
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d10b      	bne.n	801300e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	889b      	ldrh	r3, [r3, #4]
 8012ffa:	0a1b      	lsrs	r3, r3, #8
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	b2da      	uxtb	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 f93c 	bl	8013284 <USBD_CtlSendStatus>
}
 801300c:	e003      	b.n	8013016 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f860 	bl	80130d6 <USBD_CtlError>
}
 8013016:	bf00      	nop
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b082      	sub	sp, #8
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
 8013026:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801302e:	b2db      	uxtb	r3, r3
 8013030:	3b01      	subs	r3, #1
 8013032:	2b02      	cmp	r3, #2
 8013034:	d80b      	bhi.n	801304e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	885b      	ldrh	r3, [r3, #2]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d10c      	bne.n	8013058 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 f91c 	bl	8013284 <USBD_CtlSendStatus>
      }
      break;
 801304c:	e004      	b.n	8013058 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 f840 	bl	80130d6 <USBD_CtlError>
      break;
 8013056:	e000      	b.n	801305a <USBD_ClrFeature+0x3c>
      break;
 8013058:	bf00      	nop
  }
}
 801305a:	bf00      	nop
 801305c:	3708      	adds	r7, #8
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013062:	b580      	push	{r7, lr}
 8013064:	b084      	sub	sp, #16
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
 801306a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	781a      	ldrb	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	3301      	adds	r3, #1
 801307c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	781a      	ldrb	r2, [r3, #0]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	3301      	adds	r3, #1
 801308a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7ff fa16 	bl	80124be <SWAPBYTE>
 8013092:	4603      	mov	r3, r0
 8013094:	461a      	mov	r2, r3
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	3301      	adds	r3, #1
 801309e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	3301      	adds	r3, #1
 80130a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ff fa09 	bl	80124be <SWAPBYTE>
 80130ac:	4603      	mov	r3, r0
 80130ae:	461a      	mov	r2, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	3301      	adds	r3, #1
 80130b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	3301      	adds	r3, #1
 80130be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80130c0:	68f8      	ldr	r0, [r7, #12]
 80130c2:	f7ff f9fc 	bl	80124be <SWAPBYTE>
 80130c6:	4603      	mov	r3, r0
 80130c8:	461a      	mov	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	80da      	strh	r2, [r3, #6]
}
 80130ce:	bf00      	nop
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b082      	sub	sp, #8
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80130e0:	2180      	movs	r1, #128	@ 0x80
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 fd36 	bl	8013b54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80130e8:	2100      	movs	r1, #0
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f000 fd32 	bl	8013b54 <USBD_LL_StallEP>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013104:	2300      	movs	r3, #0
 8013106:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d042      	beq.n	8013194 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013112:	6938      	ldr	r0, [r7, #16]
 8013114:	f000 f842 	bl	801319c <USBD_GetLen>
 8013118:	4603      	mov	r3, r0
 801311a:	3301      	adds	r3, #1
 801311c:	005b      	lsls	r3, r3, #1
 801311e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013122:	d808      	bhi.n	8013136 <USBD_GetString+0x3e>
 8013124:	6938      	ldr	r0, [r7, #16]
 8013126:	f000 f839 	bl	801319c <USBD_GetLen>
 801312a:	4603      	mov	r3, r0
 801312c:	3301      	adds	r3, #1
 801312e:	b29b      	uxth	r3, r3
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	b29a      	uxth	r2, r3
 8013134:	e001      	b.n	801313a <USBD_GetString+0x42>
 8013136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801313e:	7dfb      	ldrb	r3, [r7, #23]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	4413      	add	r3, r2
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	7812      	ldrb	r2, [r2, #0]
 8013148:	701a      	strb	r2, [r3, #0]
  idx++;
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	3301      	adds	r3, #1
 801314e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013150:	7dfb      	ldrb	r3, [r7, #23]
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	4413      	add	r3, r2
 8013156:	2203      	movs	r2, #3
 8013158:	701a      	strb	r2, [r3, #0]
  idx++;
 801315a:	7dfb      	ldrb	r3, [r7, #23]
 801315c:	3301      	adds	r3, #1
 801315e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013160:	e013      	b.n	801318a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013162:	7dfb      	ldrb	r3, [r7, #23]
 8013164:	68ba      	ldr	r2, [r7, #8]
 8013166:	4413      	add	r3, r2
 8013168:	693a      	ldr	r2, [r7, #16]
 801316a:	7812      	ldrb	r2, [r2, #0]
 801316c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	3301      	adds	r3, #1
 8013172:	613b      	str	r3, [r7, #16]
    idx++;
 8013174:	7dfb      	ldrb	r3, [r7, #23]
 8013176:	3301      	adds	r3, #1
 8013178:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	4413      	add	r3, r2
 8013180:	2200      	movs	r2, #0
 8013182:	701a      	strb	r2, [r3, #0]
    idx++;
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	3301      	adds	r3, #1
 8013188:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1e7      	bne.n	8013162 <USBD_GetString+0x6a>
 8013192:	e000      	b.n	8013196 <USBD_GetString+0x9e>
    return;
 8013194:	bf00      	nop
  }
}
 8013196:	3718      	adds	r7, #24
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801319c:	b480      	push	{r7}
 801319e:	b085      	sub	sp, #20
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80131a4:	2300      	movs	r3, #0
 80131a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80131ac:	e005      	b.n	80131ba <USBD_GetLen+0x1e>
  {
    len++;
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	3301      	adds	r3, #1
 80131b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	3301      	adds	r3, #1
 80131b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1f5      	bne.n	80131ae <USBD_GetLen+0x12>
  }

  return len;
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3714      	adds	r7, #20
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr

080131d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2202      	movs	r2, #2
 80131e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	68ba      	ldr	r2, [r7, #8]
 80131f4:	2100      	movs	r1, #0
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f000 fd35 	bl	8013c66 <USBD_LL_Transmit>

  return USBD_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b084      	sub	sp, #16
 801320a:	af00      	add	r7, sp, #0
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	68ba      	ldr	r2, [r7, #8]
 8013216:	2100      	movs	r1, #0
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f000 fd24 	bl	8013c66 <USBD_LL_Transmit>

  return USBD_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2203      	movs	r2, #3
 8013238:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	2100      	movs	r1, #0
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f000 fd28 	bl	8013ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b084      	sub	sp, #16
 8013266:	af00      	add	r7, sp, #0
 8013268:	60f8      	str	r0, [r7, #12]
 801326a:	60b9      	str	r1, [r7, #8]
 801326c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68ba      	ldr	r2, [r7, #8]
 8013272:	2100      	movs	r1, #0
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f000 fd17 	bl	8013ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2204      	movs	r2, #4
 8013290:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013294:	2300      	movs	r3, #0
 8013296:	2200      	movs	r2, #0
 8013298:	2100      	movs	r1, #0
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 fce3 	bl	8013c66 <USBD_LL_Transmit>

  return USBD_OK;
 80132a0:	2300      	movs	r3, #0
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3708      	adds	r7, #8
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}

080132aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80132aa:	b580      	push	{r7, lr}
 80132ac:	b082      	sub	sp, #8
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2205      	movs	r2, #5
 80132b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132ba:	2300      	movs	r3, #0
 80132bc:	2200      	movs	r2, #0
 80132be:	2100      	movs	r1, #0
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f000 fcf1 	bl	8013ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132c6:	2300      	movs	r3, #0
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80132d4:	2201      	movs	r2, #1
 80132d6:	4913      	ldr	r1, [pc, #76]	@ (8013324 <MX_USB_DEVICE_Init+0x54>)
 80132d8:	4813      	ldr	r0, [pc, #76]	@ (8013328 <MX_USB_DEVICE_Init+0x58>)
 80132da:	f7fe fccd 	bl	8011c78 <USBD_Init>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80132e4:	f7ed ff74 	bl	80011d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80132e8:	4910      	ldr	r1, [pc, #64]	@ (801332c <MX_USB_DEVICE_Init+0x5c>)
 80132ea:	480f      	ldr	r0, [pc, #60]	@ (8013328 <MX_USB_DEVICE_Init+0x58>)
 80132ec:	f7fe fcf4 	bl	8011cd8 <USBD_RegisterClass>
 80132f0:	4603      	mov	r3, r0
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d001      	beq.n	80132fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80132f6:	f7ed ff6b 	bl	80011d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80132fa:	490d      	ldr	r1, [pc, #52]	@ (8013330 <MX_USB_DEVICE_Init+0x60>)
 80132fc:	480a      	ldr	r0, [pc, #40]	@ (8013328 <MX_USB_DEVICE_Init+0x58>)
 80132fe:	f7fe fbeb 	bl	8011ad8 <USBD_CDC_RegisterInterface>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d001      	beq.n	801330c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013308:	f7ed ff62 	bl	80011d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801330c:	4806      	ldr	r0, [pc, #24]	@ (8013328 <MX_USB_DEVICE_Init+0x58>)
 801330e:	f7fe fd19 	bl	8011d44 <USBD_Start>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013318:	f7ed ff5a 	bl	80011d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801331c:	f7f5 fd9c 	bl	8008e58 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013320:	bf00      	nop
 8013322:	bd80      	pop	{r7, pc}
 8013324:	240000b0 	.word	0x240000b0
 8013328:	24002d30 	.word	0x24002d30
 801332c:	2400001c 	.word	0x2400001c
 8013330:	2400009c 	.word	0x2400009c

08013334 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8013338:	2200      	movs	r2, #0
 801333a:	4905      	ldr	r1, [pc, #20]	@ (8013350 <CDC_Init_HS+0x1c>)
 801333c:	4805      	ldr	r0, [pc, #20]	@ (8013354 <CDC_Init_HS+0x20>)
 801333e:	f7fe fbe5 	bl	8011b0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8013342:	4905      	ldr	r1, [pc, #20]	@ (8013358 <CDC_Init_HS+0x24>)
 8013344:	4803      	ldr	r0, [pc, #12]	@ (8013354 <CDC_Init_HS+0x20>)
 8013346:	f7fe fc03 	bl	8011b50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801334a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801334c:	4618      	mov	r0, r3
 801334e:	bd80      	pop	{r7, pc}
 8013350:	24003810 	.word	0x24003810
 8013354:	24002d30 	.word	0x24002d30
 8013358:	24003010 	.word	0x24003010

0801335c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801335c:	b480      	push	{r7}
 801335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013360:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013362:	4618      	mov	r0, r3
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	4603      	mov	r3, r0
 8013374:	6039      	str	r1, [r7, #0]
 8013376:	71fb      	strb	r3, [r7, #7]
 8013378:	4613      	mov	r3, r2
 801337a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801337c:	79fb      	ldrb	r3, [r7, #7]
 801337e:	2b23      	cmp	r3, #35	@ 0x23
 8013380:	d84a      	bhi.n	8013418 <CDC_Control_HS+0xac>
 8013382:	a201      	add	r2, pc, #4	@ (adr r2, 8013388 <CDC_Control_HS+0x1c>)
 8013384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013388:	08013419 	.word	0x08013419
 801338c:	08013419 	.word	0x08013419
 8013390:	08013419 	.word	0x08013419
 8013394:	08013419 	.word	0x08013419
 8013398:	08013419 	.word	0x08013419
 801339c:	08013419 	.word	0x08013419
 80133a0:	08013419 	.word	0x08013419
 80133a4:	08013419 	.word	0x08013419
 80133a8:	08013419 	.word	0x08013419
 80133ac:	08013419 	.word	0x08013419
 80133b0:	08013419 	.word	0x08013419
 80133b4:	08013419 	.word	0x08013419
 80133b8:	08013419 	.word	0x08013419
 80133bc:	08013419 	.word	0x08013419
 80133c0:	08013419 	.word	0x08013419
 80133c4:	08013419 	.word	0x08013419
 80133c8:	08013419 	.word	0x08013419
 80133cc:	08013419 	.word	0x08013419
 80133d0:	08013419 	.word	0x08013419
 80133d4:	08013419 	.word	0x08013419
 80133d8:	08013419 	.word	0x08013419
 80133dc:	08013419 	.word	0x08013419
 80133e0:	08013419 	.word	0x08013419
 80133e4:	08013419 	.word	0x08013419
 80133e8:	08013419 	.word	0x08013419
 80133ec:	08013419 	.word	0x08013419
 80133f0:	08013419 	.word	0x08013419
 80133f4:	08013419 	.word	0x08013419
 80133f8:	08013419 	.word	0x08013419
 80133fc:	08013419 	.word	0x08013419
 8013400:	08013419 	.word	0x08013419
 8013404:	08013419 	.word	0x08013419
 8013408:	08013419 	.word	0x08013419
 801340c:	08013419 	.word	0x08013419
 8013410:	08013419 	.word	0x08013419
 8013414:	08013419 	.word	0x08013419
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013418:	bf00      	nop
  }

  return (USBD_OK);
 801341a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801341c:	4618      	mov	r0, r3
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	4808      	ldr	r0, [pc, #32]	@ (8013458 <CDC_Receive_HS+0x30>)
 8013436:	f7fe fb8b 	bl	8011b50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801343a:	4807      	ldr	r0, [pc, #28]	@ (8013458 <CDC_Receive_HS+0x30>)
 801343c:	f7fe fbe6 	bl	8011c0c <USBD_CDC_ReceivePacket>

  usbReceivedFlag = true;
 8013440:	4b06      	ldr	r3, [pc, #24]	@ (801345c <CDC_Receive_HS+0x34>)
 8013442:	2201      	movs	r2, #1
 8013444:	701a      	strb	r2, [r3, #0]
  receiveDataToBuffer(Buf,Len);
 8013446:	6839      	ldr	r1, [r7, #0]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 f841 	bl	80134d0 <receiveDataToBuffer>

  return (USBD_OK);
 801344e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	24002d30 	.word	0x24002d30
 801345c:	2400300c 	.word	0x2400300c

08013460 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	460b      	mov	r3, r1
 801346a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8013470:	4b0d      	ldr	r3, [pc, #52]	@ (80134a8 <CDC_Transmit_HS+0x48>)
 8013472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013476:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801347e:	2b00      	cmp	r3, #0
 8013480:	d001      	beq.n	8013486 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8013482:	2301      	movs	r3, #1
 8013484:	e00b      	b.n	801349e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8013486:	887b      	ldrh	r3, [r7, #2]
 8013488:	461a      	mov	r2, r3
 801348a:	6879      	ldr	r1, [r7, #4]
 801348c:	4806      	ldr	r0, [pc, #24]	@ (80134a8 <CDC_Transmit_HS+0x48>)
 801348e:	f7fe fb3d 	bl	8011b0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8013492:	4805      	ldr	r0, [pc, #20]	@ (80134a8 <CDC_Transmit_HS+0x48>)
 8013494:	f7fe fb7a 	bl	8011b8c <USBD_CDC_TransmitPacket>
 8013498:	4603      	mov	r3, r0
 801349a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801349c:	7bfb      	ldrb	r3, [r7, #15]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	24002d30 	.word	0x24002d30

080134ac <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b087      	sub	sp, #28
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	4613      	mov	r3, r2
 80134b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80134ba:	2300      	movs	r3, #0
 80134bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80134be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	371c      	adds	r7, #28
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr
	...

080134d0 <receiveDataToBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void receiveDataToBuffer(uint8_t* Buf, uint32_t *Len)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  uint8_t len = (uint8_t)* Len;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	73fb      	strb	r3, [r7, #15]
  memset(UsbRxDataBuffer, '\0', USB_RX_BUFF_SIZE);
 80134e0:	220f      	movs	r2, #15
 80134e2:	2100      	movs	r1, #0
 80134e4:	4809      	ldr	r0, [pc, #36]	@ (801350c <receiveDataToBuffer+0x3c>)
 80134e6:	f000 fceb 	bl	8013ec0 <memset>
  memcpy(UsbRxDataBuffer, Buf, len);
 80134ea:	7bfb      	ldrb	r3, [r7, #15]
 80134ec:	461a      	mov	r2, r3
 80134ee:	6879      	ldr	r1, [r7, #4]
 80134f0:	4806      	ldr	r0, [pc, #24]	@ (801350c <receiveDataToBuffer+0x3c>)
 80134f2:	f000 fd19 	bl	8013f28 <memcpy>
  memset(Buf, '\0', len);
 80134f6:	7bfb      	ldrb	r3, [r7, #15]
 80134f8:	461a      	mov	r2, r3
 80134fa:	2100      	movs	r1, #0
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f000 fcdf 	bl	8013ec0 <memset>

}
 8013502:	bf00      	nop
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	24002d18 	.word	0x24002d18

08013510 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	4603      	mov	r3, r0
 8013518:	6039      	str	r1, [r7, #0]
 801351a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	2212      	movs	r2, #18
 8013520:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8013522:	4b03      	ldr	r3, [pc, #12]	@ (8013530 <USBD_HS_DeviceDescriptor+0x20>)
}
 8013524:	4618      	mov	r0, r3
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr
 8013530:	240000d0 	.word	0x240000d0

08013534 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	6039      	str	r1, [r7, #0]
 801353e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	2204      	movs	r2, #4
 8013544:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013546:	4b03      	ldr	r3, [pc, #12]	@ (8013554 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8013548:	4618      	mov	r0, r3
 801354a:	370c      	adds	r7, #12
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr
 8013554:	240000e4 	.word	0x240000e4

08013558 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	4603      	mov	r3, r0
 8013560:	6039      	str	r1, [r7, #0]
 8013562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013564:	79fb      	ldrb	r3, [r7, #7]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801356a:	683a      	ldr	r2, [r7, #0]
 801356c:	4907      	ldr	r1, [pc, #28]	@ (801358c <USBD_HS_ProductStrDescriptor+0x34>)
 801356e:	4808      	ldr	r0, [pc, #32]	@ (8013590 <USBD_HS_ProductStrDescriptor+0x38>)
 8013570:	f7ff fdc2 	bl	80130f8 <USBD_GetString>
 8013574:	e004      	b.n	8013580 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013576:	683a      	ldr	r2, [r7, #0]
 8013578:	4904      	ldr	r1, [pc, #16]	@ (801358c <USBD_HS_ProductStrDescriptor+0x34>)
 801357a:	4805      	ldr	r0, [pc, #20]	@ (8013590 <USBD_HS_ProductStrDescriptor+0x38>)
 801357c:	f7ff fdbc 	bl	80130f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013580:	4b02      	ldr	r3, [pc, #8]	@ (801358c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013582:	4618      	mov	r0, r3
 8013584:	3708      	adds	r7, #8
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	24004010 	.word	0x24004010
 8013590:	080147cc 	.word	0x080147cc

08013594 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	6039      	str	r1, [r7, #0]
 801359e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80135a0:	683a      	ldr	r2, [r7, #0]
 80135a2:	4904      	ldr	r1, [pc, #16]	@ (80135b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80135a4:	4804      	ldr	r0, [pc, #16]	@ (80135b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80135a6:	f7ff fda7 	bl	80130f8 <USBD_GetString>
  return USBD_StrDesc;
 80135aa:	4b02      	ldr	r3, [pc, #8]	@ (80135b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3708      	adds	r7, #8
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	24004010 	.word	0x24004010
 80135b8:	080147e4 	.word	0x080147e4

080135bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	4603      	mov	r3, r0
 80135c4:	6039      	str	r1, [r7, #0]
 80135c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	221a      	movs	r2, #26
 80135cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80135ce:	f000 f843 	bl	8013658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80135d2:	4b02      	ldr	r3, [pc, #8]	@ (80135dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	240000e8 	.word	0x240000e8

080135e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	4603      	mov	r3, r0
 80135e8:	6039      	str	r1, [r7, #0]
 80135ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d105      	bne.n	80135fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80135f2:	683a      	ldr	r2, [r7, #0]
 80135f4:	4907      	ldr	r1, [pc, #28]	@ (8013614 <USBD_HS_ConfigStrDescriptor+0x34>)
 80135f6:	4808      	ldr	r0, [pc, #32]	@ (8013618 <USBD_HS_ConfigStrDescriptor+0x38>)
 80135f8:	f7ff fd7e 	bl	80130f8 <USBD_GetString>
 80135fc:	e004      	b.n	8013608 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80135fe:	683a      	ldr	r2, [r7, #0]
 8013600:	4904      	ldr	r1, [pc, #16]	@ (8013614 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013602:	4805      	ldr	r0, [pc, #20]	@ (8013618 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013604:	f7ff fd78 	bl	80130f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013608:	4b02      	ldr	r3, [pc, #8]	@ (8013614 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801360a:	4618      	mov	r0, r3
 801360c:	3708      	adds	r7, #8
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	24004010 	.word	0x24004010
 8013618:	080147f8 	.word	0x080147f8

0801361c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	4603      	mov	r3, r0
 8013624:	6039      	str	r1, [r7, #0]
 8013626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013628:	79fb      	ldrb	r3, [r7, #7]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d105      	bne.n	801363a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801362e:	683a      	ldr	r2, [r7, #0]
 8013630:	4907      	ldr	r1, [pc, #28]	@ (8013650 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013632:	4808      	ldr	r0, [pc, #32]	@ (8013654 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013634:	f7ff fd60 	bl	80130f8 <USBD_GetString>
 8013638:	e004      	b.n	8013644 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	4904      	ldr	r1, [pc, #16]	@ (8013650 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801363e:	4805      	ldr	r0, [pc, #20]	@ (8013654 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013640:	f7ff fd5a 	bl	80130f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013644:	4b02      	ldr	r3, [pc, #8]	@ (8013650 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8013646:	4618      	mov	r0, r3
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	24004010 	.word	0x24004010
 8013654:	08014804 	.word	0x08014804

08013658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801365e:	4b0f      	ldr	r3, [pc, #60]	@ (801369c <Get_SerialNum+0x44>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013664:	4b0e      	ldr	r3, [pc, #56]	@ (80136a0 <Get_SerialNum+0x48>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801366a:	4b0e      	ldr	r3, [pc, #56]	@ (80136a4 <Get_SerialNum+0x4c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013670:	68fa      	ldr	r2, [r7, #12]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4413      	add	r3, r2
 8013676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d009      	beq.n	8013692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801367e:	2208      	movs	r2, #8
 8013680:	4909      	ldr	r1, [pc, #36]	@ (80136a8 <Get_SerialNum+0x50>)
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f000 f814 	bl	80136b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013688:	2204      	movs	r2, #4
 801368a:	4908      	ldr	r1, [pc, #32]	@ (80136ac <Get_SerialNum+0x54>)
 801368c:	68b8      	ldr	r0, [r7, #8]
 801368e:	f000 f80f 	bl	80136b0 <IntToUnicode>
  }
}
 8013692:	bf00      	nop
 8013694:	3710      	adds	r7, #16
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	1ff1e800 	.word	0x1ff1e800
 80136a0:	1ff1e804 	.word	0x1ff1e804
 80136a4:	1ff1e808 	.word	0x1ff1e808
 80136a8:	240000ea 	.word	0x240000ea
 80136ac:	240000fa 	.word	0x240000fa

080136b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b087      	sub	sp, #28
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	4613      	mov	r3, r2
 80136bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80136c2:	2300      	movs	r3, #0
 80136c4:	75fb      	strb	r3, [r7, #23]
 80136c6:	e027      	b.n	8013718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	0f1b      	lsrs	r3, r3, #28
 80136cc:	2b09      	cmp	r3, #9
 80136ce:	d80b      	bhi.n	80136e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	0f1b      	lsrs	r3, r3, #28
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	7dfb      	ldrb	r3, [r7, #23]
 80136d8:	005b      	lsls	r3, r3, #1
 80136da:	4619      	mov	r1, r3
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	440b      	add	r3, r1
 80136e0:	3230      	adds	r2, #48	@ 0x30
 80136e2:	b2d2      	uxtb	r2, r2
 80136e4:	701a      	strb	r2, [r3, #0]
 80136e6:	e00a      	b.n	80136fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	0f1b      	lsrs	r3, r3, #28
 80136ec:	b2da      	uxtb	r2, r3
 80136ee:	7dfb      	ldrb	r3, [r7, #23]
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4619      	mov	r1, r3
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	440b      	add	r3, r1
 80136f8:	3237      	adds	r2, #55	@ 0x37
 80136fa:	b2d2      	uxtb	r2, r2
 80136fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	011b      	lsls	r3, r3, #4
 8013702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013704:	7dfb      	ldrb	r3, [r7, #23]
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	3301      	adds	r3, #1
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	4413      	add	r3, r2
 801370e:	2200      	movs	r2, #0
 8013710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013712:	7dfb      	ldrb	r3, [r7, #23]
 8013714:	3301      	adds	r3, #1
 8013716:	75fb      	strb	r3, [r7, #23]
 8013718:	7dfa      	ldrb	r2, [r7, #23]
 801371a:	79fb      	ldrb	r3, [r7, #7]
 801371c:	429a      	cmp	r2, r3
 801371e:	d3d3      	bcc.n	80136c8 <IntToUnicode+0x18>
  }
}
 8013720:	bf00      	nop
 8013722:	bf00      	nop
 8013724:	371c      	adds	r7, #28
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr
	...

08013730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b0b8      	sub	sp, #224	@ 0xe0
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013738:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 801373c:	2200      	movs	r2, #0
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	605a      	str	r2, [r3, #4]
 8013742:	609a      	str	r2, [r3, #8]
 8013744:	60da      	str	r2, [r3, #12]
 8013746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013748:	f107 0310 	add.w	r3, r7, #16
 801374c:	22b8      	movs	r2, #184	@ 0xb8
 801374e:	2100      	movs	r1, #0
 8013750:	4618      	mov	r0, r3
 8013752:	f000 fbb5 	bl	8013ec0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	4a29      	ldr	r2, [pc, #164]	@ (8013800 <HAL_PCD_MspInit+0xd0>)
 801375c:	4293      	cmp	r3, r2
 801375e:	d14b      	bne.n	80137f8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013760:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8013764:	f04f 0300 	mov.w	r3, #0
 8013768:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801376c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013770:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013774:	f107 0310 	add.w	r3, r7, #16
 8013778:	4618      	mov	r0, r3
 801377a:	f7f6 fae3 	bl	8009d44 <HAL_RCCEx_PeriphCLKConfig>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d001      	beq.n	8013788 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8013784:	f7ed fd24 	bl	80011d0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013788:	f7f5 fb66 	bl	8008e58 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801378c:	4b1d      	ldr	r3, [pc, #116]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 801378e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013792:	4a1c      	ldr	r2, [pc, #112]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 8013794:	f043 0301 	orr.w	r3, r3, #1
 8013798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801379c:	4b19      	ldr	r3, [pc, #100]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 801379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	60fb      	str	r3, [r7, #12]
 80137a8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80137aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80137ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80137b2:	2300      	movs	r3, #0
 80137b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137b8:	2300      	movs	r3, #0
 80137ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80137be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80137c2:	4619      	mov	r1, r3
 80137c4:	4810      	ldr	r0, [pc, #64]	@ (8013808 <HAL_PCD_MspInit+0xd8>)
 80137c6:	f7f3 fd41 	bl	800724c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80137ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 80137cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80137d0:	4a0c      	ldr	r2, [pc, #48]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 80137d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80137d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80137da:	4b0a      	ldr	r3, [pc, #40]	@ (8013804 <HAL_PCD_MspInit+0xd4>)
 80137dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80137e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137e4:	60bb      	str	r3, [r7, #8]
 80137e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80137e8:	2200      	movs	r2, #0
 80137ea:	2100      	movs	r1, #0
 80137ec:	204d      	movs	r0, #77	@ 0x4d
 80137ee:	f7f1 f8f6 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80137f2:	204d      	movs	r0, #77	@ 0x4d
 80137f4:	f7f1 f90d 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80137f8:	bf00      	nop
 80137fa:	37e0      	adds	r7, #224	@ 0xe0
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	40040000 	.word	0x40040000
 8013804:	58024400 	.word	0x58024400
 8013808:	58020000 	.word	0x58020000

0801380c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013820:	4619      	mov	r1, r3
 8013822:	4610      	mov	r0, r2
 8013824:	f7fe fadb 	bl	8011dde <USBD_LL_SetupStage>
}
 8013828:	bf00      	nop
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	460b      	mov	r3, r1
 801383a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013842:	78fa      	ldrb	r2, [r7, #3]
 8013844:	6879      	ldr	r1, [r7, #4]
 8013846:	4613      	mov	r3, r2
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	4413      	add	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	440b      	add	r3, r1
 8013850:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	78fb      	ldrb	r3, [r7, #3]
 8013858:	4619      	mov	r1, r3
 801385a:	f7fe fb15 	bl	8011e88 <USBD_LL_DataOutStage>
}
 801385e:	bf00      	nop
 8013860:	3708      	adds	r7, #8
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}

08013866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013866:	b580      	push	{r7, lr}
 8013868:	b082      	sub	sp, #8
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
 801386e:	460b      	mov	r3, r1
 8013870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013878:	78fa      	ldrb	r2, [r7, #3]
 801387a:	6879      	ldr	r1, [r7, #4]
 801387c:	4613      	mov	r3, r2
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	4413      	add	r3, r2
 8013882:	009b      	lsls	r3, r3, #2
 8013884:	440b      	add	r3, r1
 8013886:	3320      	adds	r3, #32
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	78fb      	ldrb	r3, [r7, #3]
 801388c:	4619      	mov	r1, r3
 801388e:	f7fe fbae 	bl	8011fee <USBD_LL_DataInStage>
}
 8013892:	bf00      	nop
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b082      	sub	sp, #8
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fe fce8 	bl	801227e <USBD_LL_SOF>
}
 80138ae:	bf00      	nop
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b084      	sub	sp, #16
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80138be:	2301      	movs	r3, #1
 80138c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	79db      	ldrb	r3, [r3, #7]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d102      	bne.n	80138d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80138ca:	2300      	movs	r3, #0
 80138cc:	73fb      	strb	r3, [r7, #15]
 80138ce:	e008      	b.n	80138e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	79db      	ldrb	r3, [r3, #7]
 80138d4:	2b02      	cmp	r3, #2
 80138d6:	d102      	bne.n	80138de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80138d8:	2301      	movs	r3, #1
 80138da:	73fb      	strb	r3, [r7, #15]
 80138dc:	e001      	b.n	80138e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80138de:	f7ed fc77 	bl	80011d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80138e8:	7bfa      	ldrb	r2, [r7, #15]
 80138ea:	4611      	mov	r1, r2
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7fe fc82 	bl	80121f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fe fc2a 	bl	8012152 <USBD_LL_Reset>
}
 80138fe:	bf00      	nop
 8013900:	3710      	adds	r7, #16
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
	...

08013908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013916:	4618      	mov	r0, r3
 8013918:	f7fe fc7d 	bl	8012216 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	6812      	ldr	r2, [r2, #0]
 801392a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801392e:	f043 0301 	orr.w	r3, r3, #1
 8013932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	7adb      	ldrb	r3, [r3, #11]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d005      	beq.n	8013948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801393c:	4b04      	ldr	r3, [pc, #16]	@ (8013950 <HAL_PCD_SuspendCallback+0x48>)
 801393e:	691b      	ldr	r3, [r3, #16]
 8013940:	4a03      	ldr	r2, [pc, #12]	@ (8013950 <HAL_PCD_SuspendCallback+0x48>)
 8013942:	f043 0306 	orr.w	r3, r3, #6
 8013946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013948:	bf00      	nop
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	e000ed00 	.word	0xe000ed00

08013954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013962:	4618      	mov	r0, r3
 8013964:	f7fe fc73 	bl	801224e <USBD_LL_Resume>
}
 8013968:	bf00      	nop
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	460b      	mov	r3, r1
 801397a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013982:	78fa      	ldrb	r2, [r7, #3]
 8013984:	4611      	mov	r1, r2
 8013986:	4618      	mov	r0, r3
 8013988:	f7fe fccb 	bl	8012322 <USBD_LL_IsoOUTIncomplete>
}
 801398c:	bf00      	nop
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	460b      	mov	r3, r1
 801399e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139a6:	78fa      	ldrb	r2, [r7, #3]
 80139a8:	4611      	mov	r1, r2
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe fc87 	bl	80122be <USBD_LL_IsoINIncomplete>
}
 80139b0:	bf00      	nop
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fe fcdd 	bl	8012386 <USBD_LL_DevConnected>
}
 80139cc:	bf00      	nop
 80139ce:	3708      	adds	r7, #8
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fe fcda 	bl	801239c <USBD_LL_DevDisconnected>
}
 80139e8:	bf00      	nop
 80139ea:	3708      	adds	r7, #8
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d140      	bne.n	8013a82 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013a00:	4a22      	ldr	r2, [pc, #136]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	4a20      	ldr	r2, [pc, #128]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013a10:	4b1e      	ldr	r3, [pc, #120]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a12:	4a1f      	ldr	r2, [pc, #124]	@ (8013a90 <USBD_LL_Init+0xa0>)
 8013a14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013a16:	4b1d      	ldr	r3, [pc, #116]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a18:	2209      	movs	r2, #9
 8013a1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a1e:	2202      	movs	r2, #2
 8013a20:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013a22:	4b1a      	ldr	r3, [pc, #104]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013a28:	4b18      	ldr	r3, [pc, #96]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013a2e:	4b17      	ldr	r3, [pc, #92]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013a34:	4b15      	ldr	r3, [pc, #84]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013a3a:	4b14      	ldr	r3, [pc, #80]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8013a40:	4b12      	ldr	r3, [pc, #72]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a42:	2201      	movs	r2, #1
 8013a44:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013a46:	4b11      	ldr	r3, [pc, #68]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a48:	2200      	movs	r2, #0
 8013a4a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a4e:	2200      	movs	r2, #0
 8013a50:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8013a52:	480e      	ldr	r0, [pc, #56]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a54:	f7f3 ff26 	bl	80078a4 <HAL_PCD_Init>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013a5e:	f7ed fbb7 	bl	80011d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8013a62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013a66:	4809      	ldr	r0, [pc, #36]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a68:	f7f5 f97b 	bl	8008d62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013a6c:	2280      	movs	r2, #128	@ 0x80
 8013a6e:	2100      	movs	r1, #0
 8013a70:	4806      	ldr	r0, [pc, #24]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a72:	f7f5 f92f 	bl	8008cd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8013a76:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8013a7a:	2101      	movs	r1, #1
 8013a7c:	4803      	ldr	r0, [pc, #12]	@ (8013a8c <USBD_LL_Init+0x9c>)
 8013a7e:	f7f5 f929 	bl	8008cd4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8013a82:	2300      	movs	r3, #0
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	24004210 	.word	0x24004210
 8013a90:	40040000 	.word	0x40040000

08013a94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7f4 f806 	bl	8007abc <HAL_PCD_Start>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ab4:	7bfb      	ldrb	r3, [r7, #15]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f942 	bl	8013d40 <USBD_Get_USB_Status>
 8013abc:	4603      	mov	r3, r0
 8013abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b084      	sub	sp, #16
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	4611      	mov	r1, r2
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	4603      	mov	r3, r0
 8013ada:	70fb      	strb	r3, [r7, #3]
 8013adc:	460b      	mov	r3, r1
 8013ade:	70bb      	strb	r3, [r7, #2]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013af2:	78bb      	ldrb	r3, [r7, #2]
 8013af4:	883a      	ldrh	r2, [r7, #0]
 8013af6:	78f9      	ldrb	r1, [r7, #3]
 8013af8:	f7f4 fd07 	bl	800850a <HAL_PCD_EP_Open>
 8013afc:	4603      	mov	r3, r0
 8013afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b00:	7bfb      	ldrb	r3, [r7, #15]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f000 f91c 	bl	8013d40 <USBD_Get_USB_Status>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b084      	sub	sp, #16
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
 8013b1e:	460b      	mov	r3, r1
 8013b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b22:	2300      	movs	r3, #0
 8013b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b26:	2300      	movs	r3, #0
 8013b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b30:	78fa      	ldrb	r2, [r7, #3]
 8013b32:	4611      	mov	r1, r2
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f4 fd52 	bl	80085de <HAL_PCD_EP_Close>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b3e:	7bfb      	ldrb	r3, [r7, #15]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f000 f8fd 	bl	8013d40 <USBD_Get_USB_Status>
 8013b46:	4603      	mov	r3, r0
 8013b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3710      	adds	r7, #16
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b60:	2300      	movs	r3, #0
 8013b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b6e:	78fa      	ldrb	r2, [r7, #3]
 8013b70:	4611      	mov	r1, r2
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f4 fe0a 	bl	800878c <HAL_PCD_EP_SetStall>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b7c:	7bfb      	ldrb	r3, [r7, #15]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 f8de 	bl	8013d40 <USBD_Get_USB_Status>
 8013b84:	4603      	mov	r3, r0
 8013b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b084      	sub	sp, #16
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013bac:	78fa      	ldrb	r2, [r7, #3]
 8013bae:	4611      	mov	r1, r2
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7f4 fe4e 	bl	8008852 <HAL_PCD_EP_ClrStall>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bba:	7bfb      	ldrb	r3, [r7, #15]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f000 f8bf 	bl	8013d40 <USBD_Get_USB_Status>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	460b      	mov	r3, r1
 8013bda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013be2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	da0b      	bge.n	8013c04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013bec:	78fb      	ldrb	r3, [r7, #3]
 8013bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013bf2:	68f9      	ldr	r1, [r7, #12]
 8013bf4:	4613      	mov	r3, r2
 8013bf6:	00db      	lsls	r3, r3, #3
 8013bf8:	4413      	add	r3, r2
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	440b      	add	r3, r1
 8013bfe:	3316      	adds	r3, #22
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	e00b      	b.n	8013c1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013c04:	78fb      	ldrb	r3, [r7, #3]
 8013c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013c0a:	68f9      	ldr	r1, [r7, #12]
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	4413      	add	r3, r2
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	440b      	add	r3, r1
 8013c16:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013c1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3714      	adds	r7, #20
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	460b      	mov	r3, r1
 8013c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c34:	2300      	movs	r3, #0
 8013c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c42:	78fa      	ldrb	r2, [r7, #3]
 8013c44:	4611      	mov	r1, r2
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f4 fc3b 	bl	80084c2 <HAL_PCD_SetAddress>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c50:	7bfb      	ldrb	r3, [r7, #15]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f000 f874 	bl	8013d40 <USBD_Get_USB_Status>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c66:	b580      	push	{r7, lr}
 8013c68:	b086      	sub	sp, #24
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	60f8      	str	r0, [r7, #12]
 8013c6e:	607a      	str	r2, [r7, #4]
 8013c70:	603b      	str	r3, [r7, #0]
 8013c72:	460b      	mov	r3, r1
 8013c74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c76:	2300      	movs	r3, #0
 8013c78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013c84:	7af9      	ldrb	r1, [r7, #11]
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	f7f4 fd45 	bl	8008718 <HAL_PCD_EP_Transmit>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c92:	7dfb      	ldrb	r3, [r7, #23]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f000 f853 	bl	8013d40 <USBD_Get_USB_Status>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3718      	adds	r7, #24
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b086      	sub	sp, #24
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	607a      	str	r2, [r7, #4]
 8013cb2:	603b      	str	r3, [r7, #0]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013cc6:	7af9      	ldrb	r1, [r7, #11]
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	f7f4 fcd1 	bl	8008672 <HAL_PCD_EP_Receive>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f000 f832 	bl	8013d40 <USBD_Get_USB_Status>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ce0:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3718      	adds	r7, #24
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b082      	sub	sp, #8
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013cfc:	78fa      	ldrb	r2, [r7, #3]
 8013cfe:	4611      	mov	r1, r2
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7f4 fcf1 	bl	80086e8 <HAL_PCD_EP_GetRxCount>
 8013d06:	4603      	mov	r3, r0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013d18:	4b03      	ldr	r3, [pc, #12]	@ (8013d28 <USBD_static_malloc+0x18>)
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	370c      	adds	r7, #12
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	240046f4 	.word	0x240046f4

08013d2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013d34:	bf00      	nop
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b085      	sub	sp, #20
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	4603      	mov	r3, r0
 8013d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013d4e:	79fb      	ldrb	r3, [r7, #7]
 8013d50:	2b03      	cmp	r3, #3
 8013d52:	d817      	bhi.n	8013d84 <USBD_Get_USB_Status+0x44>
 8013d54:	a201      	add	r2, pc, #4	@ (adr r2, 8013d5c <USBD_Get_USB_Status+0x1c>)
 8013d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d5a:	bf00      	nop
 8013d5c:	08013d6d 	.word	0x08013d6d
 8013d60:	08013d73 	.word	0x08013d73
 8013d64:	08013d79 	.word	0x08013d79
 8013d68:	08013d7f 	.word	0x08013d7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d70:	e00b      	b.n	8013d8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d72:	2303      	movs	r3, #3
 8013d74:	73fb      	strb	r3, [r7, #15]
    break;
 8013d76:	e008      	b.n	8013d8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d7c:	e005      	b.n	8013d8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d7e:	2303      	movs	r3, #3
 8013d80:	73fb      	strb	r3, [r7, #15]
    break;
 8013d82:	e002      	b.n	8013d8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d84:	2303      	movs	r3, #3
 8013d86:	73fb      	strb	r3, [r7, #15]
    break;
 8013d88:	bf00      	nop
  }
  return usb_status;
 8013d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3714      	adds	r7, #20
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <arm_sin_f32>:
 8013d98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013d9c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8013e14 <arm_sin_f32+0x7c>
 8013da0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013dac:	d42c      	bmi.n	8013e08 <arm_sin_f32+0x70>
 8013dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db2:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8013e18 <arm_sin_f32+0x80>
 8013db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013dbe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc6:	db01      	blt.n	8013dcc <arm_sin_f32+0x34>
 8013dc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013dcc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8013dd0:	4a12      	ldr	r2, [pc, #72]	@ (8013e1c <arm_sin_f32+0x84>)
 8013dd2:	ee17 3a10 	vmov	r3, s14
 8013dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dde:	ee06 3a90 	vmov	s13, r3
 8013de2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8013de6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8013dea:	ed91 0a00 	vldr	s0, [r1]
 8013dee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013df2:	edd1 6a01 	vldr	s13, [r1, #4]
 8013df6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013dfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013dfe:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013e02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e06:	4770      	bx	lr
 8013e08:	ee17 3a90 	vmov	r3, s15
 8013e0c:	3b01      	subs	r3, #1
 8013e0e:	ee07 3a90 	vmov	s15, r3
 8013e12:	e7cc      	b.n	8013dae <arm_sin_f32+0x16>
 8013e14:	3e22f983 	.word	0x3e22f983
 8013e18:	44000000 	.word	0x44000000
 8013e1c:	08014854 	.word	0x08014854

08013e20 <sniprintf>:
 8013e20:	b40c      	push	{r2, r3}
 8013e22:	b530      	push	{r4, r5, lr}
 8013e24:	4b18      	ldr	r3, [pc, #96]	@ (8013e88 <sniprintf+0x68>)
 8013e26:	1e0c      	subs	r4, r1, #0
 8013e28:	681d      	ldr	r5, [r3, #0]
 8013e2a:	b09d      	sub	sp, #116	@ 0x74
 8013e2c:	da08      	bge.n	8013e40 <sniprintf+0x20>
 8013e2e:	238b      	movs	r3, #139	@ 0x8b
 8013e30:	602b      	str	r3, [r5, #0]
 8013e32:	f04f 30ff 	mov.w	r0, #4294967295
 8013e36:	b01d      	add	sp, #116	@ 0x74
 8013e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e3c:	b002      	add	sp, #8
 8013e3e:	4770      	bx	lr
 8013e40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013e44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013e48:	f04f 0300 	mov.w	r3, #0
 8013e4c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013e4e:	bf14      	ite	ne
 8013e50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013e54:	4623      	moveq	r3, r4
 8013e56:	9304      	str	r3, [sp, #16]
 8013e58:	9307      	str	r3, [sp, #28]
 8013e5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e5e:	9002      	str	r0, [sp, #8]
 8013e60:	9006      	str	r0, [sp, #24]
 8013e62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013e66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013e68:	ab21      	add	r3, sp, #132	@ 0x84
 8013e6a:	a902      	add	r1, sp, #8
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	9301      	str	r3, [sp, #4]
 8013e70:	f000 f9bc 	bl	80141ec <_svfiprintf_r>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	bfbc      	itt	lt
 8013e78:	238b      	movlt	r3, #139	@ 0x8b
 8013e7a:	602b      	strlt	r3, [r5, #0]
 8013e7c:	2c00      	cmp	r4, #0
 8013e7e:	d0da      	beq.n	8013e36 <sniprintf+0x16>
 8013e80:	9b02      	ldr	r3, [sp, #8]
 8013e82:	2200      	movs	r2, #0
 8013e84:	701a      	strb	r2, [r3, #0]
 8013e86:	e7d6      	b.n	8013e36 <sniprintf+0x16>
 8013e88:	24000104 	.word	0x24000104

08013e8c <memmove>:
 8013e8c:	4288      	cmp	r0, r1
 8013e8e:	b510      	push	{r4, lr}
 8013e90:	eb01 0402 	add.w	r4, r1, r2
 8013e94:	d902      	bls.n	8013e9c <memmove+0x10>
 8013e96:	4284      	cmp	r4, r0
 8013e98:	4623      	mov	r3, r4
 8013e9a:	d807      	bhi.n	8013eac <memmove+0x20>
 8013e9c:	1e43      	subs	r3, r0, #1
 8013e9e:	42a1      	cmp	r1, r4
 8013ea0:	d008      	beq.n	8013eb4 <memmove+0x28>
 8013ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013eaa:	e7f8      	b.n	8013e9e <memmove+0x12>
 8013eac:	4402      	add	r2, r0
 8013eae:	4601      	mov	r1, r0
 8013eb0:	428a      	cmp	r2, r1
 8013eb2:	d100      	bne.n	8013eb6 <memmove+0x2a>
 8013eb4:	bd10      	pop	{r4, pc}
 8013eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ebe:	e7f7      	b.n	8013eb0 <memmove+0x24>

08013ec0 <memset>:
 8013ec0:	4402      	add	r2, r0
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d100      	bne.n	8013eca <memset+0xa>
 8013ec8:	4770      	bx	lr
 8013eca:	f803 1b01 	strb.w	r1, [r3], #1
 8013ece:	e7f9      	b.n	8013ec4 <memset+0x4>

08013ed0 <__errno>:
 8013ed0:	4b01      	ldr	r3, [pc, #4]	@ (8013ed8 <__errno+0x8>)
 8013ed2:	6818      	ldr	r0, [r3, #0]
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	24000104 	.word	0x24000104

08013edc <__libc_init_array>:
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	4d0d      	ldr	r5, [pc, #52]	@ (8013f14 <__libc_init_array+0x38>)
 8013ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8013f18 <__libc_init_array+0x3c>)
 8013ee2:	1b64      	subs	r4, r4, r5
 8013ee4:	10a4      	asrs	r4, r4, #2
 8013ee6:	2600      	movs	r6, #0
 8013ee8:	42a6      	cmp	r6, r4
 8013eea:	d109      	bne.n	8013f00 <__libc_init_array+0x24>
 8013eec:	4d0b      	ldr	r5, [pc, #44]	@ (8013f1c <__libc_init_array+0x40>)
 8013eee:	4c0c      	ldr	r4, [pc, #48]	@ (8013f20 <__libc_init_array+0x44>)
 8013ef0:	f000 fc4a 	bl	8014788 <_init>
 8013ef4:	1b64      	subs	r4, r4, r5
 8013ef6:	10a4      	asrs	r4, r4, #2
 8013ef8:	2600      	movs	r6, #0
 8013efa:	42a6      	cmp	r6, r4
 8013efc:	d105      	bne.n	8013f0a <__libc_init_array+0x2e>
 8013efe:	bd70      	pop	{r4, r5, r6, pc}
 8013f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f04:	4798      	blx	r3
 8013f06:	3601      	adds	r6, #1
 8013f08:	e7ee      	b.n	8013ee8 <__libc_init_array+0xc>
 8013f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f0e:	4798      	blx	r3
 8013f10:	3601      	adds	r6, #1
 8013f12:	e7f2      	b.n	8013efa <__libc_init_array+0x1e>
 8013f14:	08015094 	.word	0x08015094
 8013f18:	08015094 	.word	0x08015094
 8013f1c:	08015094 	.word	0x08015094
 8013f20:	0801509c 	.word	0x0801509c

08013f24 <__retarget_lock_acquire_recursive>:
 8013f24:	4770      	bx	lr

08013f26 <__retarget_lock_release_recursive>:
 8013f26:	4770      	bx	lr

08013f28 <memcpy>:
 8013f28:	440a      	add	r2, r1
 8013f2a:	4291      	cmp	r1, r2
 8013f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f30:	d100      	bne.n	8013f34 <memcpy+0xc>
 8013f32:	4770      	bx	lr
 8013f34:	b510      	push	{r4, lr}
 8013f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f3e:	4291      	cmp	r1, r2
 8013f40:	d1f9      	bne.n	8013f36 <memcpy+0xe>
 8013f42:	bd10      	pop	{r4, pc}

08013f44 <_free_r>:
 8013f44:	b538      	push	{r3, r4, r5, lr}
 8013f46:	4605      	mov	r5, r0
 8013f48:	2900      	cmp	r1, #0
 8013f4a:	d041      	beq.n	8013fd0 <_free_r+0x8c>
 8013f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f50:	1f0c      	subs	r4, r1, #4
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	bfb8      	it	lt
 8013f56:	18e4      	addlt	r4, r4, r3
 8013f58:	f000 f8e0 	bl	801411c <__malloc_lock>
 8013f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8013fd4 <_free_r+0x90>)
 8013f5e:	6813      	ldr	r3, [r2, #0]
 8013f60:	b933      	cbnz	r3, 8013f70 <_free_r+0x2c>
 8013f62:	6063      	str	r3, [r4, #4]
 8013f64:	6014      	str	r4, [r2, #0]
 8013f66:	4628      	mov	r0, r5
 8013f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f6c:	f000 b8dc 	b.w	8014128 <__malloc_unlock>
 8013f70:	42a3      	cmp	r3, r4
 8013f72:	d908      	bls.n	8013f86 <_free_r+0x42>
 8013f74:	6820      	ldr	r0, [r4, #0]
 8013f76:	1821      	adds	r1, r4, r0
 8013f78:	428b      	cmp	r3, r1
 8013f7a:	bf01      	itttt	eq
 8013f7c:	6819      	ldreq	r1, [r3, #0]
 8013f7e:	685b      	ldreq	r3, [r3, #4]
 8013f80:	1809      	addeq	r1, r1, r0
 8013f82:	6021      	streq	r1, [r4, #0]
 8013f84:	e7ed      	b.n	8013f62 <_free_r+0x1e>
 8013f86:	461a      	mov	r2, r3
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	b10b      	cbz	r3, 8013f90 <_free_r+0x4c>
 8013f8c:	42a3      	cmp	r3, r4
 8013f8e:	d9fa      	bls.n	8013f86 <_free_r+0x42>
 8013f90:	6811      	ldr	r1, [r2, #0]
 8013f92:	1850      	adds	r0, r2, r1
 8013f94:	42a0      	cmp	r0, r4
 8013f96:	d10b      	bne.n	8013fb0 <_free_r+0x6c>
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	4401      	add	r1, r0
 8013f9c:	1850      	adds	r0, r2, r1
 8013f9e:	4283      	cmp	r3, r0
 8013fa0:	6011      	str	r1, [r2, #0]
 8013fa2:	d1e0      	bne.n	8013f66 <_free_r+0x22>
 8013fa4:	6818      	ldr	r0, [r3, #0]
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	6053      	str	r3, [r2, #4]
 8013faa:	4408      	add	r0, r1
 8013fac:	6010      	str	r0, [r2, #0]
 8013fae:	e7da      	b.n	8013f66 <_free_r+0x22>
 8013fb0:	d902      	bls.n	8013fb8 <_free_r+0x74>
 8013fb2:	230c      	movs	r3, #12
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	e7d6      	b.n	8013f66 <_free_r+0x22>
 8013fb8:	6820      	ldr	r0, [r4, #0]
 8013fba:	1821      	adds	r1, r4, r0
 8013fbc:	428b      	cmp	r3, r1
 8013fbe:	bf04      	itt	eq
 8013fc0:	6819      	ldreq	r1, [r3, #0]
 8013fc2:	685b      	ldreq	r3, [r3, #4]
 8013fc4:	6063      	str	r3, [r4, #4]
 8013fc6:	bf04      	itt	eq
 8013fc8:	1809      	addeq	r1, r1, r0
 8013fca:	6021      	streq	r1, [r4, #0]
 8013fcc:	6054      	str	r4, [r2, #4]
 8013fce:	e7ca      	b.n	8013f66 <_free_r+0x22>
 8013fd0:	bd38      	pop	{r3, r4, r5, pc}
 8013fd2:	bf00      	nop
 8013fd4:	24004a58 	.word	0x24004a58

08013fd8 <sbrk_aligned>:
 8013fd8:	b570      	push	{r4, r5, r6, lr}
 8013fda:	4e0f      	ldr	r6, [pc, #60]	@ (8014018 <sbrk_aligned+0x40>)
 8013fdc:	460c      	mov	r4, r1
 8013fde:	6831      	ldr	r1, [r6, #0]
 8013fe0:	4605      	mov	r5, r0
 8013fe2:	b911      	cbnz	r1, 8013fea <sbrk_aligned+0x12>
 8013fe4:	f000 fb8a 	bl	80146fc <_sbrk_r>
 8013fe8:	6030      	str	r0, [r6, #0]
 8013fea:	4621      	mov	r1, r4
 8013fec:	4628      	mov	r0, r5
 8013fee:	f000 fb85 	bl	80146fc <_sbrk_r>
 8013ff2:	1c43      	adds	r3, r0, #1
 8013ff4:	d103      	bne.n	8013ffe <sbrk_aligned+0x26>
 8013ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	bd70      	pop	{r4, r5, r6, pc}
 8013ffe:	1cc4      	adds	r4, r0, #3
 8014000:	f024 0403 	bic.w	r4, r4, #3
 8014004:	42a0      	cmp	r0, r4
 8014006:	d0f8      	beq.n	8013ffa <sbrk_aligned+0x22>
 8014008:	1a21      	subs	r1, r4, r0
 801400a:	4628      	mov	r0, r5
 801400c:	f000 fb76 	bl	80146fc <_sbrk_r>
 8014010:	3001      	adds	r0, #1
 8014012:	d1f2      	bne.n	8013ffa <sbrk_aligned+0x22>
 8014014:	e7ef      	b.n	8013ff6 <sbrk_aligned+0x1e>
 8014016:	bf00      	nop
 8014018:	24004a54 	.word	0x24004a54

0801401c <_malloc_r>:
 801401c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014020:	1ccd      	adds	r5, r1, #3
 8014022:	f025 0503 	bic.w	r5, r5, #3
 8014026:	3508      	adds	r5, #8
 8014028:	2d0c      	cmp	r5, #12
 801402a:	bf38      	it	cc
 801402c:	250c      	movcc	r5, #12
 801402e:	2d00      	cmp	r5, #0
 8014030:	4606      	mov	r6, r0
 8014032:	db01      	blt.n	8014038 <_malloc_r+0x1c>
 8014034:	42a9      	cmp	r1, r5
 8014036:	d904      	bls.n	8014042 <_malloc_r+0x26>
 8014038:	230c      	movs	r3, #12
 801403a:	6033      	str	r3, [r6, #0]
 801403c:	2000      	movs	r0, #0
 801403e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014118 <_malloc_r+0xfc>
 8014046:	f000 f869 	bl	801411c <__malloc_lock>
 801404a:	f8d8 3000 	ldr.w	r3, [r8]
 801404e:	461c      	mov	r4, r3
 8014050:	bb44      	cbnz	r4, 80140a4 <_malloc_r+0x88>
 8014052:	4629      	mov	r1, r5
 8014054:	4630      	mov	r0, r6
 8014056:	f7ff ffbf 	bl	8013fd8 <sbrk_aligned>
 801405a:	1c43      	adds	r3, r0, #1
 801405c:	4604      	mov	r4, r0
 801405e:	d158      	bne.n	8014112 <_malloc_r+0xf6>
 8014060:	f8d8 4000 	ldr.w	r4, [r8]
 8014064:	4627      	mov	r7, r4
 8014066:	2f00      	cmp	r7, #0
 8014068:	d143      	bne.n	80140f2 <_malloc_r+0xd6>
 801406a:	2c00      	cmp	r4, #0
 801406c:	d04b      	beq.n	8014106 <_malloc_r+0xea>
 801406e:	6823      	ldr	r3, [r4, #0]
 8014070:	4639      	mov	r1, r7
 8014072:	4630      	mov	r0, r6
 8014074:	eb04 0903 	add.w	r9, r4, r3
 8014078:	f000 fb40 	bl	80146fc <_sbrk_r>
 801407c:	4581      	cmp	r9, r0
 801407e:	d142      	bne.n	8014106 <_malloc_r+0xea>
 8014080:	6821      	ldr	r1, [r4, #0]
 8014082:	1a6d      	subs	r5, r5, r1
 8014084:	4629      	mov	r1, r5
 8014086:	4630      	mov	r0, r6
 8014088:	f7ff ffa6 	bl	8013fd8 <sbrk_aligned>
 801408c:	3001      	adds	r0, #1
 801408e:	d03a      	beq.n	8014106 <_malloc_r+0xea>
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	442b      	add	r3, r5
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	f8d8 3000 	ldr.w	r3, [r8]
 801409a:	685a      	ldr	r2, [r3, #4]
 801409c:	bb62      	cbnz	r2, 80140f8 <_malloc_r+0xdc>
 801409e:	f8c8 7000 	str.w	r7, [r8]
 80140a2:	e00f      	b.n	80140c4 <_malloc_r+0xa8>
 80140a4:	6822      	ldr	r2, [r4, #0]
 80140a6:	1b52      	subs	r2, r2, r5
 80140a8:	d420      	bmi.n	80140ec <_malloc_r+0xd0>
 80140aa:	2a0b      	cmp	r2, #11
 80140ac:	d917      	bls.n	80140de <_malloc_r+0xc2>
 80140ae:	1961      	adds	r1, r4, r5
 80140b0:	42a3      	cmp	r3, r4
 80140b2:	6025      	str	r5, [r4, #0]
 80140b4:	bf18      	it	ne
 80140b6:	6059      	strne	r1, [r3, #4]
 80140b8:	6863      	ldr	r3, [r4, #4]
 80140ba:	bf08      	it	eq
 80140bc:	f8c8 1000 	streq.w	r1, [r8]
 80140c0:	5162      	str	r2, [r4, r5]
 80140c2:	604b      	str	r3, [r1, #4]
 80140c4:	4630      	mov	r0, r6
 80140c6:	f000 f82f 	bl	8014128 <__malloc_unlock>
 80140ca:	f104 000b 	add.w	r0, r4, #11
 80140ce:	1d23      	adds	r3, r4, #4
 80140d0:	f020 0007 	bic.w	r0, r0, #7
 80140d4:	1ac2      	subs	r2, r0, r3
 80140d6:	bf1c      	itt	ne
 80140d8:	1a1b      	subne	r3, r3, r0
 80140da:	50a3      	strne	r3, [r4, r2]
 80140dc:	e7af      	b.n	801403e <_malloc_r+0x22>
 80140de:	6862      	ldr	r2, [r4, #4]
 80140e0:	42a3      	cmp	r3, r4
 80140e2:	bf0c      	ite	eq
 80140e4:	f8c8 2000 	streq.w	r2, [r8]
 80140e8:	605a      	strne	r2, [r3, #4]
 80140ea:	e7eb      	b.n	80140c4 <_malloc_r+0xa8>
 80140ec:	4623      	mov	r3, r4
 80140ee:	6864      	ldr	r4, [r4, #4]
 80140f0:	e7ae      	b.n	8014050 <_malloc_r+0x34>
 80140f2:	463c      	mov	r4, r7
 80140f4:	687f      	ldr	r7, [r7, #4]
 80140f6:	e7b6      	b.n	8014066 <_malloc_r+0x4a>
 80140f8:	461a      	mov	r2, r3
 80140fa:	685b      	ldr	r3, [r3, #4]
 80140fc:	42a3      	cmp	r3, r4
 80140fe:	d1fb      	bne.n	80140f8 <_malloc_r+0xdc>
 8014100:	2300      	movs	r3, #0
 8014102:	6053      	str	r3, [r2, #4]
 8014104:	e7de      	b.n	80140c4 <_malloc_r+0xa8>
 8014106:	230c      	movs	r3, #12
 8014108:	6033      	str	r3, [r6, #0]
 801410a:	4630      	mov	r0, r6
 801410c:	f000 f80c 	bl	8014128 <__malloc_unlock>
 8014110:	e794      	b.n	801403c <_malloc_r+0x20>
 8014112:	6005      	str	r5, [r0, #0]
 8014114:	e7d6      	b.n	80140c4 <_malloc_r+0xa8>
 8014116:	bf00      	nop
 8014118:	24004a58 	.word	0x24004a58

0801411c <__malloc_lock>:
 801411c:	4801      	ldr	r0, [pc, #4]	@ (8014124 <__malloc_lock+0x8>)
 801411e:	f7ff bf01 	b.w	8013f24 <__retarget_lock_acquire_recursive>
 8014122:	bf00      	nop
 8014124:	24004a50 	.word	0x24004a50

08014128 <__malloc_unlock>:
 8014128:	4801      	ldr	r0, [pc, #4]	@ (8014130 <__malloc_unlock+0x8>)
 801412a:	f7ff befc 	b.w	8013f26 <__retarget_lock_release_recursive>
 801412e:	bf00      	nop
 8014130:	24004a50 	.word	0x24004a50

08014134 <__ssputs_r>:
 8014134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014138:	688e      	ldr	r6, [r1, #8]
 801413a:	461f      	mov	r7, r3
 801413c:	42be      	cmp	r6, r7
 801413e:	680b      	ldr	r3, [r1, #0]
 8014140:	4682      	mov	sl, r0
 8014142:	460c      	mov	r4, r1
 8014144:	4690      	mov	r8, r2
 8014146:	d82d      	bhi.n	80141a4 <__ssputs_r+0x70>
 8014148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801414c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014150:	d026      	beq.n	80141a0 <__ssputs_r+0x6c>
 8014152:	6965      	ldr	r5, [r4, #20]
 8014154:	6909      	ldr	r1, [r1, #16]
 8014156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801415a:	eba3 0901 	sub.w	r9, r3, r1
 801415e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014162:	1c7b      	adds	r3, r7, #1
 8014164:	444b      	add	r3, r9
 8014166:	106d      	asrs	r5, r5, #1
 8014168:	429d      	cmp	r5, r3
 801416a:	bf38      	it	cc
 801416c:	461d      	movcc	r5, r3
 801416e:	0553      	lsls	r3, r2, #21
 8014170:	d527      	bpl.n	80141c2 <__ssputs_r+0x8e>
 8014172:	4629      	mov	r1, r5
 8014174:	f7ff ff52 	bl	801401c <_malloc_r>
 8014178:	4606      	mov	r6, r0
 801417a:	b360      	cbz	r0, 80141d6 <__ssputs_r+0xa2>
 801417c:	6921      	ldr	r1, [r4, #16]
 801417e:	464a      	mov	r2, r9
 8014180:	f7ff fed2 	bl	8013f28 <memcpy>
 8014184:	89a3      	ldrh	r3, [r4, #12]
 8014186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801418a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801418e:	81a3      	strh	r3, [r4, #12]
 8014190:	6126      	str	r6, [r4, #16]
 8014192:	6165      	str	r5, [r4, #20]
 8014194:	444e      	add	r6, r9
 8014196:	eba5 0509 	sub.w	r5, r5, r9
 801419a:	6026      	str	r6, [r4, #0]
 801419c:	60a5      	str	r5, [r4, #8]
 801419e:	463e      	mov	r6, r7
 80141a0:	42be      	cmp	r6, r7
 80141a2:	d900      	bls.n	80141a6 <__ssputs_r+0x72>
 80141a4:	463e      	mov	r6, r7
 80141a6:	6820      	ldr	r0, [r4, #0]
 80141a8:	4632      	mov	r2, r6
 80141aa:	4641      	mov	r1, r8
 80141ac:	f7ff fe6e 	bl	8013e8c <memmove>
 80141b0:	68a3      	ldr	r3, [r4, #8]
 80141b2:	1b9b      	subs	r3, r3, r6
 80141b4:	60a3      	str	r3, [r4, #8]
 80141b6:	6823      	ldr	r3, [r4, #0]
 80141b8:	4433      	add	r3, r6
 80141ba:	6023      	str	r3, [r4, #0]
 80141bc:	2000      	movs	r0, #0
 80141be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141c2:	462a      	mov	r2, r5
 80141c4:	f000 faaa 	bl	801471c <_realloc_r>
 80141c8:	4606      	mov	r6, r0
 80141ca:	2800      	cmp	r0, #0
 80141cc:	d1e0      	bne.n	8014190 <__ssputs_r+0x5c>
 80141ce:	6921      	ldr	r1, [r4, #16]
 80141d0:	4650      	mov	r0, sl
 80141d2:	f7ff feb7 	bl	8013f44 <_free_r>
 80141d6:	230c      	movs	r3, #12
 80141d8:	f8ca 3000 	str.w	r3, [sl]
 80141dc:	89a3      	ldrh	r3, [r4, #12]
 80141de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141e2:	81a3      	strh	r3, [r4, #12]
 80141e4:	f04f 30ff 	mov.w	r0, #4294967295
 80141e8:	e7e9      	b.n	80141be <__ssputs_r+0x8a>
	...

080141ec <_svfiprintf_r>:
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	4698      	mov	r8, r3
 80141f2:	898b      	ldrh	r3, [r1, #12]
 80141f4:	061b      	lsls	r3, r3, #24
 80141f6:	b09d      	sub	sp, #116	@ 0x74
 80141f8:	4607      	mov	r7, r0
 80141fa:	460d      	mov	r5, r1
 80141fc:	4614      	mov	r4, r2
 80141fe:	d510      	bpl.n	8014222 <_svfiprintf_r+0x36>
 8014200:	690b      	ldr	r3, [r1, #16]
 8014202:	b973      	cbnz	r3, 8014222 <_svfiprintf_r+0x36>
 8014204:	2140      	movs	r1, #64	@ 0x40
 8014206:	f7ff ff09 	bl	801401c <_malloc_r>
 801420a:	6028      	str	r0, [r5, #0]
 801420c:	6128      	str	r0, [r5, #16]
 801420e:	b930      	cbnz	r0, 801421e <_svfiprintf_r+0x32>
 8014210:	230c      	movs	r3, #12
 8014212:	603b      	str	r3, [r7, #0]
 8014214:	f04f 30ff 	mov.w	r0, #4294967295
 8014218:	b01d      	add	sp, #116	@ 0x74
 801421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421e:	2340      	movs	r3, #64	@ 0x40
 8014220:	616b      	str	r3, [r5, #20]
 8014222:	2300      	movs	r3, #0
 8014224:	9309      	str	r3, [sp, #36]	@ 0x24
 8014226:	2320      	movs	r3, #32
 8014228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801422c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014230:	2330      	movs	r3, #48	@ 0x30
 8014232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80143d0 <_svfiprintf_r+0x1e4>
 8014236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801423a:	f04f 0901 	mov.w	r9, #1
 801423e:	4623      	mov	r3, r4
 8014240:	469a      	mov	sl, r3
 8014242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014246:	b10a      	cbz	r2, 801424c <_svfiprintf_r+0x60>
 8014248:	2a25      	cmp	r2, #37	@ 0x25
 801424a:	d1f9      	bne.n	8014240 <_svfiprintf_r+0x54>
 801424c:	ebba 0b04 	subs.w	fp, sl, r4
 8014250:	d00b      	beq.n	801426a <_svfiprintf_r+0x7e>
 8014252:	465b      	mov	r3, fp
 8014254:	4622      	mov	r2, r4
 8014256:	4629      	mov	r1, r5
 8014258:	4638      	mov	r0, r7
 801425a:	f7ff ff6b 	bl	8014134 <__ssputs_r>
 801425e:	3001      	adds	r0, #1
 8014260:	f000 80a7 	beq.w	80143b2 <_svfiprintf_r+0x1c6>
 8014264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014266:	445a      	add	r2, fp
 8014268:	9209      	str	r2, [sp, #36]	@ 0x24
 801426a:	f89a 3000 	ldrb.w	r3, [sl]
 801426e:	2b00      	cmp	r3, #0
 8014270:	f000 809f 	beq.w	80143b2 <_svfiprintf_r+0x1c6>
 8014274:	2300      	movs	r3, #0
 8014276:	f04f 32ff 	mov.w	r2, #4294967295
 801427a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801427e:	f10a 0a01 	add.w	sl, sl, #1
 8014282:	9304      	str	r3, [sp, #16]
 8014284:	9307      	str	r3, [sp, #28]
 8014286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801428a:	931a      	str	r3, [sp, #104]	@ 0x68
 801428c:	4654      	mov	r4, sl
 801428e:	2205      	movs	r2, #5
 8014290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014294:	484e      	ldr	r0, [pc, #312]	@ (80143d0 <_svfiprintf_r+0x1e4>)
 8014296:	f7ec f843 	bl	8000320 <memchr>
 801429a:	9a04      	ldr	r2, [sp, #16]
 801429c:	b9d8      	cbnz	r0, 80142d6 <_svfiprintf_r+0xea>
 801429e:	06d0      	lsls	r0, r2, #27
 80142a0:	bf44      	itt	mi
 80142a2:	2320      	movmi	r3, #32
 80142a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142a8:	0711      	lsls	r1, r2, #28
 80142aa:	bf44      	itt	mi
 80142ac:	232b      	movmi	r3, #43	@ 0x2b
 80142ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142b2:	f89a 3000 	ldrb.w	r3, [sl]
 80142b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80142b8:	d015      	beq.n	80142e6 <_svfiprintf_r+0xfa>
 80142ba:	9a07      	ldr	r2, [sp, #28]
 80142bc:	4654      	mov	r4, sl
 80142be:	2000      	movs	r0, #0
 80142c0:	f04f 0c0a 	mov.w	ip, #10
 80142c4:	4621      	mov	r1, r4
 80142c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142ca:	3b30      	subs	r3, #48	@ 0x30
 80142cc:	2b09      	cmp	r3, #9
 80142ce:	d94b      	bls.n	8014368 <_svfiprintf_r+0x17c>
 80142d0:	b1b0      	cbz	r0, 8014300 <_svfiprintf_r+0x114>
 80142d2:	9207      	str	r2, [sp, #28]
 80142d4:	e014      	b.n	8014300 <_svfiprintf_r+0x114>
 80142d6:	eba0 0308 	sub.w	r3, r0, r8
 80142da:	fa09 f303 	lsl.w	r3, r9, r3
 80142de:	4313      	orrs	r3, r2
 80142e0:	9304      	str	r3, [sp, #16]
 80142e2:	46a2      	mov	sl, r4
 80142e4:	e7d2      	b.n	801428c <_svfiprintf_r+0xa0>
 80142e6:	9b03      	ldr	r3, [sp, #12]
 80142e8:	1d19      	adds	r1, r3, #4
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	9103      	str	r1, [sp, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	bfbb      	ittet	lt
 80142f2:	425b      	neglt	r3, r3
 80142f4:	f042 0202 	orrlt.w	r2, r2, #2
 80142f8:	9307      	strge	r3, [sp, #28]
 80142fa:	9307      	strlt	r3, [sp, #28]
 80142fc:	bfb8      	it	lt
 80142fe:	9204      	strlt	r2, [sp, #16]
 8014300:	7823      	ldrb	r3, [r4, #0]
 8014302:	2b2e      	cmp	r3, #46	@ 0x2e
 8014304:	d10a      	bne.n	801431c <_svfiprintf_r+0x130>
 8014306:	7863      	ldrb	r3, [r4, #1]
 8014308:	2b2a      	cmp	r3, #42	@ 0x2a
 801430a:	d132      	bne.n	8014372 <_svfiprintf_r+0x186>
 801430c:	9b03      	ldr	r3, [sp, #12]
 801430e:	1d1a      	adds	r2, r3, #4
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	9203      	str	r2, [sp, #12]
 8014314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014318:	3402      	adds	r4, #2
 801431a:	9305      	str	r3, [sp, #20]
 801431c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80143e0 <_svfiprintf_r+0x1f4>
 8014320:	7821      	ldrb	r1, [r4, #0]
 8014322:	2203      	movs	r2, #3
 8014324:	4650      	mov	r0, sl
 8014326:	f7eb fffb 	bl	8000320 <memchr>
 801432a:	b138      	cbz	r0, 801433c <_svfiprintf_r+0x150>
 801432c:	9b04      	ldr	r3, [sp, #16]
 801432e:	eba0 000a 	sub.w	r0, r0, sl
 8014332:	2240      	movs	r2, #64	@ 0x40
 8014334:	4082      	lsls	r2, r0
 8014336:	4313      	orrs	r3, r2
 8014338:	3401      	adds	r4, #1
 801433a:	9304      	str	r3, [sp, #16]
 801433c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014340:	4824      	ldr	r0, [pc, #144]	@ (80143d4 <_svfiprintf_r+0x1e8>)
 8014342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014346:	2206      	movs	r2, #6
 8014348:	f7eb ffea 	bl	8000320 <memchr>
 801434c:	2800      	cmp	r0, #0
 801434e:	d036      	beq.n	80143be <_svfiprintf_r+0x1d2>
 8014350:	4b21      	ldr	r3, [pc, #132]	@ (80143d8 <_svfiprintf_r+0x1ec>)
 8014352:	bb1b      	cbnz	r3, 801439c <_svfiprintf_r+0x1b0>
 8014354:	9b03      	ldr	r3, [sp, #12]
 8014356:	3307      	adds	r3, #7
 8014358:	f023 0307 	bic.w	r3, r3, #7
 801435c:	3308      	adds	r3, #8
 801435e:	9303      	str	r3, [sp, #12]
 8014360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014362:	4433      	add	r3, r6
 8014364:	9309      	str	r3, [sp, #36]	@ 0x24
 8014366:	e76a      	b.n	801423e <_svfiprintf_r+0x52>
 8014368:	fb0c 3202 	mla	r2, ip, r2, r3
 801436c:	460c      	mov	r4, r1
 801436e:	2001      	movs	r0, #1
 8014370:	e7a8      	b.n	80142c4 <_svfiprintf_r+0xd8>
 8014372:	2300      	movs	r3, #0
 8014374:	3401      	adds	r4, #1
 8014376:	9305      	str	r3, [sp, #20]
 8014378:	4619      	mov	r1, r3
 801437a:	f04f 0c0a 	mov.w	ip, #10
 801437e:	4620      	mov	r0, r4
 8014380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014384:	3a30      	subs	r2, #48	@ 0x30
 8014386:	2a09      	cmp	r2, #9
 8014388:	d903      	bls.n	8014392 <_svfiprintf_r+0x1a6>
 801438a:	2b00      	cmp	r3, #0
 801438c:	d0c6      	beq.n	801431c <_svfiprintf_r+0x130>
 801438e:	9105      	str	r1, [sp, #20]
 8014390:	e7c4      	b.n	801431c <_svfiprintf_r+0x130>
 8014392:	fb0c 2101 	mla	r1, ip, r1, r2
 8014396:	4604      	mov	r4, r0
 8014398:	2301      	movs	r3, #1
 801439a:	e7f0      	b.n	801437e <_svfiprintf_r+0x192>
 801439c:	ab03      	add	r3, sp, #12
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	462a      	mov	r2, r5
 80143a2:	4b0e      	ldr	r3, [pc, #56]	@ (80143dc <_svfiprintf_r+0x1f0>)
 80143a4:	a904      	add	r1, sp, #16
 80143a6:	4638      	mov	r0, r7
 80143a8:	f3af 8000 	nop.w
 80143ac:	1c42      	adds	r2, r0, #1
 80143ae:	4606      	mov	r6, r0
 80143b0:	d1d6      	bne.n	8014360 <_svfiprintf_r+0x174>
 80143b2:	89ab      	ldrh	r3, [r5, #12]
 80143b4:	065b      	lsls	r3, r3, #25
 80143b6:	f53f af2d 	bmi.w	8014214 <_svfiprintf_r+0x28>
 80143ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143bc:	e72c      	b.n	8014218 <_svfiprintf_r+0x2c>
 80143be:	ab03      	add	r3, sp, #12
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	462a      	mov	r2, r5
 80143c4:	4b05      	ldr	r3, [pc, #20]	@ (80143dc <_svfiprintf_r+0x1f0>)
 80143c6:	a904      	add	r1, sp, #16
 80143c8:	4638      	mov	r0, r7
 80143ca:	f000 f879 	bl	80144c0 <_printf_i>
 80143ce:	e7ed      	b.n	80143ac <_svfiprintf_r+0x1c0>
 80143d0:	08015058 	.word	0x08015058
 80143d4:	08015062 	.word	0x08015062
 80143d8:	00000000 	.word	0x00000000
 80143dc:	08014135 	.word	0x08014135
 80143e0:	0801505e 	.word	0x0801505e

080143e4 <_printf_common>:
 80143e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e8:	4616      	mov	r6, r2
 80143ea:	4698      	mov	r8, r3
 80143ec:	688a      	ldr	r2, [r1, #8]
 80143ee:	690b      	ldr	r3, [r1, #16]
 80143f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80143f4:	4293      	cmp	r3, r2
 80143f6:	bfb8      	it	lt
 80143f8:	4613      	movlt	r3, r2
 80143fa:	6033      	str	r3, [r6, #0]
 80143fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014400:	4607      	mov	r7, r0
 8014402:	460c      	mov	r4, r1
 8014404:	b10a      	cbz	r2, 801440a <_printf_common+0x26>
 8014406:	3301      	adds	r3, #1
 8014408:	6033      	str	r3, [r6, #0]
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	0699      	lsls	r1, r3, #26
 801440e:	bf42      	ittt	mi
 8014410:	6833      	ldrmi	r3, [r6, #0]
 8014412:	3302      	addmi	r3, #2
 8014414:	6033      	strmi	r3, [r6, #0]
 8014416:	6825      	ldr	r5, [r4, #0]
 8014418:	f015 0506 	ands.w	r5, r5, #6
 801441c:	d106      	bne.n	801442c <_printf_common+0x48>
 801441e:	f104 0a19 	add.w	sl, r4, #25
 8014422:	68e3      	ldr	r3, [r4, #12]
 8014424:	6832      	ldr	r2, [r6, #0]
 8014426:	1a9b      	subs	r3, r3, r2
 8014428:	42ab      	cmp	r3, r5
 801442a:	dc26      	bgt.n	801447a <_printf_common+0x96>
 801442c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014430:	6822      	ldr	r2, [r4, #0]
 8014432:	3b00      	subs	r3, #0
 8014434:	bf18      	it	ne
 8014436:	2301      	movne	r3, #1
 8014438:	0692      	lsls	r2, r2, #26
 801443a:	d42b      	bmi.n	8014494 <_printf_common+0xb0>
 801443c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014440:	4641      	mov	r1, r8
 8014442:	4638      	mov	r0, r7
 8014444:	47c8      	blx	r9
 8014446:	3001      	adds	r0, #1
 8014448:	d01e      	beq.n	8014488 <_printf_common+0xa4>
 801444a:	6823      	ldr	r3, [r4, #0]
 801444c:	6922      	ldr	r2, [r4, #16]
 801444e:	f003 0306 	and.w	r3, r3, #6
 8014452:	2b04      	cmp	r3, #4
 8014454:	bf02      	ittt	eq
 8014456:	68e5      	ldreq	r5, [r4, #12]
 8014458:	6833      	ldreq	r3, [r6, #0]
 801445a:	1aed      	subeq	r5, r5, r3
 801445c:	68a3      	ldr	r3, [r4, #8]
 801445e:	bf0c      	ite	eq
 8014460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014464:	2500      	movne	r5, #0
 8014466:	4293      	cmp	r3, r2
 8014468:	bfc4      	itt	gt
 801446a:	1a9b      	subgt	r3, r3, r2
 801446c:	18ed      	addgt	r5, r5, r3
 801446e:	2600      	movs	r6, #0
 8014470:	341a      	adds	r4, #26
 8014472:	42b5      	cmp	r5, r6
 8014474:	d11a      	bne.n	80144ac <_printf_common+0xc8>
 8014476:	2000      	movs	r0, #0
 8014478:	e008      	b.n	801448c <_printf_common+0xa8>
 801447a:	2301      	movs	r3, #1
 801447c:	4652      	mov	r2, sl
 801447e:	4641      	mov	r1, r8
 8014480:	4638      	mov	r0, r7
 8014482:	47c8      	blx	r9
 8014484:	3001      	adds	r0, #1
 8014486:	d103      	bne.n	8014490 <_printf_common+0xac>
 8014488:	f04f 30ff 	mov.w	r0, #4294967295
 801448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014490:	3501      	adds	r5, #1
 8014492:	e7c6      	b.n	8014422 <_printf_common+0x3e>
 8014494:	18e1      	adds	r1, r4, r3
 8014496:	1c5a      	adds	r2, r3, #1
 8014498:	2030      	movs	r0, #48	@ 0x30
 801449a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801449e:	4422      	add	r2, r4
 80144a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80144a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80144a8:	3302      	adds	r3, #2
 80144aa:	e7c7      	b.n	801443c <_printf_common+0x58>
 80144ac:	2301      	movs	r3, #1
 80144ae:	4622      	mov	r2, r4
 80144b0:	4641      	mov	r1, r8
 80144b2:	4638      	mov	r0, r7
 80144b4:	47c8      	blx	r9
 80144b6:	3001      	adds	r0, #1
 80144b8:	d0e6      	beq.n	8014488 <_printf_common+0xa4>
 80144ba:	3601      	adds	r6, #1
 80144bc:	e7d9      	b.n	8014472 <_printf_common+0x8e>
	...

080144c0 <_printf_i>:
 80144c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144c4:	7e0f      	ldrb	r7, [r1, #24]
 80144c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80144c8:	2f78      	cmp	r7, #120	@ 0x78
 80144ca:	4691      	mov	r9, r2
 80144cc:	4680      	mov	r8, r0
 80144ce:	460c      	mov	r4, r1
 80144d0:	469a      	mov	sl, r3
 80144d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80144d6:	d807      	bhi.n	80144e8 <_printf_i+0x28>
 80144d8:	2f62      	cmp	r7, #98	@ 0x62
 80144da:	d80a      	bhi.n	80144f2 <_printf_i+0x32>
 80144dc:	2f00      	cmp	r7, #0
 80144de:	f000 80d1 	beq.w	8014684 <_printf_i+0x1c4>
 80144e2:	2f58      	cmp	r7, #88	@ 0x58
 80144e4:	f000 80b8 	beq.w	8014658 <_printf_i+0x198>
 80144e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80144f0:	e03a      	b.n	8014568 <_printf_i+0xa8>
 80144f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80144f6:	2b15      	cmp	r3, #21
 80144f8:	d8f6      	bhi.n	80144e8 <_printf_i+0x28>
 80144fa:	a101      	add	r1, pc, #4	@ (adr r1, 8014500 <_printf_i+0x40>)
 80144fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014500:	08014559 	.word	0x08014559
 8014504:	0801456d 	.word	0x0801456d
 8014508:	080144e9 	.word	0x080144e9
 801450c:	080144e9 	.word	0x080144e9
 8014510:	080144e9 	.word	0x080144e9
 8014514:	080144e9 	.word	0x080144e9
 8014518:	0801456d 	.word	0x0801456d
 801451c:	080144e9 	.word	0x080144e9
 8014520:	080144e9 	.word	0x080144e9
 8014524:	080144e9 	.word	0x080144e9
 8014528:	080144e9 	.word	0x080144e9
 801452c:	0801466b 	.word	0x0801466b
 8014530:	08014597 	.word	0x08014597
 8014534:	08014625 	.word	0x08014625
 8014538:	080144e9 	.word	0x080144e9
 801453c:	080144e9 	.word	0x080144e9
 8014540:	0801468d 	.word	0x0801468d
 8014544:	080144e9 	.word	0x080144e9
 8014548:	08014597 	.word	0x08014597
 801454c:	080144e9 	.word	0x080144e9
 8014550:	080144e9 	.word	0x080144e9
 8014554:	0801462d 	.word	0x0801462d
 8014558:	6833      	ldr	r3, [r6, #0]
 801455a:	1d1a      	adds	r2, r3, #4
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	6032      	str	r2, [r6, #0]
 8014560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014568:	2301      	movs	r3, #1
 801456a:	e09c      	b.n	80146a6 <_printf_i+0x1e6>
 801456c:	6833      	ldr	r3, [r6, #0]
 801456e:	6820      	ldr	r0, [r4, #0]
 8014570:	1d19      	adds	r1, r3, #4
 8014572:	6031      	str	r1, [r6, #0]
 8014574:	0606      	lsls	r6, r0, #24
 8014576:	d501      	bpl.n	801457c <_printf_i+0xbc>
 8014578:	681d      	ldr	r5, [r3, #0]
 801457a:	e003      	b.n	8014584 <_printf_i+0xc4>
 801457c:	0645      	lsls	r5, r0, #25
 801457e:	d5fb      	bpl.n	8014578 <_printf_i+0xb8>
 8014580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014584:	2d00      	cmp	r5, #0
 8014586:	da03      	bge.n	8014590 <_printf_i+0xd0>
 8014588:	232d      	movs	r3, #45	@ 0x2d
 801458a:	426d      	negs	r5, r5
 801458c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014590:	4858      	ldr	r0, [pc, #352]	@ (80146f4 <_printf_i+0x234>)
 8014592:	230a      	movs	r3, #10
 8014594:	e011      	b.n	80145ba <_printf_i+0xfa>
 8014596:	6821      	ldr	r1, [r4, #0]
 8014598:	6833      	ldr	r3, [r6, #0]
 801459a:	0608      	lsls	r0, r1, #24
 801459c:	f853 5b04 	ldr.w	r5, [r3], #4
 80145a0:	d402      	bmi.n	80145a8 <_printf_i+0xe8>
 80145a2:	0649      	lsls	r1, r1, #25
 80145a4:	bf48      	it	mi
 80145a6:	b2ad      	uxthmi	r5, r5
 80145a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80145aa:	4852      	ldr	r0, [pc, #328]	@ (80146f4 <_printf_i+0x234>)
 80145ac:	6033      	str	r3, [r6, #0]
 80145ae:	bf14      	ite	ne
 80145b0:	230a      	movne	r3, #10
 80145b2:	2308      	moveq	r3, #8
 80145b4:	2100      	movs	r1, #0
 80145b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80145ba:	6866      	ldr	r6, [r4, #4]
 80145bc:	60a6      	str	r6, [r4, #8]
 80145be:	2e00      	cmp	r6, #0
 80145c0:	db05      	blt.n	80145ce <_printf_i+0x10e>
 80145c2:	6821      	ldr	r1, [r4, #0]
 80145c4:	432e      	orrs	r6, r5
 80145c6:	f021 0104 	bic.w	r1, r1, #4
 80145ca:	6021      	str	r1, [r4, #0]
 80145cc:	d04b      	beq.n	8014666 <_printf_i+0x1a6>
 80145ce:	4616      	mov	r6, r2
 80145d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80145d4:	fb03 5711 	mls	r7, r3, r1, r5
 80145d8:	5dc7      	ldrb	r7, [r0, r7]
 80145da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145de:	462f      	mov	r7, r5
 80145e0:	42bb      	cmp	r3, r7
 80145e2:	460d      	mov	r5, r1
 80145e4:	d9f4      	bls.n	80145d0 <_printf_i+0x110>
 80145e6:	2b08      	cmp	r3, #8
 80145e8:	d10b      	bne.n	8014602 <_printf_i+0x142>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	07df      	lsls	r7, r3, #31
 80145ee:	d508      	bpl.n	8014602 <_printf_i+0x142>
 80145f0:	6923      	ldr	r3, [r4, #16]
 80145f2:	6861      	ldr	r1, [r4, #4]
 80145f4:	4299      	cmp	r1, r3
 80145f6:	bfde      	ittt	le
 80145f8:	2330      	movle	r3, #48	@ 0x30
 80145fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014602:	1b92      	subs	r2, r2, r6
 8014604:	6122      	str	r2, [r4, #16]
 8014606:	f8cd a000 	str.w	sl, [sp]
 801460a:	464b      	mov	r3, r9
 801460c:	aa03      	add	r2, sp, #12
 801460e:	4621      	mov	r1, r4
 8014610:	4640      	mov	r0, r8
 8014612:	f7ff fee7 	bl	80143e4 <_printf_common>
 8014616:	3001      	adds	r0, #1
 8014618:	d14a      	bne.n	80146b0 <_printf_i+0x1f0>
 801461a:	f04f 30ff 	mov.w	r0, #4294967295
 801461e:	b004      	add	sp, #16
 8014620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014624:	6823      	ldr	r3, [r4, #0]
 8014626:	f043 0320 	orr.w	r3, r3, #32
 801462a:	6023      	str	r3, [r4, #0]
 801462c:	4832      	ldr	r0, [pc, #200]	@ (80146f8 <_printf_i+0x238>)
 801462e:	2778      	movs	r7, #120	@ 0x78
 8014630:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014634:	6823      	ldr	r3, [r4, #0]
 8014636:	6831      	ldr	r1, [r6, #0]
 8014638:	061f      	lsls	r7, r3, #24
 801463a:	f851 5b04 	ldr.w	r5, [r1], #4
 801463e:	d402      	bmi.n	8014646 <_printf_i+0x186>
 8014640:	065f      	lsls	r7, r3, #25
 8014642:	bf48      	it	mi
 8014644:	b2ad      	uxthmi	r5, r5
 8014646:	6031      	str	r1, [r6, #0]
 8014648:	07d9      	lsls	r1, r3, #31
 801464a:	bf44      	itt	mi
 801464c:	f043 0320 	orrmi.w	r3, r3, #32
 8014650:	6023      	strmi	r3, [r4, #0]
 8014652:	b11d      	cbz	r5, 801465c <_printf_i+0x19c>
 8014654:	2310      	movs	r3, #16
 8014656:	e7ad      	b.n	80145b4 <_printf_i+0xf4>
 8014658:	4826      	ldr	r0, [pc, #152]	@ (80146f4 <_printf_i+0x234>)
 801465a:	e7e9      	b.n	8014630 <_printf_i+0x170>
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	f023 0320 	bic.w	r3, r3, #32
 8014662:	6023      	str	r3, [r4, #0]
 8014664:	e7f6      	b.n	8014654 <_printf_i+0x194>
 8014666:	4616      	mov	r6, r2
 8014668:	e7bd      	b.n	80145e6 <_printf_i+0x126>
 801466a:	6833      	ldr	r3, [r6, #0]
 801466c:	6825      	ldr	r5, [r4, #0]
 801466e:	6961      	ldr	r1, [r4, #20]
 8014670:	1d18      	adds	r0, r3, #4
 8014672:	6030      	str	r0, [r6, #0]
 8014674:	062e      	lsls	r6, r5, #24
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	d501      	bpl.n	801467e <_printf_i+0x1be>
 801467a:	6019      	str	r1, [r3, #0]
 801467c:	e002      	b.n	8014684 <_printf_i+0x1c4>
 801467e:	0668      	lsls	r0, r5, #25
 8014680:	d5fb      	bpl.n	801467a <_printf_i+0x1ba>
 8014682:	8019      	strh	r1, [r3, #0]
 8014684:	2300      	movs	r3, #0
 8014686:	6123      	str	r3, [r4, #16]
 8014688:	4616      	mov	r6, r2
 801468a:	e7bc      	b.n	8014606 <_printf_i+0x146>
 801468c:	6833      	ldr	r3, [r6, #0]
 801468e:	1d1a      	adds	r2, r3, #4
 8014690:	6032      	str	r2, [r6, #0]
 8014692:	681e      	ldr	r6, [r3, #0]
 8014694:	6862      	ldr	r2, [r4, #4]
 8014696:	2100      	movs	r1, #0
 8014698:	4630      	mov	r0, r6
 801469a:	f7eb fe41 	bl	8000320 <memchr>
 801469e:	b108      	cbz	r0, 80146a4 <_printf_i+0x1e4>
 80146a0:	1b80      	subs	r0, r0, r6
 80146a2:	6060      	str	r0, [r4, #4]
 80146a4:	6863      	ldr	r3, [r4, #4]
 80146a6:	6123      	str	r3, [r4, #16]
 80146a8:	2300      	movs	r3, #0
 80146aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146ae:	e7aa      	b.n	8014606 <_printf_i+0x146>
 80146b0:	6923      	ldr	r3, [r4, #16]
 80146b2:	4632      	mov	r2, r6
 80146b4:	4649      	mov	r1, r9
 80146b6:	4640      	mov	r0, r8
 80146b8:	47d0      	blx	sl
 80146ba:	3001      	adds	r0, #1
 80146bc:	d0ad      	beq.n	801461a <_printf_i+0x15a>
 80146be:	6823      	ldr	r3, [r4, #0]
 80146c0:	079b      	lsls	r3, r3, #30
 80146c2:	d413      	bmi.n	80146ec <_printf_i+0x22c>
 80146c4:	68e0      	ldr	r0, [r4, #12]
 80146c6:	9b03      	ldr	r3, [sp, #12]
 80146c8:	4298      	cmp	r0, r3
 80146ca:	bfb8      	it	lt
 80146cc:	4618      	movlt	r0, r3
 80146ce:	e7a6      	b.n	801461e <_printf_i+0x15e>
 80146d0:	2301      	movs	r3, #1
 80146d2:	4632      	mov	r2, r6
 80146d4:	4649      	mov	r1, r9
 80146d6:	4640      	mov	r0, r8
 80146d8:	47d0      	blx	sl
 80146da:	3001      	adds	r0, #1
 80146dc:	d09d      	beq.n	801461a <_printf_i+0x15a>
 80146de:	3501      	adds	r5, #1
 80146e0:	68e3      	ldr	r3, [r4, #12]
 80146e2:	9903      	ldr	r1, [sp, #12]
 80146e4:	1a5b      	subs	r3, r3, r1
 80146e6:	42ab      	cmp	r3, r5
 80146e8:	dcf2      	bgt.n	80146d0 <_printf_i+0x210>
 80146ea:	e7eb      	b.n	80146c4 <_printf_i+0x204>
 80146ec:	2500      	movs	r5, #0
 80146ee:	f104 0619 	add.w	r6, r4, #25
 80146f2:	e7f5      	b.n	80146e0 <_printf_i+0x220>
 80146f4:	08015069 	.word	0x08015069
 80146f8:	0801507a 	.word	0x0801507a

080146fc <_sbrk_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4d06      	ldr	r5, [pc, #24]	@ (8014718 <_sbrk_r+0x1c>)
 8014700:	2300      	movs	r3, #0
 8014702:	4604      	mov	r4, r0
 8014704:	4608      	mov	r0, r1
 8014706:	602b      	str	r3, [r5, #0]
 8014708:	f7ec ff9a 	bl	8001640 <_sbrk>
 801470c:	1c43      	adds	r3, r0, #1
 801470e:	d102      	bne.n	8014716 <_sbrk_r+0x1a>
 8014710:	682b      	ldr	r3, [r5, #0]
 8014712:	b103      	cbz	r3, 8014716 <_sbrk_r+0x1a>
 8014714:	6023      	str	r3, [r4, #0]
 8014716:	bd38      	pop	{r3, r4, r5, pc}
 8014718:	24004a4c 	.word	0x24004a4c

0801471c <_realloc_r>:
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	4607      	mov	r7, r0
 8014722:	4614      	mov	r4, r2
 8014724:	460d      	mov	r5, r1
 8014726:	b921      	cbnz	r1, 8014732 <_realloc_r+0x16>
 8014728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801472c:	4611      	mov	r1, r2
 801472e:	f7ff bc75 	b.w	801401c <_malloc_r>
 8014732:	b92a      	cbnz	r2, 8014740 <_realloc_r+0x24>
 8014734:	f7ff fc06 	bl	8013f44 <_free_r>
 8014738:	4625      	mov	r5, r4
 801473a:	4628      	mov	r0, r5
 801473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014740:	f000 f81a 	bl	8014778 <_malloc_usable_size_r>
 8014744:	4284      	cmp	r4, r0
 8014746:	4606      	mov	r6, r0
 8014748:	d802      	bhi.n	8014750 <_realloc_r+0x34>
 801474a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801474e:	d8f4      	bhi.n	801473a <_realloc_r+0x1e>
 8014750:	4621      	mov	r1, r4
 8014752:	4638      	mov	r0, r7
 8014754:	f7ff fc62 	bl	801401c <_malloc_r>
 8014758:	4680      	mov	r8, r0
 801475a:	b908      	cbnz	r0, 8014760 <_realloc_r+0x44>
 801475c:	4645      	mov	r5, r8
 801475e:	e7ec      	b.n	801473a <_realloc_r+0x1e>
 8014760:	42b4      	cmp	r4, r6
 8014762:	4622      	mov	r2, r4
 8014764:	4629      	mov	r1, r5
 8014766:	bf28      	it	cs
 8014768:	4632      	movcs	r2, r6
 801476a:	f7ff fbdd 	bl	8013f28 <memcpy>
 801476e:	4629      	mov	r1, r5
 8014770:	4638      	mov	r0, r7
 8014772:	f7ff fbe7 	bl	8013f44 <_free_r>
 8014776:	e7f1      	b.n	801475c <_realloc_r+0x40>

08014778 <_malloc_usable_size_r>:
 8014778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801477c:	1f18      	subs	r0, r3, #4
 801477e:	2b00      	cmp	r3, #0
 8014780:	bfbc      	itt	lt
 8014782:	580b      	ldrlt	r3, [r1, r0]
 8014784:	18c0      	addlt	r0, r0, r3
 8014786:	4770      	bx	lr

08014788 <_init>:
 8014788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478a:	bf00      	nop
 801478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801478e:	bc08      	pop	{r3}
 8014790:	469e      	mov	lr, r3
 8014792:	4770      	bx	lr

08014794 <_fini>:
 8014794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014796:	bf00      	nop
 8014798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801479a:	bc08      	pop	{r3}
 801479c:	469e      	mov	lr, r3
 801479e:	4770      	bx	lr
